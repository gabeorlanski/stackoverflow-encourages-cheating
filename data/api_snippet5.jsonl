{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 41067960, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 41067960, "retrieval_score": 18.095016}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 41067960, "retrieval_score": 17.848257}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 41067960, "retrieval_score": 17.848257}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 41067960, "retrieval_score": 17.848257}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 41067960, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 41067960, "retrieval_score": 11.985868}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 41067960, "retrieval_score": 9.050911}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 41067960, "retrieval_score": 9.011011}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 41067960, "retrieval_score": 7.7854953}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 4170655, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 4170655, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 4170655, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 4170655, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 4170655, "retrieval_score": 11.469158}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 29565452, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 29565452, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 29565452, "retrieval_score": 16.36546}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 29565452, "retrieval_score": 15.493557}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 29565452, "retrieval_score": 15.160545}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 13704860, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 13704860, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 13704860, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 13704860, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 13704860, "retrieval_score": 7.377835}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13331419, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13331419, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13331419, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13331419, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 13331419, "retrieval_score": 14.046785}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 25474338, "retrieval_score": 33.764957}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 25474338, "retrieval_score": 33.764957}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 25474338, "retrieval_score": 33.764957}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 25474338, "retrieval_score": 33.764957}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 25474338, "retrieval_score": 33.764957}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 18594469, "retrieval_score": 9.696108}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 18594469, "retrieval_score": 8.9242325}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 18594469, "retrieval_score": 8.322354}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 18594469, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 18594469, "retrieval_score": 7.8520374}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080, "for": 13384841, "retrieval_score": 19.142178}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 13384841, "retrieval_score": 21.326288}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080, "for": 13384841, "retrieval_score": 19.142178}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 23887592, "retrieval_score": 17.6046}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 23887592, "retrieval_score": 10.603445}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 23887592, "retrieval_score": 8.844721}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 23887592, "retrieval_score": 8.844721}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315, "for": 23887592, "retrieval_score": 7.586412}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 17352321, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 17352321, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 17352321, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 17352321, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 17352321, "retrieval_score": 5.627493}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10115967, "retrieval_score": 13.007814}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10115967, "retrieval_score": 13.007814}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10115967, "retrieval_score": 13.007814}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 10115967, "retrieval_score": 12.050466}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 10115967, "retrieval_score": 11.282446}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985, "for": 30026815, "retrieval_score": 10.275188}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288, "for": 30026815, "retrieval_score": 6.6814804}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315, "for": 30026815, "retrieval_score": 6.6814804}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335, "for": 30026815, "retrieval_score": 6.6814804}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 30026815, "retrieval_score": 5.206232}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 31958637, "retrieval_score": 8.8023}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 31958637, "retrieval_score": 6.6175947}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 31958637, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 31958637, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 31958637, "retrieval_score": 5.933986}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2158347, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2158347, "retrieval_score": 8.322354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 2158347, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 2158347, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 2158347, "retrieval_score": 8.18273}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 17888152, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 17888152, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 17888152, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 17888152, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 17888152, "retrieval_score": 19.296608}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 37855490, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 37855490, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 37855490, "retrieval_score": 9.029783}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041, "for": 37855490, "retrieval_score": 7.7504354}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 37855490, "retrieval_score": 6.7207417}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4127344, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4127344, "retrieval_score": 16.681612}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 4127344, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 4127344, "retrieval_score": 16.414843}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4127344, "retrieval_score": 14.214895}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 19035186, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 19035186, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 19035186, "retrieval_score": 9.677206}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 19035186, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 19035186, "retrieval_score": 9.029783}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 25823608, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 25823608, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 25823608, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 25823608, "retrieval_score": 10.32076}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 25823608, "retrieval_score": 9.335693}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 3805958, "retrieval_score": 14.126824}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 3805958, "retrieval_score": 14.126824}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 3805958, "retrieval_score": 14.126824}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 3805958, "retrieval_score": 14.126824}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061, "for": 3805958, "retrieval_score": 14.126824}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 6900955, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 6900955, "retrieval_score": 7.377835}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 6900955, "retrieval_score": 7.377835}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 6900955, "retrieval_score": 6.596385}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 6900955, "retrieval_score": 6.596385}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 6900955, "retrieval_score": 20.438177}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 6900955, "retrieval_score": 20.438177}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 6900955, "retrieval_score": 20.438177}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 6900955, "retrieval_score": 14.148284}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 6900955, "retrieval_score": 14.148284}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 18224991, "retrieval_score": 6.6814804}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 18224991, "retrieval_score": 5.8523183}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274, "for": 18224991, "retrieval_score": 5.8523183}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295, "for": 18224991, "retrieval_score": 5.8523183}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 18224991, "retrieval_score": 5.222019}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 15103484, "retrieval_score": 6.6814804}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 15103484, "retrieval_score": 6.001865}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 15103484, "retrieval_score": 6.6814804}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 15103484, "retrieval_score": 6.001865}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 15103484, "retrieval_score": 6.788617}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 15103484, "retrieval_score": 6.6814804}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 15103484, "retrieval_score": 6.001865}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 7633274, "retrieval_score": 6.246592}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 7633274, "retrieval_score": 5.1035686}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 7633274, "retrieval_score": 5.1035686}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 7633274, "retrieval_score": 5.1035686}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 7633274, "retrieval_score": 5.1035686}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14295673, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14295673, "retrieval_score": 16.644709}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 14295673, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 14295673, "retrieval_score": 7.9661465}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 14295673, "retrieval_score": 7.6277695}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418, "for": 28667684, "retrieval_score": 8.322354}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 28667684, "retrieval_score": 6.8433437}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419, "for": 28667684, "retrieval_score": 6.4848065}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 28667684, "retrieval_score": 6.039165}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 28667684, "retrieval_score": 4.946905}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 5927180, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 5927180, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 5927180, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 5927180, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871, "for": 5927180, "retrieval_score": 9.801861}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 209840, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 209840, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 209840, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 209840, "retrieval_score": 16.138548}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8569201, "retrieval_score": 8.683043}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 8569201, "retrieval_score": 8.683043}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008, "for": 8569201, "retrieval_score": 8.683043}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 8569201, "retrieval_score": 8.683043}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 8569201, "retrieval_score": 8.322354}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739, "for": 12362542, "retrieval_score": 10.275188}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 12362542, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 12362542, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 12362542, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 12362542, "retrieval_score": 5.627493}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 11703064, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 11703064, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 11703064, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 11703064, "retrieval_score": 16.507889}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 11703064, "retrieval_score": 16.507889}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 7595148, "retrieval_score": 23.139593}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 7595148, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 7595148, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 7595148, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 7595148, "retrieval_score": 12.864405}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 16537636, "retrieval_score": 21.326288}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 16537636, "retrieval_score": 21.326288}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 16537636, "retrieval_score": 21.326288}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 16537636, "retrieval_score": 21.326288}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080, "for": 16537636, "retrieval_score": 19.142178}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3925465, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3925465, "retrieval_score": 24.628319}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3925465, "retrieval_score": 21.57198}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 3925465, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 3925465, "retrieval_score": 20.899944}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 3278850, "retrieval_score": 11.79538}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 3278850, "retrieval_score": 8.867801}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 3278850, "retrieval_score": 8.867801}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 3278850, "retrieval_score": 8.867801}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066, "for": 3278850, "retrieval_score": 8.867801}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8244915, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 8244915, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 8244915, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 8244915, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 8244915, "retrieval_score": 8.857946}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 7934620, "retrieval_score": 11.941646}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 7934620, "retrieval_score": 11.748602}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 7934620, "retrieval_score": 11.748602}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 7934620, "retrieval_score": 11.748602}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 7934620, "retrieval_score": 11.748602}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403, "for": 42462530, "retrieval_score": 6.926011}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409, "for": 42462530, "retrieval_score": 6.926011}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 42462530, "retrieval_score": 6.926011}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 42462530, "retrieval_score": 6.926011}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 42462530, "retrieval_score": 5.631149}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 15661013, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 15661013, "retrieval_score": 24.967064}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 15661013, "retrieval_score": 13.593859}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266, "for": 15661013, "retrieval_score": 10.592381}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 15661013, "retrieval_score": 7.9661465}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 3886669, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 3886669, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 3886669, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 3886669, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 3886669, "retrieval_score": 5.9267936}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 237079, "retrieval_score": 8.819389}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 237079, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 237079, "retrieval_score": 7.9661465}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 237079, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 237079, "retrieval_score": 6.837495}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 237079, "retrieval_score": 8.819389}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 237079, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 237079, "retrieval_score": 7.9661465}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 237079, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 237079, "retrieval_score": 6.837495}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 237079, "retrieval_score": 8.819389}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 237079, "retrieval_score": 7.1087627}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 237079, "retrieval_score": 7.1087627}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 237079, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 237079, "retrieval_score": 7.1087627}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 237079, "retrieval_score": 9.478593}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 237079, "retrieval_score": 8.819389}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081, "for": 237079, "retrieval_score": 8.432172}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 237079, "retrieval_score": 8.069274}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392, "for": 237079, "retrieval_score": 7.9949646}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 237079, "retrieval_score": 9.478593}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 237079, "retrieval_score": 8.819389}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081, "for": 237079, "retrieval_score": 8.432172}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 237079, "retrieval_score": 8.069274}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 237079, "retrieval_score": 7.9661465}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 237079, "retrieval_score": 8.866667}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5625524, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 5625524, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 5625524, "retrieval_score": 7.289562}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 5625524, "retrieval_score": 6.3823647}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 5625524, "retrieval_score": 6.3823647}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3862010, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3862010, "retrieval_score": 14.214895}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 3862010, "retrieval_score": 13.448047}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 3862010, "retrieval_score": 13.448047}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 3862010, "retrieval_score": 13.448047}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 7568627, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 7568627, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 7568627, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7568627, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 7568627, "retrieval_score": 6.9778156}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9891814, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9891814, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9891814, "retrieval_score": 16.36546}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 9891814, "retrieval_score": 16.36546}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 9891814, "retrieval_score": 14.046785}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 20894525, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 20894525, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 20894525, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 20894525, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 20894525, "retrieval_score": 5.9267936}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 18448469, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 18448469, "retrieval_score": 24.628319}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 18448469, "retrieval_score": 21.57198}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18448469, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18448469, "retrieval_score": 17.51239}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 4059550, "retrieval_score": 11.736746}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 4059550, "retrieval_score": 11.736746}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 4059550, "retrieval_score": 11.736746}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 4059550, "retrieval_score": 11.736746}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869, "for": 4059550, "retrieval_score": 11.736746}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6889785, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6889785, "retrieval_score": 24.628319}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6889785, "retrieval_score": 21.57198}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 6889785, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 6889785, "retrieval_score": 13.2869215}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 17555218, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 17555218, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 17555218, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 17555218, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 17555218, "retrieval_score": 8.857946}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069, "for": 18292500, "retrieval_score": 8.612926}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071, "for": 18292500, "retrieval_score": 8.612926}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822, "for": 18292500, "retrieval_score": 8.612926}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074, "for": 18292500, "retrieval_score": 7.3926377}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 18292500, "retrieval_score": 6.7207417}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 1358977, "retrieval_score": 14.00354}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 1358977, "retrieval_score": 14.00354}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022, "for": 1358977, "retrieval_score": 13.338912}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026, "for": 1358977, "retrieval_score": 13.338912}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030, "for": 1358977, "retrieval_score": 13.338912}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 613183, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 613183, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 613183, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 613183, "retrieval_score": 8.756195}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 613183, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 613183, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 613183, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 613183, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 613183, "retrieval_score": 6.788617}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 613183, "retrieval_score": 6.039165}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 613183, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 613183, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 613183, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 613183, "retrieval_score": 18.57447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 613183, "retrieval_score": 16.36546}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 613183, "retrieval_score": 15.493557}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 613183, "retrieval_score": 13.45779}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 613183, "retrieval_score": 11.551079}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 613183, "retrieval_score": 11.551079}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 613183, "retrieval_score": 11.551079}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 31957364, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 31957364, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 31957364, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 31957364, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 31957364, "retrieval_score": 8.253944}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 14041791, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 14041791, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 14041791, "retrieval_score": 8.18273}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 14041791, "retrieval_score": 8.069274}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 14041791, "retrieval_score": 7.0233927}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 30994370, "retrieval_score": 10.1776905}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 30994370, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 30994370, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 30994370, "retrieval_score": 9.029783}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278, "for": 30994370, "retrieval_score": 8.717711}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 6490560, "retrieval_score": 14.515808}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 6490560, "retrieval_score": 14.515808}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 6490560, "retrieval_score": 14.515808}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 6490560, "retrieval_score": 13.344483}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 6490560, "retrieval_score": 13.344483}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 40173569, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 40173569, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 40173569, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 40173569, "retrieval_score": 8.18273}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 40173569, "retrieval_score": 7.6277695}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 1749466, "retrieval_score": 20.92758}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 1749466, "retrieval_score": 16.766245}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 1749466, "retrieval_score": 16.766245}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 1749466, "retrieval_score": 16.42601}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 1749466, "retrieval_score": 16.42601}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 2668909, "retrieval_score": 8.819389}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342, "for": 2668909, "retrieval_score": 8.361314}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344, "for": 2668909, "retrieval_score": 6.6987123}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880, "for": 2668909, "retrieval_score": 6.68835}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890, "for": 2668909, "retrieval_score": 6.68835}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1012185, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1012185, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1012185, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1012185, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 1012185, "retrieval_score": 14.046785}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 7745260, "retrieval_score": 8.819389}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 7745260, "retrieval_score": 7.2568364}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 7745260, "retrieval_score": 6.2286806}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 7745260, "retrieval_score": 5.4557104}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 7745260, "retrieval_score": 5.4557104}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 37619348, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 37619348, "retrieval_score": 20.826847}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 37619348, "retrieval_score": 21.64973}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 37619348, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 37619348, "retrieval_score": 20.826847}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 35097130, "retrieval_score": 20.06505}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 35097130, "retrieval_score": 20.06505}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126, "for": 35097130, "retrieval_score": 17.222214}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707, "for": 35097130, "retrieval_score": 17.222214}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826, "for": 35097130, "retrieval_score": 15.084963}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 27587127, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 27587127, "retrieval_score": 16.644709}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 27587127, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 27587127, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 27587127, "retrieval_score": 7.871623}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 10271484, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 10271484, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 10271484, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 10271484, "retrieval_score": 16.507889}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 10271484, "retrieval_score": 16.507889}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 14571103, "retrieval_score": 8.8023}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 14571103, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 14571103, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 14571103, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 14571103, "retrieval_score": 8.18273}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491, "for": 14571103, "retrieval_score": 7.2568364}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493, "for": 14571103, "retrieval_score": 7.2568364}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495, "for": 14571103, "retrieval_score": 7.2568364}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502, "for": 14571103, "retrieval_score": 7.2568364}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512, "for": 14571103, "retrieval_score": 7.2568364}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 26033239, "retrieval_score": 8.878197}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 26033239, "retrieval_score": 8.878197}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 26033239, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 26033239, "retrieval_score": 8.756195}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131, "for": 26033239, "retrieval_score": 7.903392}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 8528178, "retrieval_score": 5.4753366}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 8528178, "retrieval_score": 5.4753366}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 8528178, "retrieval_score": 5.4753366}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 8528178, "retrieval_score": 5.4753366}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 8528178, "retrieval_score": 5.4753366}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 4182603, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 4182603, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 4182603, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 4182603, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 4182603, "retrieval_score": 9.390783}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 11985628, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 11985628, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 11985628, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 11985628, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 11985628, "retrieval_score": 8.253944}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 12905999, "retrieval_score": 8.943836}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 12905999, "retrieval_score": 8.943836}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132, "for": 12905999, "retrieval_score": 8.943836}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488, "for": 12905999, "retrieval_score": 8.943836}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599, "for": 12905999, "retrieval_score": 7.8339186}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 14956683, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 14956683, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 14956683, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 14956683, "retrieval_score": 8.896322}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 14956683, "retrieval_score": 8.896322}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 577234, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 577234, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 577234, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 577234, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 577234, "retrieval_score": 8.253944}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 13254241, "retrieval_score": 27.711048}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13254241, "retrieval_score": 27.270687}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 13254241, "retrieval_score": 27.711048}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13254241, "retrieval_score": 27.270687}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 13254241, "retrieval_score": 24.207823}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 15451958, "retrieval_score": 17.638779}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 15451958, "retrieval_score": 12.050466}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 15451958, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 15451958, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 15451958, "retrieval_score": 10.55502}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 34023918, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 34023918, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 34023918, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 34023918, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 34023918, "retrieval_score": 8.253944}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 10484261, "retrieval_score": 22.279274}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 10484261, "retrieval_score": 22.279274}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 10484261, "retrieval_score": 19.514446}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 10484261, "retrieval_score": 17.887672}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 10484261, "retrieval_score": 17.887672}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 9153527, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 9153527, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 9153527, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 9153527, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 9153527, "retrieval_score": 8.866667}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 34338341, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 34338341, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 34338341, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 34338341, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 34338341, "retrieval_score": 7.0233927}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415, "for": 18229082, "retrieval_score": 7.9661465}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425, "for": 18229082, "retrieval_score": 7.9661465}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 18229082, "retrieval_score": 7.2568364}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 18229082, "retrieval_score": 6.3532634}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657, "for": 18229082, "retrieval_score": 6.3532634}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 17498027, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 17498027, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 17498027, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508, "for": 17498027, "retrieval_score": 6.2750225}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511, "for": 17498027, "retrieval_score": 6.2750225}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908, "for": 35178812, "retrieval_score": 14.471542}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896, "for": 35178812, "retrieval_score": 12.675645}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898, "for": 35178812, "retrieval_score": 12.675645}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903, "for": 35178812, "retrieval_score": 12.168015}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436, "for": 35178812, "retrieval_score": 12.168015}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 15455388, "retrieval_score": 24.674274}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 15455388, "retrieval_score": 23.676287}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 15455388, "retrieval_score": 20.550377}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 15455388, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 15455388, "retrieval_score": 16.36546}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 14914615, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 14914615, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 14914615, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 14914615, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 14914615, "retrieval_score": 14.046785}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 21833383, "retrieval_score": 23.676287}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 21833383, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 21833383, "retrieval_score": 18.095016}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 21833383, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 21833383, "retrieval_score": 16.507889}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 19643099, "retrieval_score": 17.715893}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 19643099, "retrieval_score": 17.715893}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 19643099, "retrieval_score": 17.715893}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 19643099, "retrieval_score": 17.715893}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 19643099, "retrieval_score": 17.715893}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1185524, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1185524, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1185524, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 1185524, "retrieval_score": 5.627493}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 1185524, "retrieval_score": 14.359954}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 1185524, "retrieval_score": 11.254986}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 1516795, "retrieval_score": 8.8023}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1516795, "retrieval_score": 8.069274}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088, "for": 1516795, "retrieval_score": 7.9661465}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089, "for": 1516795, "retrieval_score": 7.9661465}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090, "for": 1516795, "retrieval_score": 7.9661465}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 2744795, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 2744795, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737, "for": 2744795, "retrieval_score": 6.4752216}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496, "for": 2744795, "retrieval_score": 5.760368}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497, "for": 2744795, "retrieval_score": 5.760368}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825, "for": 15579649, "retrieval_score": 21.33964}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 15579649, "retrieval_score": 15.667322}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 15579649, "retrieval_score": 15.667322}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 15579649, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 15579649, "retrieval_score": 14.312007}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 41192805, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 41192805, "retrieval_score": 9.8809595}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 41192805, "retrieval_score": 9.314677}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 41192805, "retrieval_score": 7.9161854}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 41192805, "retrieval_score": 7.9161854}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 2556108, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 2556108, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 2556108, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 2556108, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 2556108, "retrieval_score": 6.266589}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 42211584, "retrieval_score": 29.82325}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 42211584, "retrieval_score": 25.597864}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 42211584, "retrieval_score": 25.597864}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 42211584, "retrieval_score": 25.597864}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 42211584, "retrieval_score": 24.54819}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 5301996, "retrieval_score": 15.113791}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 5301996, "retrieval_score": 15.113791}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 5301996, "retrieval_score": 15.113791}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602, "for": 5301996, "retrieval_score": 15.113791}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 5301996, "retrieval_score": 14.126824}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 8993904, "retrieval_score": 6.246592}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993, "for": 8993904, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994, "for": 8993904, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995, "for": 8993904, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996, "for": 8993904, "retrieval_score": 4.1744294}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 40498088, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 40498088, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 40498088, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 40498088, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 40498088, "retrieval_score": 11.254986}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 1920145, "retrieval_score": 26.772549}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1920145, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1920145, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1920145, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1920145, "retrieval_score": 21.070179}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 13837848, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 13837848, "retrieval_score": 6.4862275}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 13837848, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 13837848, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 13837848, "retrieval_score": 6.4322023}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150, "for": 23354124, "retrieval_score": 15.555}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424, "for": 23354124, "retrieval_score": 15.555}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425, "for": 23354124, "retrieval_score": 15.555}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426, "for": 23354124, "retrieval_score": 15.555}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427, "for": 23354124, "retrieval_score": 15.555}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 6416131, "retrieval_score": 6.025233}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640, "for": 6416131, "retrieval_score": 5.8180075}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 6416131, "retrieval_score": 6.025233}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640, "for": 6416131, "retrieval_score": 5.8180075}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 6416131, "retrieval_score": 5.27751}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 6416131, "retrieval_score": 7.002801}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 6416131, "retrieval_score": 6.611951}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 6416131, "retrieval_score": 6.611951}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 6416131, "retrieval_score": 6.611951}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640, "for": 6416131, "retrieval_score": 5.8180075}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 40016359, "retrieval_score": 16.964954}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 40016359, "retrieval_score": 16.964954}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010, "for": 40016359, "retrieval_score": 16.964954}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 40016359, "retrieval_score": 16.964954}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 40016359, "retrieval_score": 12.050466}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 20490274, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 20490274, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 20490274, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 20490274, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 20490274, "retrieval_score": 6.926011}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 18872717, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 18872717, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 18872717, "retrieval_score": 15.780562}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 18872717, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 18872717, "retrieval_score": 15.557482}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 3220755, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 3220755, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 3220755, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 3220755, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 3220755, "retrieval_score": 8.866667}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 18170459, "retrieval_score": 17.028362}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 18170459, "retrieval_score": 17.028362}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 18170459, "retrieval_score": 16.138548}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 18170459, "retrieval_score": 16.138548}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 18170459, "retrieval_score": 16.138548}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 27175400, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 27175400, "retrieval_score": 4.6678467}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 27175400, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 27175400, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 27175400, "retrieval_score": 4.6678467}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 14507794, "retrieval_score": 15.449832}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 14507794, "retrieval_score": 9.314677}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 14507794, "retrieval_score": 7.6829867}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 14507794, "retrieval_score": 7.002801}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216, "for": 14507794, "retrieval_score": 6.834798}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 4690366, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 4690366, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 4690366, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 4690366, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 4690366, "retrieval_score": 7.377835}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 20735384, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 20735384, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 20735384, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 20735384, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 20735384, "retrieval_score": 13.07795}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 39277638, "retrieval_score": 14.10868}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 39277638, "retrieval_score": 14.10868}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 39277638, "retrieval_score": 14.10868}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 39277638, "retrieval_score": 13.237911}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 39277638, "retrieval_score": 13.007814}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 12168648, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 12168648, "retrieval_score": 9.335693}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 12168648, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 12168648, "retrieval_score": 8.756195}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 12168648, "retrieval_score": 8.627357}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5971312, "retrieval_score": 8.819389}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5971312, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5971312, "retrieval_score": 8.069274}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5971312, "retrieval_score": 8.819389}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214, "for": 5971312, "retrieval_score": 7.3108277}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 12717716, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 12717716, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 12717716, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 12717716, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 12717716, "retrieval_score": 7.0233927}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 17193850, "retrieval_score": 4.7778044}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 17193850, "retrieval_score": 4.7778044}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 17193850, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 17193850, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 17193850, "retrieval_score": 4.7778044}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 13395888, "retrieval_score": 13.297001}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 13395888, "retrieval_score": 13.297001}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 13395888, "retrieval_score": 13.297001}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 13395888, "retrieval_score": 13.297001}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 13395888, "retrieval_score": 13.297001}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3608411, "retrieval_score": 8.819389}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759, "for": 3608411, "retrieval_score": 8.612926}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760, "for": 3608411, "retrieval_score": 8.612926}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761, "for": 3608411, "retrieval_score": 8.612926}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780, "for": 3608411, "retrieval_score": 8.612926}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 31771758, "retrieval_score": 10.275188}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 31771758, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 31771758, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 31771758, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 31771758, "retrieval_score": 6.4862275}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 39414085, "retrieval_score": 13.577234}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 39414085, "retrieval_score": 13.577234}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 39414085, "retrieval_score": 13.577234}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 39414085, "retrieval_score": 10.877476}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 39414085, "retrieval_score": 9.677206}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5061582, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 5061582, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 5061582, "retrieval_score": 7.289562}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459, "for": 5061582, "retrieval_score": 7.0233927}
{"snippet": "platform.libc_ver(executable=sys.executable)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7538, "for": 5061582, "retrieval_score": 7.0233927}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 2389846, "retrieval_score": 8.308816}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 2389846, "retrieval_score": 8.308816}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 2389846, "retrieval_score": 8.308816}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885, "for": 2389846, "retrieval_score": 8.308816}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886, "for": 2389846, "retrieval_score": 8.308816}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 7332841, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 7332841, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 7332841, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 7332841, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871, "for": 7332841, "retrieval_score": 9.801861}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 38331568, "retrieval_score": 7.724916}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 38331568, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 38331568, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 38331568, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 38331568, "retrieval_score": 4.1138444}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 41463763, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 41463763, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 41463763, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 41463763, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 41463763, "retrieval_score": 7.871623}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830, "for": 23970693, "retrieval_score": 7.6358557}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 23970693, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 23970693, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 23970693, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 23970693, "retrieval_score": 5.4753366}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 9875964, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 9875964, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 9875964, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 9875964, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 9875964, "retrieval_score": 4.027504}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 25355705, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 25355705, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 25355705, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 25355705, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 25355705, "retrieval_score": 12.450847}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 31522361, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 31522361, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 31522361, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 31522361, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 31522361, "retrieval_score": 5.631149}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 2108126, "retrieval_score": 9.029783}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748, "for": 2108126, "retrieval_score": 6.788617}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255, "for": 2108126, "retrieval_score": 6.788617}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747, "for": 2108126, "retrieval_score": 6.039165}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539, "for": 2108126, "retrieval_score": 5.8788877}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 26894227, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 26894227, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 26894227, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 26894227, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 26894227, "retrieval_score": 21.070179}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 26894227, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 26894227, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 26894227, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 26894227, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 26894227, "retrieval_score": 13.2869215}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1747817, "retrieval_score": 24.911064}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1747817, "retrieval_score": 22.690716}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1747817, "retrieval_score": 19.874828}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1747817, "retrieval_score": 18.732853}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 1747817, "retrieval_score": 17.887672}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1747817, "retrieval_score": 24.911064}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1747817, "retrieval_score": 22.690716}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1747817, "retrieval_score": 19.874828}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1747817, "retrieval_score": 18.732853}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 1747817, "retrieval_score": 17.887672}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 1747817, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 1747817, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 1747817, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 1747817, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 1747817, "retrieval_score": 16.138548}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461, "for": 19100540, "retrieval_score": 18.059566}
{"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462, "for": 19100540, "retrieval_score": 13.577234}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463, "for": 19100540, "retrieval_score": 13.577234}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464, "for": 19100540, "retrieval_score": 10.877476}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 19100540, "retrieval_score": 9.696108}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 7668141, "retrieval_score": 8.8023}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708, "for": 7668141, "retrieval_score": 5.438023}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 7668141, "retrieval_score": 5.3017225}
{"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711, "for": 7668141, "retrieval_score": 4.85887}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712, "for": 7668141, "retrieval_score": 4.85887}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 1456617, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1456617, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1456617, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 1456617, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 1456617, "retrieval_score": 6.066503}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 12829889, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 12829889, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 12829889, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 12829889, "retrieval_score": 18.57447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 12829889, "retrieval_score": 16.36546}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2606976, "retrieval_score": 20.843817}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2606976, "retrieval_score": 20.843817}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2606976, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2606976, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2606976, "retrieval_score": 15.780562}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2606976, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2606976, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2606976, "retrieval_score": 14.214895}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 2606976, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 2606976, "retrieval_score": 8.857946}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 940822, "retrieval_score": 6.246592}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996, "for": 940822, "retrieval_score": 4.1744294}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 940822, "retrieval_score": 14.515808}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 940822, "retrieval_score": 14.515808}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 940822, "retrieval_score": 14.515808}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 940822, "retrieval_score": 13.344483}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 940822, "retrieval_score": 13.344483}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 940822, "retrieval_score": 6.246592}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995, "for": 940822, "retrieval_score": 5.0044913}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 940822, "retrieval_score": 4.838603}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 26897536, "retrieval_score": 7.7504354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 26897536, "retrieval_score": 7.724916}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 26897536, "retrieval_score": 6.788617}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 26897536, "retrieval_score": 6.788617}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 26897536, "retrieval_score": 6.039165}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 6407362, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 6407362, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 6407362, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 6407362, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 6407362, "retrieval_score": 15.743246}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 8924173, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 8924173, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 8924173, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 8924173, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 8924173, "retrieval_score": 6.066503}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 4358701, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 4358701, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 4358701, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 4358701, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 4358701, "retrieval_score": 6.266589}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 17589590, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 17589590, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 17589590, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 17589590, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 17589590, "retrieval_score": 8.253944}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 20048987, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 20048987, "retrieval_score": 6.926011}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 20048987, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 20048987, "retrieval_score": 6.4862275}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 20048987, "retrieval_score": 6.066503}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 11.943216}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 11.943216}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 8.18273}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 1602934, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 1602934, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 1602934, "retrieval_score": 7.3884673}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1602934, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1602934, "retrieval_score": 18.163029}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1602934, "retrieval_score": 15.909023}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1602934, "retrieval_score": 13.45779}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1602934, "retrieval_score": 11.551079}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1602934, "retrieval_score": 11.551079}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 9304908, "retrieval_score": 8.069274}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 9304908, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 9304908, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 9304908, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602, "for": 9304908, "retrieval_score": 7.5568957}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 2497027, "retrieval_score": 13.4414835}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 2497027, "retrieval_score": 13.4414835}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 2497027, "retrieval_score": 13.4414835}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 2497027, "retrieval_score": 13.4414835}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 2497027, "retrieval_score": 13.4414835}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 17484631, "retrieval_score": 11.262298}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 17484631, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 17484631, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 17484631, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 17484631, "retrieval_score": 11.262298}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207, "for": 20375561, "retrieval_score": 14.34251}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773, "for": 20375561, "retrieval_score": 14.312007}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777, "for": 20375561, "retrieval_score": 14.312007}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778, "for": 20375561, "retrieval_score": 14.312007}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779, "for": 20375561, "retrieval_score": 14.312007}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 38708621, "retrieval_score": 9.696108}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 38708621, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 38708621, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 38708621, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 38708621, "retrieval_score": 8.896322}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 10194713, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 10194713, "retrieval_score": 12.950443}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 10194713, "retrieval_score": 11.520736}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 10194713, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 10194713, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10194713, "retrieval_score": 8.756195}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 10194713, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 10194713, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 10194713, "retrieval_score": 16.138548}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4060221, "retrieval_score": 8.819389}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938, "for": 4060221, "retrieval_score": 7.7504354}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4060221, "retrieval_score": 7.2568364}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819, "for": 4060221, "retrieval_score": 7.2052994}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820, "for": 4060221, "retrieval_score": 7.2052994}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 13954840, "retrieval_score": 7.2568364}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 13954840, "retrieval_score": 6.3823647}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 13954840, "retrieval_score": 6.3823647}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 13954840, "retrieval_score": 6.3823647}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 13954840, "retrieval_score": 6.3823647}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 11840111, "retrieval_score": 27.704044}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 11840111, "retrieval_score": 27.704044}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 11840111, "retrieval_score": 32.277096}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 11840111, "retrieval_score": 27.704044}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246, "for": 13999850, "retrieval_score": 11.7758465}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 13999850, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 13999850, "retrieval_score": 8.322354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 13999850, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 13999850, "retrieval_score": 8.18273}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 11277432, "retrieval_score": 6.596385}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 11277432, "retrieval_score": 6.596385}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252, "for": 11277432, "retrieval_score": 6.596385}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467, "for": 11277432, "retrieval_score": 6.596385}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 11277432, "retrieval_score": 6.596385}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 1800187, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 1800187, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 1800187, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 1800187, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 1800187, "retrieval_score": 12.407009}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790, "for": 9554544, "retrieval_score": 7.724916}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 9554544, "retrieval_score": 6.6814804}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 9554544, "retrieval_score": 7.784379}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790, "for": 9554544, "retrieval_score": 7.724916}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 9554544, "retrieval_score": 6.6814804}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 12527959, "retrieval_score": 16.644709}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 12527959, "retrieval_score": 12.969613}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 12527959, "retrieval_score": 7.3675203}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072, "for": 12527959, "retrieval_score": 7.3675203}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372, "for": 12527959, "retrieval_score": 7.3675203}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 8905864, "retrieval_score": 11.520328}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 8905864, "retrieval_score": 11.520328}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 8905864, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 8905864, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 8905864, "retrieval_score": 9.390783}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 8905864, "retrieval_score": 8.322354}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 8905864, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 8905864, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 8905864, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 8905864, "retrieval_score": 8.253944}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28207743, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 28207743, "retrieval_score": 9.314677}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 28207743, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 28207743, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 28207743, "retrieval_score": 7.5568957}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 28207743, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 28207743, "retrieval_score": 9.314677}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 28207743, "retrieval_score": 9.050911}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 28207743, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 28207743, "retrieval_score": 8.756195}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 12201577, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 12201577, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 12201577, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 12201577, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 12201577, "retrieval_score": 4.1138444}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 11584773, "retrieval_score": 9.288356}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11584773, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11584773, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 11584773, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 11584773, "retrieval_score": 8.857946}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 6294179, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 6294179, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 6294179, "retrieval_score": 21.64973}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 6294179, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 6294179, "retrieval_score": 16.36546}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 18050937, "retrieval_score": 7.2534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 18050937, "retrieval_score": 6.3532634}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 18050937, "retrieval_score": 6.3532634}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 18050937, "retrieval_score": 6.3532634}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607, "for": 18050937, "retrieval_score": 6.3532634}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 42178481, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 42178481, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 42178481, "retrieval_score": 13.955631}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 42178481, "retrieval_score": 13.955631}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 42178481, "retrieval_score": 13.955631}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 32464280, "retrieval_score": 10.542535}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 32464280, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 32464280, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 32464280, "retrieval_score": 8.8023}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 32464280, "retrieval_score": 7.724916}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 42060144, "retrieval_score": 9.314677}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 42060144, "retrieval_score": 8.612926}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 42060144, "retrieval_score": 7.9949646}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 42060144, "retrieval_score": 7.3926377}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734, "for": 42060144, "retrieval_score": 7.002801}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 30628176, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 30628176, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 30628176, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 30628176, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 30628176, "retrieval_score": 14.046785}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 1892339, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 1892339, "retrieval_score": 7.3926377}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760, "for": 1892339, "retrieval_score": 6.926011}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737, "for": 1892339, "retrieval_score": 6.4752216}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103, "for": 1892339, "retrieval_score": 6.066503}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 1892339, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 1892339, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737, "for": 1892339, "retrieval_score": 6.4752216}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496, "for": 1892339, "retrieval_score": 5.760368}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497, "for": 1892339, "retrieval_score": 5.760368}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 17731822, "retrieval_score": 18.101822}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 17731822, "retrieval_score": 15.113791}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 17731822, "retrieval_score": 15.113791}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116, "for": 17731822, "retrieval_score": 13.288839}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171, "for": 17731822, "retrieval_score": 13.288839}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 17731822, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 17731822, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 17731822, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17731822, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 17731822, "retrieval_score": 14.046785}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 15286401, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 15286401, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 15286401, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 15286401, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 15286401, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 15286401, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15286401, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 15286401, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 15286401, "retrieval_score": 11.254986}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 15286401, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 15286401, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 15286401, "retrieval_score": 6.066503}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995, "for": 30650254, "retrieval_score": 19.392216}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525, "for": 30650254, "retrieval_score": 19.392216}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063, "for": 30650254, "retrieval_score": 7.0233927}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286, "for": 30650254, "retrieval_score": 7.0233927}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547, "for": 30650254, "retrieval_score": 7.0233927}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 12096252, "retrieval_score": 7.930964}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 12096252, "retrieval_score": 7.930964}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 12096252, "retrieval_score": 7.1424503}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 12096252, "retrieval_score": 6.025233}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 12096252, "retrieval_score": 5.917909}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 521502, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 521502, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 521502, "retrieval_score": 9.029783}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111, "for": 521502, "retrieval_score": 7.825407}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179, "for": 521502, "retrieval_score": 7.784379}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 39538010, "retrieval_score": 10.275188}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 39538010, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 39538010, "retrieval_score": 8.322354}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 39538010, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 39538010, "retrieval_score": 7.289562}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 7503241, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 7503241, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 7503241, "retrieval_score": 8.756195}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 7503241, "retrieval_score": 8.069274}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 7503241, "retrieval_score": 7.3108277}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 31465002, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 31465002, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 31465002, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 31465002, "retrieval_score": 24.54819}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 31465002, "retrieval_score": 21.070179}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 983354, "retrieval_score": 8.407638}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 983354, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 983354, "retrieval_score": 8.322354}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 983354, "retrieval_score": 7.019806}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264, "for": 983354, "retrieval_score": 7.019806}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 21947035, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 21947035, "retrieval_score": 7.7504354}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 21947035, "retrieval_score": 6.6814804}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 21947035, "retrieval_score": 6.039165}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946, "for": 21947035, "retrieval_score": 6.039165}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 15666169, "retrieval_score": 14.126824}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 15666169, "retrieval_score": 14.126824}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 15666169, "retrieval_score": 14.126824}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 15666169, "retrieval_score": 14.126824}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061, "for": 15666169, "retrieval_score": 14.126824}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 3895874, "retrieval_score": 10.620587}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 3895874, "retrieval_score": 10.620587}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 3895874, "retrieval_score": 10.620587}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 3895874, "retrieval_score": 10.620587}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 3895874, "retrieval_score": 10.620587}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 8724352, "retrieval_score": 10.275188}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 8724352, "retrieval_score": 7.002801}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 8724352, "retrieval_score": 6.611951}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 8724352, "retrieval_score": 6.611951}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 8724352, "retrieval_score": 6.611951}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 13079852, "retrieval_score": 10.275188}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 13079852, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 13079852, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13079852, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 13079852, "retrieval_score": 4.027504}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014, "for": 2428092, "retrieval_score": 10.439171}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985, "for": 2428092, "retrieval_score": 9.618721}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229, "for": 2428092, "retrieval_score": 9.029783}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235, "for": 2428092, "retrieval_score": 9.029783}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016, "for": 2428092, "retrieval_score": 8.779831}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 4020539, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 4020539, "retrieval_score": 6.4862275}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 4020539, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 4020539, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 4020539, "retrieval_score": 5.933986}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 16874598, "retrieval_score": 9.910789}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 16874598, "retrieval_score": 9.578427}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657, "for": 16874598, "retrieval_score": 9.578427}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 16874598, "retrieval_score": 8.819389}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877, "for": 16874598, "retrieval_score": 7.72252}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 7657457, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 7657457, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 7657457, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 7657457, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 7657457, "retrieval_score": 16.138548}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 11399384, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 11399384, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11399384, "retrieval_score": 23.676287}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 11399384, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 11399384, "retrieval_score": 16.36546}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 11399384, "retrieval_score": 33.882637}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 11399384, "retrieval_score": 29.677853}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11399384, "retrieval_score": 29.496222}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11399384, "retrieval_score": 25.835783}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11399384, "retrieval_score": 23.676287}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 11399384, "retrieval_score": 33.882637}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 11399384, "retrieval_score": 29.677853}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11399384, "retrieval_score": 29.496222}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11399384, "retrieval_score": 25.835783}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11399384, "retrieval_score": 23.676287}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 6612769, "retrieval_score": 15.493557}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 6612769, "retrieval_score": 10.275188}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 6612769, "retrieval_score": 10.275188}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 6612769, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 6612769, "retrieval_score": 8.756195}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865, "for": 1094717, "retrieval_score": 10.275188}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1094717, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1094717, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1094717, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 1094717, "retrieval_score": 6.4862275}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1094717, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1094717, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1094717, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 1094717, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 1094717, "retrieval_score": 5.681296}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 10565598, "retrieval_score": 8.8023}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 10565598, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 10565598, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 10565598, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 10565598, "retrieval_score": 8.253944}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 10565598, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 10565598, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 10565598, "retrieval_score": 18.242264}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 10565598, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 10565598, "retrieval_score": 13.223902}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841, "for": 15548506, "retrieval_score": 20.550377}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 15548506, "retrieval_score": 7.555182}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22, "for": 15548506, "retrieval_score": 7.063412}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087, "for": 15548506, "retrieval_score": 7.063412}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018, "for": 15548506, "retrieval_score": 7.063412}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 6532881, "retrieval_score": 19.392216}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 6532881, "retrieval_score": 19.392216}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6532881, "retrieval_score": 10.413424}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6532881, "retrieval_score": 10.413424}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6532881, "retrieval_score": 9.121132}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7356042, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 7356042, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 7356042, "retrieval_score": 4.428973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 7356042, "retrieval_score": 4.428973}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 7356042, "retrieval_score": 4.428973}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4843158, "retrieval_score": 27.714455}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4843158, "retrieval_score": 24.275131}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4843158, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4843158, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4843158, "retrieval_score": 16.882479}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 11041411, "retrieval_score": 12.022469}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309, "for": 11041411, "retrieval_score": 9.367949}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 11041411, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 11041411, "retrieval_score": 8.322354}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 11041411, "retrieval_score": 7.1087627}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 9755538, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 9755538, "retrieval_score": 9.314677}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 9755538, "retrieval_score": 8.819389}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9755538, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9755538, "retrieval_score": 8.756195}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 15012228, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 15012228, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15012228, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 15012228, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 15012228, "retrieval_score": 5.627493}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13252333, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 13252333, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13252333, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13252333, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13252333, "retrieval_score": 12.450847}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13252333, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 13252333, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13252333, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13252333, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13252333, "retrieval_score": 12.450847}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 13656519, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 13656519, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 13656519, "retrieval_score": 7.063412}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 13656519, "retrieval_score": 7.063412}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 13656519, "retrieval_score": 7.063412}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 20986631, "retrieval_score": 5.531468}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052, "for": 20986631, "retrieval_score": 5.531468}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054, "for": 20986631, "retrieval_score": 5.531468}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056, "for": 20986631, "retrieval_score": 5.531468}
{"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070, "for": 20986631, "retrieval_score": 5.531468}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428, "for": 20986631, "retrieval_score": 6.039165}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431, "for": 20986631, "retrieval_score": 5.438738}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432, "for": 20986631, "retrieval_score": 4.946905}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 20986631, "retrieval_score": 4.6105547}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434, "for": 20986631, "retrieval_score": 4.53665}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 11619169, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 11619169, "retrieval_score": 24.967064}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 11619169, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 11619169, "retrieval_score": 7.9661465}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 11619169, "retrieval_score": 6.837495}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 740287, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 740287, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 740287, "retrieval_score": 18.242264}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 740287, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 740287, "retrieval_score": 13.223902}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 902761, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 902761, "retrieval_score": 9.314677}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434, "for": 902761, "retrieval_score": 8.322354}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714, "for": 902761, "retrieval_score": 8.322354}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 902761, "retrieval_score": 7.002801}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 19794051, "retrieval_score": 13.252438}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 16138015, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 16138015, "retrieval_score": 8.514181}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748, "for": 16138015, "retrieval_score": 7.4325814}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751, "for": 16138015, "retrieval_score": 7.35635}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752, "for": 16138015, "retrieval_score": 7.35635}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9210525, "retrieval_score": 9.050911}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 9210525, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 9210525, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 9210525, "retrieval_score": 8.18273}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9210525, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 9210525, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 9210525, "retrieval_score": 5.681296}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9210525, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 9210525, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 9210525, "retrieval_score": 5.681296}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142, "for": 9210525, "retrieval_score": 10.275188}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 9210525, "retrieval_score": 9.314677}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 9210525, "retrieval_score": 7.9949646}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 9210525, "retrieval_score": 7.002801}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9210525, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 9210525, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 9210525, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 9210525, "retrieval_score": 5.681296}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4524723, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 4524723, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 4524723, "retrieval_score": 7.289562}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 21899953, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 21899953, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 21899953, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 21899953, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 21899953, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 3704731, "retrieval_score": 7.6277695}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 3704731, "retrieval_score": 6.937325}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 3704731, "retrieval_score": 6.6814804}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 3704731, "retrieval_score": 6.54706}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 3704731, "retrieval_score": 6.54706}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 21317384, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 21317384, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 21317384, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 21317384, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 21317384, "retrieval_score": 6.926011}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629, "for": 4365964, "retrieval_score": 9.555585}
{"snippet": "difflib.unified_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2648, "for": 4365964, "retrieval_score": 9.555585}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2635, "for": 4365964, "retrieval_score": 8.500664}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636, "for": 4365964, "retrieval_score": 8.500664}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2637, "for": 4365964, "retrieval_score": 8.500664}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814, "for": 21804935, "retrieval_score": 9.696108}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152, "for": 21804935, "retrieval_score": 7.289562}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814, "for": 21804935, "retrieval_score": 9.696108}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152, "for": 21804935, "retrieval_score": 7.289562}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663, "for": 21804935, "retrieval_score": 6.3532634}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 16658068, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 16658068, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 16658068, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 16658068, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 16658068, "retrieval_score": 9.390783}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 977491, "retrieval_score": 17.638779}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604, "for": 977491, "retrieval_score": 2.2836504}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714, "for": 977491, "retrieval_score": 2.0028987}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052, "for": 977491, "retrieval_score": 2.0028987}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533, "for": 977491, "retrieval_score": 2.0028987}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 4627981, "retrieval_score": 22.314278}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4627981, "retrieval_score": 18.054085}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 4627981, "retrieval_score": 17.18121}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 4627981, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 4627981, "retrieval_score": 16.138548}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 34468983, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 34468983, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 34468983, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 34468983, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 34468983, "retrieval_score": 14.046785}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 14673394, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 14673394, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 14673394, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 14673394, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 14673394, "retrieval_score": 15.743246}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 16159228, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 16159228, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 16159228, "retrieval_score": 5.8480387}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 16159228, "retrieval_score": 5.8480387}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653, "for": 16159228, "retrieval_score": 5.8480387}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 118516, "retrieval_score": 8.819389}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 118516, "retrieval_score": 7.2568364}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 118516, "retrieval_score": 6.3532634}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657, "for": 118516, "retrieval_score": 6.3532634}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 118516, "retrieval_score": 6.2286806}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 17141558, "retrieval_score": 10.721632}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 17141558, "retrieval_score": 10.721632}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 17141558, "retrieval_score": 9.559011}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 17141558, "retrieval_score": 9.314677}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 17141558, "retrieval_score": 8.427715}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 17141558, "retrieval_score": 9.314677}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 17141558, "retrieval_score": 10.721632}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 17141558, "retrieval_score": 10.721632}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678, "for": 17141558, "retrieval_score": 9.637909}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 17141558, "retrieval_score": 9.559011}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789, "for": 17141558, "retrieval_score": 8.354331}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 17141558, "retrieval_score": 8.253944}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 7284952, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 7284952, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 7284952, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 7284952, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 7284952, "retrieval_score": 6.926011}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2514961, "retrieval_score": 28.861542}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2514961, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2514961, "retrieval_score": 24.628319}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 2514961, "retrieval_score": 18.872396}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 2514961, "retrieval_score": 15.557482}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 16050952, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 16050952, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 16050952, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 16050952, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 16050952, "retrieval_score": 19.296608}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579, "for": 11205386, "retrieval_score": 7.019806}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664, "for": 11205386, "retrieval_score": 6.025233}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985, "for": 11205386, "retrieval_score": 5.27751}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993, "for": 11205386, "retrieval_score": 4.694882}
{"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010, "for": 11205386, "retrieval_score": 4.694882}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 300445, "retrieval_score": 8.322354}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986, "for": 300445, "retrieval_score": 7.131615}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 300445, "retrieval_score": 6.4848065}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994, "for": 300445, "retrieval_score": 6.246592}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988, "for": 300445, "retrieval_score": 5.5569787}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 300445, "retrieval_score": 10.275188}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 300445, "retrieval_score": 8.322354}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986, "for": 300445, "retrieval_score": 7.131615}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 300445, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 300445, "retrieval_score": 6.4862275}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1400608, "retrieval_score": 8.819389}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 1400608, "retrieval_score": 8.819389}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18624039, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 18624039, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 18624039, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 18624039, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 18624039, "retrieval_score": 13.852022}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 36623789, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 36623789, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 36623789, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 36623789, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 36623789, "retrieval_score": 9.390783}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 4029436, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 4029436, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 4029436, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 4029436, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 4029436, "retrieval_score": 17.098473}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 32950347, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 32950347, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 32950347, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 32950347, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 32950347, "retrieval_score": 11.254986}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784, "for": 4116061, "retrieval_score": 9.751577}
{"snippet": "importlib.__import__(name, globals=None, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `fromlist`.", "question_id": 4789, "for": 4116061, "retrieval_score": 8.782055}
{"snippet": "importlib.__import__(name, globals=None, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `locals`.", "question_id": 4788, "for": 4116061, "retrieval_score": 7.9878807}
{"snippet": "importlib.__import__(name, globals=None, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "question_id": 4790, "for": 4116061, "retrieval_score": 7.9878807}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 4116061, "retrieval_score": 7.7986274}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 4481724, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 4481724, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 4481724, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 4481724, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 4481724, "retrieval_score": 8.253944}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 258746, "retrieval_score": 5.4974566}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 258746, "retrieval_score": 5.4974566}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 258746, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 258746, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 258746, "retrieval_score": 5.4974566}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 9001509, "retrieval_score": 9.029783}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9001509, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9001509, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9001509, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 9001509, "retrieval_score": 8.18273}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9001509, "retrieval_score": 15.493557}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 9001509, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 9001509, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 9001509, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 9001509, "retrieval_score": 14.2175255}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774, "for": 33127636, "retrieval_score": 19.873295}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770, "for": 33127636, "retrieval_score": 17.468384}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429, "for": 33127636, "retrieval_score": 15.300581}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 33127636, "retrieval_score": 14.854396}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431, "for": 33127636, "retrieval_score": 12.258144}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 6323296, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 6323296, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 6323296, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 6323296, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 6323296, "retrieval_score": 6.266589}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16568056, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16568056, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 16568056, "retrieval_score": 18.242264}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 16568056, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 16568056, "retrieval_score": 17.098473}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1246444, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 1246444, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 1246444, "retrieval_score": 14.214895}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 1246444, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 1246444, "retrieval_score": 8.857946}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9754729, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9754729, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 9754729, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 9754729, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 9754729, "retrieval_score": 7.3108277}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 3559559, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 3559559, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 3559559, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 3559559, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 3559559, "retrieval_score": 11.254986}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 3559559, "retrieval_score": 7.6277695}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 3559559, "retrieval_score": 6.54706}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 3559559, "retrieval_score": 6.54706}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 3559559, "retrieval_score": 5.734579}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 3559559, "retrieval_score": 5.734579}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 41821112, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 41821112, "retrieval_score": 17.51239}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 41821112, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 41821112, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 41821112, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 41821112, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 41821112, "retrieval_score": 14.046785}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 41821112, "retrieval_score": 17.098473}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 12426043, "retrieval_score": 8.819389}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 12426043, "retrieval_score": 7.2568364}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 12426043, "retrieval_score": 6.3823647}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 12426043, "retrieval_score": 6.3823647}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 12426043, "retrieval_score": 6.3823647}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9304408, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9304408, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 9304408, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 9304408, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 9304408, "retrieval_score": 14.621655}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4587915, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4587915, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4587915, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4587915, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4587915, "retrieval_score": 13.2869215}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8409095, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8409095, "retrieval_score": 8.756195}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 8409095, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 8409095, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 8409095, "retrieval_score": 7.3926377}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 8409095, "retrieval_score": 9.696108}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 8409095, "retrieval_score": 9.029783}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 8409095, "retrieval_score": 9.029783}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 8409095, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8409095, "retrieval_score": 8.756195}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 6696027, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 6696027, "retrieval_score": 14.046785}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 6696027, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 6696027, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 6696027, "retrieval_score": 14.046785}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 11344827, "retrieval_score": 9.696108}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 11344827, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 11344827, "retrieval_score": 8.756195}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 11344827, "retrieval_score": 8.322354}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 11344827, "retrieval_score": 7.3108277}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708, "for": 4716533, "retrieval_score": 8.819389}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 4716533, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 4716533, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 4716533, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 4716533, "retrieval_score": 7.1087627}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 17846545, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 17846545, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 17846545, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 17846545, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 17846545, "retrieval_score": 16.138548}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 6310475, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 6310475, "retrieval_score": 24.967064}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 6310475, "retrieval_score": 8.819389}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 6310475, "retrieval_score": 8.819389}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205, "for": 6310475, "retrieval_score": 7.9949646}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1386811, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1386811, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1386811, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1386811, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 1386811, "retrieval_score": 21.070179}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8305518, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8305518, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8305518, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8305518, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8305518, "retrieval_score": 16.138548}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 21361604, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 21361604, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 21361604, "retrieval_score": 12.340725}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 21361604, "retrieval_score": 10.754423}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 21361604, "retrieval_score": 9.050911}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 17149561, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 17149561, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17149561, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 17149561, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 17149561, "retrieval_score": 16.36546}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 2186656, "retrieval_score": 19.710546}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 2186656, "retrieval_score": 19.710546}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 2186656, "retrieval_score": 19.710546}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 2186656, "retrieval_score": 19.710546}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 2186656, "retrieval_score": 19.710546}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2186656, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2186656, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2186656, "retrieval_score": 15.780562}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 2186656, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 2186656, "retrieval_score": 15.557482}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 4576115, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 4576115, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 4576115, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 4576115, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 4576115, "retrieval_score": 21.070179}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 3899782, "retrieval_score": 17.301952}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 3899782, "retrieval_score": 17.301952}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 3899782, "retrieval_score": 17.301952}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 3899782, "retrieval_score": 17.301952}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870, "for": 3899782, "retrieval_score": 17.301952}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 3431825, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3431825, "retrieval_score": 8.069274}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089, "for": 3431825, "retrieval_score": 7.724916}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 3431825, "retrieval_score": 7.2568364}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3431825, "retrieval_score": 6.926011}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 42765620, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 42765620, "retrieval_score": 9.029783}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 42765620, "retrieval_score": 8.9242325}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 42765620, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 42765620, "retrieval_score": 8.857946}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8344905, "retrieval_score": 22.846552}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 8344905, "retrieval_score": 20.223806}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 8344905, "retrieval_score": 20.011328}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 8344905, "retrieval_score": 18.016369}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 8344905, "retrieval_score": 13.2869215}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 21822054, "retrieval_score": 10.275188}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 21822054, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 21822054, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 21822054, "retrieval_score": 7.289562}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 21822054, "retrieval_score": 6.4322023}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 21822054, "retrieval_score": 10.275188}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 21822054, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 21822054, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 21822054, "retrieval_score": 7.289562}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 21822054, "retrieval_score": 6.4322023}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026, "for": 13303100, "retrieval_score": 8.322354}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025, "for": 13303100, "retrieval_score": 7.289562}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 13303100, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 13303100, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 13303100, "retrieval_score": 6.7207417}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 5333244, "retrieval_score": 7.2568364}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 5333244, "retrieval_score": 6.2286806}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 5333244, "retrieval_score": 5.4557104}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 5333244, "retrieval_score": 5.4557104}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 5333244, "retrieval_score": 5.4557104}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 3151146, "retrieval_score": 7.1087627}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 3151146, "retrieval_score": 7.1087627}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 3151146, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 3151146, "retrieval_score": 7.1087627}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 3151146, "retrieval_score": 6.1015863}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 9466017, "retrieval_score": 8.308816}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 9466017, "retrieval_score": 7.2534}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 9466017, "retrieval_score": 7.131615}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480, "for": 9466017, "retrieval_score": 7.131615}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491, "for": 9466017, "retrieval_score": 7.131615}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 8270092, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 8270092, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 8270092, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 8270092, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 8270092, "retrieval_score": 5.631149}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816, "for": 8270092, "retrieval_score": 12.9159355}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111, "for": 8270092, "retrieval_score": 12.9159355}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258, "for": 8270092, "retrieval_score": 12.9159355}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271, "for": 8270092, "retrieval_score": 12.9159355}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312, "for": 8270092, "retrieval_score": 12.9159355}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 8270092, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 8270092, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 8270092, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 8270092, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 8270092, "retrieval_score": 6.266589}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 32511444, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 32511444, "retrieval_score": 9.314677}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824, "for": 32511444, "retrieval_score": 8.819389}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 32511444, "retrieval_score": 8.322354}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 32511444, "retrieval_score": 7.002801}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 40319433, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 40319433, "retrieval_score": 8.322354}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 40319433, "retrieval_score": 8.290173}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 40319433, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 40319433, "retrieval_score": 8.253944}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6133434, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6133434, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6133434, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 6133434, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 6133434, "retrieval_score": 13.2869215}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 5844672, "retrieval_score": 20.370468}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5844672, "retrieval_score": 13.45779}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 5844672, "retrieval_score": 11.551079}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 5844672, "retrieval_score": 11.551079}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 5844672, "retrieval_score": 10.117606}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 5844672, "retrieval_score": 32.73092}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 5844672, "retrieval_score": 32.73092}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 5844672, "retrieval_score": 32.73092}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 5844672, "retrieval_score": 28.09357}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 5844672, "retrieval_score": 28.09357}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 5844672, "retrieval_score": 13.3470745}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 5844672, "retrieval_score": 5.275061}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375, "for": 5844672, "retrieval_score": 5.275061}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329, "for": 5844672, "retrieval_score": 5.275061}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611, "for": 5844672, "retrieval_score": 5.275061}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 41648246, "retrieval_score": 16.560074}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 41648246, "retrieval_score": 16.560074}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 41648246, "retrieval_score": 16.560074}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 41648246, "retrieval_score": 16.560074}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 41648246, "retrieval_score": 16.560074}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 38231591, "retrieval_score": 9.555609}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 38231591, "retrieval_score": 9.555609}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 38231591, "retrieval_score": 9.555609}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 38231591, "retrieval_score": 9.555609}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 38231591, "retrieval_score": 9.555609}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 2990121, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 2990121, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2990121, "retrieval_score": 8.18273}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 2990121, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 2990121, "retrieval_score": 7.3884673}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 42353686, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 42353686, "retrieval_score": 14.214895}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579, "for": 42353686, "retrieval_score": 14.039612}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 42353686, "retrieval_score": 12.450847}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664, "for": 42353686, "retrieval_score": 12.050466}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 12309976, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 12309976, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 12309976, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 12309976, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 12309976, "retrieval_score": 7.3108277}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4695143, "retrieval_score": 22.509972}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4695143, "retrieval_score": 22.509972}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4695143, "retrieval_score": 22.509972}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4695143, "retrieval_score": 22.509972}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 4695143, "retrieval_score": 22.509972}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005, "for": 17331290, "retrieval_score": 19.57333}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 17331290, "retrieval_score": 19.57333}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004, "for": 17331290, "retrieval_score": 17.14431}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077, "for": 17331290, "retrieval_score": 17.14431}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007, "for": 17331290, "retrieval_score": 15.251605}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 2911754, "retrieval_score": 7.2568364}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 2911754, "retrieval_score": 6.3532634}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657, "for": 2911754, "retrieval_score": 6.3532634}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 2911754, "retrieval_score": 6.2286806}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 2911754, "retrieval_score": 5.4557104}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 30945784, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 30945784, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 30945784, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 30945784, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 30945784, "retrieval_score": 14.046785}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 2953746, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2953746, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2953746, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2953746, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 2953746, "retrieval_score": 6.4862275}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 28773683, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 28773683, "retrieval_score": 16.138548}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207, "for": 28773683, "retrieval_score": 14.34251}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 28773683, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 28773683, "retrieval_score": 13.852022}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 28773683, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 28773683, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28773683, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 28773683, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 28773683, "retrieval_score": 4.027504}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 2806611, "retrieval_score": 9.314677}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 2806611, "retrieval_score": 8.8023}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 2806611, "retrieval_score": 7.002801}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 2806611, "retrieval_score": 6.6175947}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 2806611, "retrieval_score": 6.596385}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 40273313, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 40273313, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 40273313, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 40273313, "retrieval_score": 7.098534}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 40273313, "retrieval_score": 7.002801}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 3940128, "retrieval_score": 8.83799}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 3940128, "retrieval_score": 8.83799}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 3940128, "retrieval_score": 8.83799}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 3940128, "retrieval_score": 7.080604}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 3940128, "retrieval_score": 7.080604}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 3940128, "retrieval_score": 10.275188}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 3940128, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 3940128, "retrieval_score": 9.314677}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 3940128, "retrieval_score": 7.002801}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 3940128, "retrieval_score": 7.3926377}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3940128, "retrieval_score": 6.4752216}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323, "for": 3940128, "retrieval_score": 6.4752216}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 3940128, "retrieval_score": 5.760368}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 3940128, "retrieval_score": 5.3102937}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 3940128, "retrieval_score": 10.275188}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 3940128, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 3940128, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3940128, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3940128, "retrieval_score": 8.756195}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 31302904, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 31302904, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 31302904, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 31302904, "retrieval_score": 6.611951}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 31302904, "retrieval_score": 6.611951}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 10562778, "retrieval_score": 11.262298}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 10562778, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 10562778, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 10562778, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 10562778, "retrieval_score": 11.262298}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 5022066, "retrieval_score": 19.392216}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 5022066, "retrieval_score": 19.392216}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 5022066, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 5022066, "retrieval_score": 8.756195}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 5022066, "retrieval_score": 8.069274}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3227624, "retrieval_score": 8.819389}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 3227624, "retrieval_score": 4.538543}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 3227624, "retrieval_score": 4.538543}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 3227624, "retrieval_score": 4.538543}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 3227624, "retrieval_score": 4.538543}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 14734750, "retrieval_score": 7.3675203}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072, "for": 14734750, "retrieval_score": 7.3675203}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372, "for": 14734750, "retrieval_score": 7.3675203}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 14734750, "retrieval_score": 7.3675203}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 14734750, "retrieval_score": 7.1087627}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18432823, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 18432823, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 18432823, "retrieval_score": 4.428973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 18432823, "retrieval_score": 4.428973}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 18432823, "retrieval_score": 4.428973}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 3090175, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 3090175, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 3090175, "retrieval_score": 8.779708}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3090175, "retrieval_score": 8.069274}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 3090175, "retrieval_score": 7.7504354}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 1391026, "retrieval_score": 9.908409}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 1391026, "retrieval_score": 9.029783}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 1391026, "retrieval_score": 9.029783}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183, "for": 1391026, "retrieval_score": 8.67879}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 1391026, "retrieval_score": 7.7504354}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 21188504, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 21188504, "retrieval_score": 20.899944}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 21188504, "retrieval_score": 20.899944}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 21188504, "retrieval_score": 20.899944}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 21188504, "retrieval_score": 20.899944}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 40079728, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 40079728, "retrieval_score": 7.9949646}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 40079728, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 40079728, "retrieval_score": 7.289562}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 40079728, "retrieval_score": 6.926011}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833, "for": 510348, "retrieval_score": 7.002801}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833, "for": 510348, "retrieval_score": 7.002801}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 510348, "retrieval_score": 8.9242325}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836, "for": 510348, "retrieval_score": 8.101135}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 510348, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 510348, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 510348, "retrieval_score": 7.011446}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833, "for": 510348, "retrieval_score": 7.002801}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 510348, "retrieval_score": 6.837495}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 510348, "retrieval_score": 8.9242325}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836, "for": 510348, "retrieval_score": 8.101135}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 510348, "retrieval_score": 7.9661465}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 510348, "retrieval_score": 7.8520374}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 16084642, "retrieval_score": 28.861542}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16084642, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16084642, "retrieval_score": 24.628319}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 16084642, "retrieval_score": 18.872396}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 16084642, "retrieval_score": 13.2869215}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 20970279, "retrieval_score": 19.076107}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 20970279, "retrieval_score": 19.076107}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 20970279, "retrieval_score": 19.076107}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 20970279, "retrieval_score": 19.076107}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870, "for": 20970279, "retrieval_score": 19.076107}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 8209568, "retrieval_score": 4.7795057}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164, "for": 8209568, "retrieval_score": 3.969753}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165, "for": 8209568, "retrieval_score": 3.969753}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079, "for": 8209568, "retrieval_score": 3.6685522}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392, "for": 8209568, "retrieval_score": 3.425176}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 42394627, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 42394627, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 42394627, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 42394627, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 42394627, "retrieval_score": 13.2869215}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6018916, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6018916, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6018916, "retrieval_score": 18.242264}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 6018916, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 6018916, "retrieval_score": 14.126824}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 39607540, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 39607540, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 39607540, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 39607540, "retrieval_score": 8.069274}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150, "for": 39607540, "retrieval_score": 7.7775}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 13114512, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 13114512, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 13114512, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 13114512, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 13114512, "retrieval_score": 7.871623}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 3392354, "retrieval_score": 7.930964}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 3392354, "retrieval_score": 7.930964}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 3392354, "retrieval_score": 7.1424503}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 3392354, "retrieval_score": 7.002801}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 3392354, "retrieval_score": 6.025233}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 7154739, "retrieval_score": 10.204068}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 7154739, "retrieval_score": 10.204068}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 7154739, "retrieval_score": 10.204068}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 7154739, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 7154739, "retrieval_score": 9.335693}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 26720916, "retrieval_score": 7.3108277}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 26720916, "retrieval_score": 7.3108277}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 26720916, "retrieval_score": 7.3108277}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 26720916, "retrieval_score": 7.3108277}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007, "for": 26720916, "retrieval_score": 7.3108277}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 8153631, "retrieval_score": 10.947191}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 8153631, "retrieval_score": 10.947191}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 8153631, "retrieval_score": 10.947191}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 8153631, "retrieval_score": 10.584028}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 8153631, "retrieval_score": 10.584028}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 33769531, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 33769531, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 33769531, "retrieval_score": 8.18273}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 33769531, "retrieval_score": 7.0233927}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 33769531, "retrieval_score": 7.0233927}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8243188, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8243188, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8243188, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8243188, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 8243188, "retrieval_score": 7.3108277}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 3296499, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 3296499, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 3296499, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 3296499, "retrieval_score": 16.138548}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 3296499, "retrieval_score": 13.852022}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 4008546, "retrieval_score": 19.05954}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4008546, "retrieval_score": 13.46184}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 4008546, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 4008546, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 4008546, "retrieval_score": 12.864405}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040, "for": 4843173, "retrieval_score": 8.819389}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040, "for": 4843173, "retrieval_score": 8.819389}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 4843173, "retrieval_score": 7.098534}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3494906, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3494906, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3494906, "retrieval_score": 23.676287}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461, "for": 3494906, "retrieval_score": 19.392216}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3494906, "retrieval_score": 16.36546}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3494906, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3494906, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3494906, "retrieval_score": 23.676287}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 3494906, "retrieval_score": 22.314278}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3494906, "retrieval_score": 16.36546}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 13636592, "retrieval_score": 10.721632}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 13636592, "retrieval_score": 10.721632}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 13636592, "retrieval_score": 9.559011}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 13636592, "retrieval_score": 9.314677}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211, "for": 13636592, "retrieval_score": 8.819389}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 13636592, "retrieval_score": 10.721632}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 13636592, "retrieval_score": 10.721632}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 13636592, "retrieval_score": 9.559011}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211, "for": 13636592, "retrieval_score": 8.819389}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789, "for": 13636592, "retrieval_score": 8.354331}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 1015142, "retrieval_score": 9.314677}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1015142, "retrieval_score": 8.069274}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 1015142, "retrieval_score": 7.9949646}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 1015142, "retrieval_score": 7.002801}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1015142, "retrieval_score": 6.926011}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 35883459, "retrieval_score": 24.130781}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 35883459, "retrieval_score": 21.466782}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 35883459, "retrieval_score": 21.008404}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 35883459, "retrieval_score": 16.830997}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423, "for": 35883459, "retrieval_score": 16.830997}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 35883459, "retrieval_score": 24.130781}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 35883459, "retrieval_score": 21.466782}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 35883459, "retrieval_score": 21.008404}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 35883459, "retrieval_score": 16.830997}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423, "for": 35883459, "retrieval_score": 16.830997}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8249836, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8249836, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8249836, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 8249836, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 8249836, "retrieval_score": 7.3108277}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 32751229, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 32751229, "retrieval_score": 8.322354}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 32751229, "retrieval_score": 6.626219}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 32751229, "retrieval_score": 6.626219}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 32751229, "retrieval_score": 6.626219}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 9962293, "retrieval_score": 13.635344}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 9962293, "retrieval_score": 12.065391}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9962293, "retrieval_score": 11.943216}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 9962293, "retrieval_score": 10.733391}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 9962293, "retrieval_score": 10.413424}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11620914, "retrieval_score": 17.278708}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11620914, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11620914, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 11620914, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 11620914, "retrieval_score": 13.2869215}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 26724275, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 26724275, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 26724275, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 26724275, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 26724275, "retrieval_score": 8.866667}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 12723751, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 12723751, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 12723751, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 12723751, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 12723751, "retrieval_score": 14.126824}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 7323859, "retrieval_score": 8.216764}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 7323859, "retrieval_score": 6.8604403}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 7323859, "retrieval_score": 6.8604403}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 7323859, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 7323859, "retrieval_score": 6.4322023}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 10618586, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10618586, "retrieval_score": 7.7504354}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 10618586, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 10618586, "retrieval_score": 6.4862275}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 10618586, "retrieval_score": 6.039165}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8586738, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8586738, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8586738, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8586738, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8586738, "retrieval_score": 16.138548}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 19973489, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 19973489, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 19973489, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 19973489, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 19973489, "retrieval_score": 5.681296}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 19555472, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 19555472, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 19555472, "retrieval_score": 12.340725}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 19555472, "retrieval_score": 9.050911}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 19555472, "retrieval_score": 8.857946}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 19555472, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 19555472, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 19555472, "retrieval_score": 21.64973}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 19555472, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 19555472, "retrieval_score": 16.414843}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 21691126, "retrieval_score": 8.407638}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 21691126, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 21691126, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 21691126, "retrieval_score": 7.3108277}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 21691126, "retrieval_score": 7.019806}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 25991612, "retrieval_score": 6.6814804}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 25991612, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 25991612, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 25991612, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 25991612, "retrieval_score": 6.266589}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 21684346, "retrieval_score": 11.79538}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 21684346, "retrieval_score": 8.867801}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 21684346, "retrieval_score": 8.867801}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 21684346, "retrieval_score": 8.867801}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066, "for": 21684346, "retrieval_score": 8.867801}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362, "for": 3160752, "retrieval_score": 16.36546}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478, "for": 3160752, "retrieval_score": 16.36546}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485, "for": 3160752, "retrieval_score": 16.36546}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556, "for": 3160752, "retrieval_score": 16.36546}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557, "for": 3160752, "retrieval_score": 16.36546}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362, "for": 3160752, "retrieval_score": 8.18273}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478, "for": 3160752, "retrieval_score": 8.18273}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485, "for": 3160752, "retrieval_score": 8.18273}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556, "for": 3160752, "retrieval_score": 8.18273}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557, "for": 3160752, "retrieval_score": 8.18273}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 42172204, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 42172204, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 42172204, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 42172204, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 42172204, "retrieval_score": 5.631149}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 3743222, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 3743222, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 3743222, "retrieval_score": 8.819389}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 3743222, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 3743222, "retrieval_score": 7.871623}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 3743222, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 3743222, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 3743222, "retrieval_score": 8.819389}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 3743222, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 3743222, "retrieval_score": 7.871623}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462, "for": 10408927, "retrieval_score": 17.225851}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 10408927, "retrieval_score": 17.225851}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 10408927, "retrieval_score": 17.225851}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436, "for": 10408927, "retrieval_score": 17.225851}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475, "for": 10408927, "retrieval_score": 17.225851}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462, "for": 10408927, "retrieval_score": 25.838776}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 10408927, "retrieval_score": 25.838776}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 10408927, "retrieval_score": 25.838776}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436, "for": 10408927, "retrieval_score": 25.838776}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475, "for": 10408927, "retrieval_score": 25.838776}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 5749195, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 5749195, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 5749195, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 5749195, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 5749195, "retrieval_score": 5.681296}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 42364593, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 42364593, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 42364593, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 42364593, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 42364593, "retrieval_score": 8.857946}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392, "for": 35253971, "retrieval_score": 12.381802}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 35253971, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 35253971, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 35253971, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 35253971, "retrieval_score": 10.290231}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 9550867, "retrieval_score": 10.275188}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 9550867, "retrieval_score": 8.612926}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331, "for": 9550867, "retrieval_score": 8.612926}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333, "for": 9550867, "retrieval_score": 8.612926}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 9550867, "retrieval_score": 8.549236}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477, "for": 730764, "retrieval_score": 6.3749056}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478, "for": 730764, "retrieval_score": 6.3749056}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631, "for": 730764, "retrieval_score": 8.629803}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 730764, "retrieval_score": 7.3884673}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363, "for": 730764, "retrieval_score": 7.2052994}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 24841306, "retrieval_score": 19.392216}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 24841306, "retrieval_score": 16.644709}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008, "for": 24841306, "retrieval_score": 9.575895}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010, "for": 24841306, "retrieval_score": 9.575895}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 24841306, "retrieval_score": 9.221109}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 7238226, "retrieval_score": 15.932293}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354, "for": 7238226, "retrieval_score": 15.932293}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 7238226, "retrieval_score": 15.932293}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356, "for": 7238226, "retrieval_score": 15.932293}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359, "for": 7238226, "retrieval_score": 15.932293}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 40156469, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 40156469, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 40156469, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 40156469, "retrieval_score": 8.549236}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 40156469, "retrieval_score": 8.549236}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 4174941, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 4174941, "retrieval_score": 9.029783}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 4174941, "retrieval_score": 8.805972}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 4174941, "retrieval_score": 8.805972}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 4174941, "retrieval_score": 8.805972}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 4174941, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 4174941, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 4174941, "retrieval_score": 8.857946}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 4174941, "retrieval_score": 18.059566}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 4174941, "retrieval_score": 17.543041}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4174941, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4174941, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 4174941, "retrieval_score": 14.621655}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 36381230, "retrieval_score": 13.534788}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008, "for": 36381230, "retrieval_score": 13.437819}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010, "for": 36381230, "retrieval_score": 13.437819}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 36381230, "retrieval_score": 13.007814}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 36381230, "retrieval_score": 13.007814}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18470323, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18470323, "retrieval_score": 8.756195}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 18470323, "retrieval_score": 8.473424}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 18470323, "retrieval_score": 7.5379715}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 18470323, "retrieval_score": 7.3108277}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 18470323, "retrieval_score": 16.946848}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 18470323, "retrieval_score": 15.075943}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 18470323, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 18470323, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 18470323, "retrieval_score": 12.864405}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18663644, "retrieval_score": 5.1035686}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 18663644, "retrieval_score": 5.1035686}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 18663644, "retrieval_score": 5.1035686}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 18663644, "retrieval_score": 5.1035686}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 18663644, "retrieval_score": 5.1035686}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850, "for": 2759067, "retrieval_score": 10.880902}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892, "for": 2759067, "retrieval_score": 10.880902}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897, "for": 2759067, "retrieval_score": 10.880902}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951, "for": 2759067, "retrieval_score": 10.880902}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311, "for": 2759067, "retrieval_score": 10.880902}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 10258584, "retrieval_score": 8.069274}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357, "for": 10258584, "retrieval_score": 7.784379}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543, "for": 10258584, "retrieval_score": 7.784379}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 10258584, "retrieval_score": 6.926011}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356, "for": 10258584, "retrieval_score": 6.6814804}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 12337583, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 12337583, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 12337583, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 12337583, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 12337583, "retrieval_score": 16.138548}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 20205455, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 20205455, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 20205455, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 20205455, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 20205455, "retrieval_score": 9.390783}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 39998424, "retrieval_score": 8.819389}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 39998424, "retrieval_score": 4.289906}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 39998424, "retrieval_score": 4.289906}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 39998424, "retrieval_score": 4.289906}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225, "for": 39998424, "retrieval_score": 4.289906}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 29471884, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 29471884, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 29471884, "retrieval_score": 15.780562}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033, "for": 29471884, "retrieval_score": 14.443338}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 29471884, "retrieval_score": 13.2869215}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828, "for": 39602824, "retrieval_score": 5.774401}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013, "for": 39602824, "retrieval_score": 5.774401}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 39602824, "retrieval_score": 5.774401}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130, "for": 39602824, "retrieval_score": 5.774401}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941, "for": 39602824, "retrieval_score": 5.774401}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 40620804, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 40620804, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 40620804, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 40620804, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 40620804, "retrieval_score": 13.2869215}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 546321, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 546321, "retrieval_score": 16.644709}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 546321, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 546321, "retrieval_score": 7.871623}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 42352887, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 42352887, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 42352887, "retrieval_score": 10.754423}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 42352887, "retrieval_score": 10.275188}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 42352887, "retrieval_score": 9.288356}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 7429118, "retrieval_score": 13.099137}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 7429118, "retrieval_score": 13.099137}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 7429118, "retrieval_score": 13.099137}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 7429118, "retrieval_score": 13.099137}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870, "for": 7429118, "retrieval_score": 13.099137}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3895424, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3895424, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3895424, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 3895424, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 3895424, "retrieval_score": 13.2869215}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 15752422, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 15752422, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 15752422, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 15752422, "retrieval_score": 8.069274}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 15752422, "retrieval_score": 7.1087627}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 1532810, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 1532810, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 1532810, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 1532810, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 1532810, "retrieval_score": 14.126824}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 15248272, "retrieval_score": 32.73092}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 15248272, "retrieval_score": 32.73092}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 15248272, "retrieval_score": 32.73092}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 15248272, "retrieval_score": 28.09357}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 15248272, "retrieval_score": 28.09357}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 18116235, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 18116235, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 18116235, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 18116235, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 18116235, "retrieval_score": 19.296608}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 17038426, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 17038426, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 17038426, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 17038426, "retrieval_score": 14.2175255}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 17038426, "retrieval_score": 12.203173}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 3809265, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 3809265, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 3809265, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 3809265, "retrieval_score": 14.2175255}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 3809265, "retrieval_score": 12.203173}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 275018, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 275018, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 275018, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 275018, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 275018, "retrieval_score": 6.7207417}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 275018, "retrieval_score": 16.42601}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 275018, "retrieval_score": 16.42601}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 275018, "retrieval_score": 16.42601}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 275018, "retrieval_score": 16.42601}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 275018, "retrieval_score": 16.42601}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 275018, "retrieval_score": 5.627493}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 275018, "retrieval_score": 12.694832}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 275018, "retrieval_score": 10.170534}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 275018, "retrieval_score": 10.170534}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86, "for": 275018, "retrieval_score": 9.793862}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095, "for": 275018, "retrieval_score": 9.793862}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 275018, "retrieval_score": 16.811207}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 275018, "retrieval_score": 13.4683895}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 275018, "retrieval_score": 13.4683895}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590, "for": 275018, "retrieval_score": 12.250424}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 275018, "retrieval_score": 11.234476}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 275018, "retrieval_score": 12.521976}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 275018, "retrieval_score": 10.950673}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 275018, "retrieval_score": 10.950673}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 275018, "retrieval_score": 10.950673}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 275018, "retrieval_score": 10.950673}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 275018, "retrieval_score": 21.901346}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 275018, "retrieval_score": 21.901346}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 275018, "retrieval_score": 21.901346}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 275018, "retrieval_score": 21.901346}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 275018, "retrieval_score": 21.901346}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 18551752, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 18551752, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 18551752, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 18551752, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 18551752, "retrieval_score": 6.538975}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 21360028, "retrieval_score": 32.474594}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 21360028, "retrieval_score": 32.474594}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 21360028, "retrieval_score": 32.474594}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 21360028, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 21360028, "retrieval_score": 24.628319}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 11174790, "retrieval_score": 6.6814804}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 11174790, "retrieval_score": 5.8523183}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 11174790, "retrieval_score": 5.206232}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 11174790, "retrieval_score": 5.206232}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 11174790, "retrieval_score": 5.206232}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13353233, "retrieval_score": 8.9242325}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 13353233, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 13353233, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 13353233, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 13353233, "retrieval_score": 8.253944}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 3040904, "retrieval_score": 16.644709}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 3040904, "retrieval_score": 14.579124}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 3040904, "retrieval_score": 9.48233}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 3040904, "retrieval_score": 9.48233}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 3040904, "retrieval_score": 9.48233}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4588628, "retrieval_score": 9.221109}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 4588628, "retrieval_score": 8.493686}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 4588628, "retrieval_score": 8.493686}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 4588628, "retrieval_score": 8.493686}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 4588628, "retrieval_score": 8.493686}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 3804727, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 3804727, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 3804727, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 3804727, "retrieval_score": 7.703372}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783, "for": 3804727, "retrieval_score": 7.703372}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 961632, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 961632, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 961632, "retrieval_score": 8.18273}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 961632, "retrieval_score": 5.9267936}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 961632, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 961632, "retrieval_score": 5.9267936}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 5201191, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 5201191, "retrieval_score": 9.8809595}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 5201191, "retrieval_score": 8.83799}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 5201191, "retrieval_score": 8.83799}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 5201191, "retrieval_score": 8.83799}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 9969684, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 9969684, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 9969684, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 9969684, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 9969684, "retrieval_score": 11.853587}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 38457059, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 38457059, "retrieval_score": 7.7504354}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229, "for": 38457059, "retrieval_score": 6.511324}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089, "for": 38457059, "retrieval_score": 6.511324}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459, "for": 38457059, "retrieval_score": 6.3254023}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101, "for": 3842155, "retrieval_score": 12.368891}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271, "for": 3842155, "retrieval_score": 7.871623}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278, "for": 3842155, "retrieval_score": 7.871623}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888, "for": 3842155, "retrieval_score": 7.871623}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412, "for": 3842155, "retrieval_score": 6.756364}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 12492137, "retrieval_score": 10.275188}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 12492137, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 12492137, "retrieval_score": 8.322354}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 12492137, "retrieval_score": 6.837495}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648, "for": 12492137, "retrieval_score": 5.9889717}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3034014, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3034014, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 3034014, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 3034014, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 3034014, "retrieval_score": 7.3108277}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 1823058, "retrieval_score": 10.993155}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021, "for": 1823058, "retrieval_score": 9.435634}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 1823058, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 1823058, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 1823058, "retrieval_score": 5.8480387}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622, "for": 1823058, "retrieval_score": 25.838776}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979, "for": 1823058, "retrieval_score": 22.177914}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983, "for": 1823058, "retrieval_score": 22.177914}
{"snippet": "locale.setlocale(category, locale=None)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5351, "for": 1823058, "retrieval_score": 19.425667}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980, "for": 1823058, "retrieval_score": 17.281105}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4800811, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4800811, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4800811, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4800811, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4800811, "retrieval_score": 8.857946}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308, "for": 12804801, "retrieval_score": 19.878656}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309, "for": 12804801, "retrieval_score": 19.878656}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028, "for": 12804801, "retrieval_score": 19.878656}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665, "for": 12804801, "retrieval_score": 19.878656}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666, "for": 12804801, "retrieval_score": 19.878656}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973, "for": 42442428, "retrieval_score": 23.56211}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 42442428, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 42442428, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 42442428, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 42442428, "retrieval_score": 13.2869215}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 3262437, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 3262437, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 3262437, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 3262437, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 3262437, "retrieval_score": 11.469158}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 13840883, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 13840883, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 13840883, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 13840883, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 13840883, "retrieval_score": 8.253944}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 6667201, "retrieval_score": 13.223902}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 6667201, "retrieval_score": 13.223902}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 6667201, "retrieval_score": 13.223902}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070, "for": 6667201, "retrieval_score": 11.582834}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072, "for": 6667201, "retrieval_score": 11.582834}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 18253210, "retrieval_score": 26.406902}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 18253210, "retrieval_score": 15.905168}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 18253210, "retrieval_score": 14.276905}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 18253210, "retrieval_score": 14.276905}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 18253210, "retrieval_score": 14.276905}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055, "for": 11764260, "retrieval_score": 7.7504354}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054, "for": 11764260, "retrieval_score": 6.788617}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057, "for": 11764260, "retrieval_score": 6.788617}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056, "for": 11764260, "retrieval_score": 6.039165}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 11764260, "retrieval_score": 4.6105547}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087, "for": 12579061, "retrieval_score": 10.275188}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781, "for": 12579061, "retrieval_score": 8.209324}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150, "for": 12579061, "retrieval_score": 7.303028}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000, "for": 12579061, "retrieval_score": 6.5769453}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261, "for": 12579061, "retrieval_score": 6.5769453}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087, "for": 12579061, "retrieval_score": 10.275188}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001, "for": 12579061, "retrieval_score": 9.285077}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781, "for": 12579061, "retrieval_score": 8.209324}
{"snippet": "os.setxattr(path, attribute, value, flags=0)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . `flags` may be XATTR_REPLACE or XATTR_CREATE .", "question_id": 7002, "for": 12579061, "retrieval_score": 7.4387903}
{"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003, "for": 12579061, "retrieval_score": 7.4387903}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1773805, "retrieval_score": 16.138548}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279, "for": 1773805, "retrieval_score": 13.955631}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1773805, "retrieval_score": 16.138548}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812, "for": 1773805, "retrieval_score": 15.743246}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279, "for": 1773805, "retrieval_score": 13.955631}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 41572822, "retrieval_score": 18.629354}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 41572822, "retrieval_score": 14.005602}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 41572822, "retrieval_score": 11.220665}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 41572822, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 41572822, "retrieval_score": 8.069274}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 32490629, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 32490629, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 32490629, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 32490629, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 32490629, "retrieval_score": 8.18273}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 5607551, "retrieval_score": 8.322354}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 5607551, "retrieval_score": 7.724916}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 5607551, "retrieval_score": 7.289562}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 5607551, "retrieval_score": 7.289562}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 5607551, "retrieval_score": 6.4848065}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 16868457, "retrieval_score": 23.343275}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 16868457, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 16868457, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 16868457, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 16868457, "retrieval_score": 18.57447}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8081545, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8081545, "retrieval_score": 8.779708}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8081545, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8081545, "retrieval_score": 8.779708}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8081545, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 8081545, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8081545, "retrieval_score": 8.779708}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 38251245, "retrieval_score": 21.846237}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 38251245, "retrieval_score": 21.846237}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 38251245, "retrieval_score": 21.846237}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 38251245, "retrieval_score": 21.846237}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 38251245, "retrieval_score": 21.846237}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 29983106, "retrieval_score": 6.039165}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 29983106, "retrieval_score": 4.946905}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 29983106, "retrieval_score": 4.946905}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548, "for": 29983106, "retrieval_score": 4.946905}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019, "for": 29983106, "retrieval_score": 4.7670164}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 34015615, "retrieval_score": 20.550377}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 34015615, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 34015615, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 34015615, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 34015615, "retrieval_score": 10.260323}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 3276180, "retrieval_score": 8.322354}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 3276180, "retrieval_score": 6.4848065}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 3276180, "retrieval_score": 4.7795057}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164, "for": 3276180, "retrieval_score": 3.969753}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165, "for": 3276180, "retrieval_score": 3.969753}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 3276180, "retrieval_score": 8.322354}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 3276180, "retrieval_score": 6.4848065}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 3276180, "retrieval_score": 4.871418}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 3276180, "retrieval_score": 4.7795057}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 3276180, "retrieval_score": 4.1783776}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 3276180, "retrieval_score": 8.322354}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 3276180, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3276180, "retrieval_score": 7.289562}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 3276180, "retrieval_score": 6.4848065}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 3276180, "retrieval_score": 4.871418}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 16374540, "retrieval_score": 12.065391}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 16374540, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 16374540, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 16374540, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 16374540, "retrieval_score": 11.254986}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 9072844, "retrieval_score": 8.322354}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 9072844, "retrieval_score": 7.289562}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 9072844, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 9072844, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 9072844, "retrieval_score": 6.788617}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 10373660, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 10373660, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 10373660, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 10373660, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 10373660, "retrieval_score": 6.926011}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 1249388, "retrieval_score": 6.6814804}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 1249388, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 1249388, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 1249388, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 1249388, "retrieval_score": 6.266589}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 15474933, "retrieval_score": 18.872396}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 15474933, "retrieval_score": 18.872396}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040, "for": 15474933, "retrieval_score": 16.594404}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052, "for": 15474933, "retrieval_score": 16.594404}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054, "for": 15474933, "retrieval_score": 16.594404}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 40987319, "retrieval_score": 7.063412}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 40987319, "retrieval_score": 7.063412}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 40987319, "retrieval_score": 7.063412}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 40987319, "retrieval_score": 7.063412}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061, "for": 40987319, "retrieval_score": 7.063412}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 12974474, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 12974474, "retrieval_score": 5.3102937}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 12974474, "retrieval_score": 5.3102937}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 12974474, "retrieval_score": 5.3102937}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 12974474, "retrieval_score": 5.3102937}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 7271385, "retrieval_score": 12.065391}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 7271385, "retrieval_score": 11.126384}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 7271385, "retrieval_score": 11.126384}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 7271385, "retrieval_score": 10.733391}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 7271385, "retrieval_score": 10.275188}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 7271385, "retrieval_score": 12.065391}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 7271385, "retrieval_score": 11.126384}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 7271385, "retrieval_score": 11.126384}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 7271385, "retrieval_score": 10.733391}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 7271385, "retrieval_score": 10.275188}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 15974730, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 15974730, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 15974730, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 15974730, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 15974730, "retrieval_score": 6.1015863}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 11755208, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 11755208, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 11755208, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 11755208, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 11755208, "retrieval_score": 5.631149}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 715550, "retrieval_score": 31.859016}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 715550, "retrieval_score": 27.682129}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 715550, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 715550, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 715550, "retrieval_score": 24.54819}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 466345, "retrieval_score": 10.310373}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 466345, "retrieval_score": 10.246757}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 466345, "retrieval_score": 10.246757}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 466345, "retrieval_score": 10.246757}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 466345, "retrieval_score": 9.696108}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 466345, "retrieval_score": 8.322354}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 466345, "retrieval_score": 6.4848065}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842, "for": 466345, "retrieval_score": 6.2286806}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616, "for": 466345, "retrieval_score": 6.2286806}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803, "for": 466345, "retrieval_score": 5.4557104}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 17057544, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 17057544, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 17057544, "retrieval_score": 8.866667}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 9733638, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 9733638, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 9733638, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 9733638, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 9733638, "retrieval_score": 6.7207417}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 42260840, "retrieval_score": 28.861542}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 42260840, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 42260840, "retrieval_score": 24.628319}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 42260840, "retrieval_score": 19.710546}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 42260840, "retrieval_score": 19.710546}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 9647586, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 9647586, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 9647586, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 9647586, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 9647586, "retrieval_score": 6.1015863}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18265935, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18265935, "retrieval_score": 8.756195}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 18265935, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 18265935, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 18265935, "retrieval_score": 7.3926377}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 40707158, "retrieval_score": 10.542535}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 40707158, "retrieval_score": 9.362779}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 40707158, "retrieval_score": 9.362779}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171, "for": 40707158, "retrieval_score": 9.362779}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175, "for": 40707158, "retrieval_score": 9.362779}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 4800419, "retrieval_score": 12.278121}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 4800419, "retrieval_score": 10.754423}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 4800419, "retrieval_score": 9.567153}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 4800419, "retrieval_score": 9.314677}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4800419, "retrieval_score": 8.857946}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 13142347, "retrieval_score": 7.2253866}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946, "for": 13142347, "retrieval_score": 6.5332274}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938, "for": 13142347, "retrieval_score": 6.427716}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 13142347, "retrieval_score": 6.427716}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 13142347, "retrieval_score": 6.427716}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14169122, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 14169122, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 14169122, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 14169122, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 14169122, "retrieval_score": 14.621655}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 587345, "retrieval_score": 25.043953}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 587345, "retrieval_score": 21.901346}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 587345, "retrieval_score": 21.901346}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 587345, "retrieval_score": 21.901346}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 587345, "retrieval_score": 21.901346}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 587345, "retrieval_score": 10.950673}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 587345, "retrieval_score": 10.950673}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 587345, "retrieval_score": 10.950673}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 587345, "retrieval_score": 10.950673}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 587345, "retrieval_score": 10.950673}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 33218968, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 33218968, "retrieval_score": 8.322354}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 33218968, "retrieval_score": 6.4848065}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502, "for": 33218968, "retrieval_score": 5.311947}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 33218968, "retrieval_score": 4.4333334}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539, "for": 1683775, "retrieval_score": 9.652323}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 1683775, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 1683775, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 1683775, "retrieval_score": 8.779708}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519, "for": 1683775, "retrieval_score": 8.454484}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267, "for": 3523048, "retrieval_score": 8.322354}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274, "for": 3523048, "retrieval_score": 8.322354}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62, "for": 3523048, "retrieval_score": 7.586412}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61, "for": 3523048, "retrieval_score": 7.0826025}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60, "for": 3523048, "retrieval_score": 6.6415424}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267, "for": 3523048, "retrieval_score": 8.322354}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274, "for": 3523048, "retrieval_score": 8.322354}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62, "for": 3523048, "retrieval_score": 7.586412}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61, "for": 3523048, "retrieval_score": 7.0826025}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60, "for": 3523048, "retrieval_score": 6.6415424}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5137497, "retrieval_score": 8.819389}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5137497, "retrieval_score": 8.819389}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 5137497, "retrieval_score": 4.538543}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 5137497, "retrieval_score": 4.538543}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 5137497, "retrieval_score": 4.538543}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 5137497, "retrieval_score": 4.538543}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5137497, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 5137497, "retrieval_score": 13.300001}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 5137497, "retrieval_score": 13.300001}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 5137497, "retrieval_score": 13.300001}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 5137497, "retrieval_score": 13.300001}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5137497, "retrieval_score": 8.819389}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574, "for": 5137497, "retrieval_score": 6.6175947}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608, "for": 5137497, "retrieval_score": 6.6175947}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664, "for": 5137497, "retrieval_score": 6.6175947}
{"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674, "for": 5137497, "retrieval_score": 6.6175947}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089, "for": 5137497, "retrieval_score": 11.137006}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 5137497, "retrieval_score": 8.866667}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 10078470, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 10078470, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 10078470, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 10078470, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 10078470, "retrieval_score": 5.681296}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 10078470, "retrieval_score": 7.2534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 10078470, "retrieval_score": 6.3532634}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 10078470, "retrieval_score": 6.3532634}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 10078470, "retrieval_score": 5.6518736}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 10078470, "retrieval_score": 5.089952}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 373459, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 373459, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 373459, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 373459, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 373459, "retrieval_score": 8.253944}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695, "for": 36875258, "retrieval_score": 7.724916}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 36875258, "retrieval_score": 4.538543}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 36875258, "retrieval_score": 4.538543}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 36875258, "retrieval_score": 4.538543}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 36875258, "retrieval_score": 4.538543}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 18319101, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 18319101, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18319101, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18319101, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 18319101, "retrieval_score": 8.18273}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401, "for": 39646401, "retrieval_score": 18.629354}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 39646401, "retrieval_score": 18.629354}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 39646401, "retrieval_score": 18.629354}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 39646401, "retrieval_score": 10.275188}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 39646401, "retrieval_score": 6.611951}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 19758364, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 19758364, "retrieval_score": 7.7504354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 19758364, "retrieval_score": 7.724916}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725, "for": 19758364, "retrieval_score": 6.6175947}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 19758364, "retrieval_score": 6.5195985}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 14694482, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 14694482, "retrieval_score": 6.926011}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 14694482, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 14694482, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 14694482, "retrieval_score": 6.538975}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 18142090, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 18142090, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 18142090, "retrieval_score": 10.754423}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 18142090, "retrieval_score": 9.288356}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 18142090, "retrieval_score": 9.029783}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 31888871, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 31888871, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 31888871, "retrieval_score": 7.8520374}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 31888871, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 31888871, "retrieval_score": 7.7504354}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 19894478, "retrieval_score": 5.1035686}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 19894478, "retrieval_score": 5.1035686}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 19894478, "retrieval_score": 5.1035686}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 19894478, "retrieval_score": 5.1035686}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 19894478, "retrieval_score": 5.1035686}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 3329386, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 3329386, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 3329386, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 3329386, "retrieval_score": 10.32076}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 3329386, "retrieval_score": 9.335693}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 9505526, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 9505526, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 9505526, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 9505526, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 9505526, "retrieval_score": 12.407009}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 29360607, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 29360607, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 29360607, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 29360607, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 29360607, "retrieval_score": 6.066503}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 29360607, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 29360607, "retrieval_score": 8.514181}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 29360607, "retrieval_score": 8.069274}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 29360607, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 29360607, "retrieval_score": 7.1087627}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6510477, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6510477, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6510477, "retrieval_score": 15.780562}
{"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706, "for": 6510477, "retrieval_score": 13.401236}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 6510477, "retrieval_score": 13.2869215}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 11300383, "retrieval_score": 8.407638}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988, "for": 11300383, "retrieval_score": 8.135136}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990, "for": 11300383, "retrieval_score": 8.135136}
{"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952, "for": 11300383, "retrieval_score": 7.3263226}
{"snippet": "re.subn(pattern, repl, string, count=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`.", "question_id": 7956, "for": 11300383, "retrieval_score": 7.3263226}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 27436748, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 27436748, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 27436748, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 27436748, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 27436748, "retrieval_score": 13.252438}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 14332141, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 14332141, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 14332141, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 14332141, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 14332141, "retrieval_score": 5.681296}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 15852295, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 15852295, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 15852295, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 15852295, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 15852295, "retrieval_score": 14.621655}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 15852295, "retrieval_score": 26.268585}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 15852295, "retrieval_score": 26.268585}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 15852295, "retrieval_score": 21.932484}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 15852295, "retrieval_score": 21.932484}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 15852295, "retrieval_score": 21.932484}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 21129020, "retrieval_score": 10.275188}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 21129020, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 21129020, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 21129020, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 21129020, "retrieval_score": 7.703372}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 7999935, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 7999935, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 7999935, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 7999935, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 7999935, "retrieval_score": 13.09412}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 36661837, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 36661837, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 36661837, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 36661837, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 36661837, "retrieval_score": 6.066503}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 11073609, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 11073609, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 11073609, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 11073609, "retrieval_score": 14.2175255}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 11073609, "retrieval_score": 12.203173}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 5404665, "retrieval_score": 6.596385}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 5404665, "retrieval_score": 6.596385}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252, "for": 5404665, "retrieval_score": 6.596385}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467, "for": 5404665, "retrieval_score": 6.596385}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150, "for": 5404665, "retrieval_score": 6.596385}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 14991195, "retrieval_score": 9.314677}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 14991195, "retrieval_score": 8.8023}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 14991195, "retrieval_score": 7.9949646}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734, "for": 14991195, "retrieval_score": 7.002801}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 14991195, "retrieval_score": 6.6175947}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8785554, "retrieval_score": 8.069274}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8785554, "retrieval_score": 8.069274}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8785554, "retrieval_score": 8.069274}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8785554, "retrieval_score": 8.069274}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 8785554, "retrieval_score": 6.926011}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 8785554, "retrieval_score": 17.032112}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 8785554, "retrieval_score": 17.032112}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 8785554, "retrieval_score": 17.032112}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653, "for": 8785554, "retrieval_score": 17.032112}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 8785554, "retrieval_score": 15.338741}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 39719140, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 39719140, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 39719140, "retrieval_score": 4.428973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 39719140, "retrieval_score": 4.428973}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 39719140, "retrieval_score": 4.428973}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 16176996, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 16176996, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 16176996, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 16176996, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 16176996, "retrieval_score": 15.743246}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 9053260, "retrieval_score": 28.861542}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 9053260, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 9053260, "retrieval_score": 24.628319}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9053260, "retrieval_score": 18.872396}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 9053260, "retrieval_score": 15.557482}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 35015693, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 35015693, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 35015693, "retrieval_score": 12.450847}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 35015693, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 35015693, "retrieval_score": 11.756009}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 35015693, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 35015693, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 35015693, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 35015693, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 35015693, "retrieval_score": 7.3108277}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 1197600, "retrieval_score": 19.05954}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1197600, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1197600, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1197600, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 1197600, "retrieval_score": 11.254986}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 4299741, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 4299741, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 4299741, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 4299741, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 4299741, "retrieval_score": 17.098473}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 10677350, "retrieval_score": 6.676981}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 10677350, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 10677350, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 10677350, "retrieval_score": 5.8480387}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 10677350, "retrieval_score": 5.8480387}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036, "for": 21986194, "retrieval_score": 6.68835}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038, "for": 21986194, "retrieval_score": 6.68835}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040, "for": 21986194, "retrieval_score": 6.68835}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048, "for": 21986194, "retrieval_score": 6.68835}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666, "for": 21986194, "retrieval_score": 5.7407384}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 845058, "retrieval_score": 9.696108}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 845058, "retrieval_score": 8.983407}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 845058, "retrieval_score": 8.322354}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 845058, "retrieval_score": 7.2568364}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 845058, "retrieval_score": 7.197106}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975, "for": 845058, "retrieval_score": 63.20849}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058, "for": 845058, "retrieval_score": 63.20849}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277, "for": 845058, "retrieval_score": 54.253048}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 845058, "retrieval_score": 52.043938}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971, "for": 845058, "retrieval_score": 47.520325}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 3348825, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 3348825, "retrieval_score": 8.322354}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3348825, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3348825, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 3348825, "retrieval_score": 6.066503}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 6618515, "retrieval_score": 20.899944}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2600775, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2600775, "retrieval_score": 8.322354}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 2600775, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 2600775, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 2600775, "retrieval_score": 7.871623}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 41256648, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 41256648, "retrieval_score": 7.289562}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90, "for": 41256648, "retrieval_score": 6.95395}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298, "for": 41256648, "retrieval_score": 6.95395}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238, "for": 41256648, "retrieval_score": 6.6175947}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 12589481, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 12589481, "retrieval_score": 8.322354}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 6797984, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 6797984, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 6797984, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 6797984, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 6797984, "retrieval_score": 5.627493}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 6797984, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 6797984, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 6797984, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 6797984, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 6797984, "retrieval_score": 9.390783}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611, "for": 11573817, "retrieval_score": 8.819389}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 11573817, "retrieval_score": 5.9045115}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 11573817, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 11573817, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 11573817, "retrieval_score": 5.627493}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701, "for": 19445682, "retrieval_score": 7.724916}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 19445682, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 19445682, "retrieval_score": 7.289562}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 19445682, "retrieval_score": 5.4974566}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 19445682, "retrieval_score": 5.4974566}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3486384, "retrieval_score": 8.069274}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 3486384, "retrieval_score": 7.2253866}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3486384, "retrieval_score": 6.926011}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238, "for": 3486384, "retrieval_score": 6.6175947}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245, "for": 3486384, "retrieval_score": 6.6175947}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 6146778, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 6146778, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 6146778, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 6146778, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 6146778, "retrieval_score": 4.027504}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 638360, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 638360, "retrieval_score": 20.899944}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 638360, "retrieval_score": 20.899944}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 638360, "retrieval_score": 20.899944}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 638360, "retrieval_score": 20.899944}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 4315506, "retrieval_score": 8.983407}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4315506, "retrieval_score": 7.2568364}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 4315506, "retrieval_score": 7.197106}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 4315506, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 4315506, "retrieval_score": 6.7207417}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 4668619, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 4668619, "retrieval_score": 9.314677}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 4668619, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 4668619, "retrieval_score": 8.612926}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4668619, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 4668619, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 4668619, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 4668619, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 4668619, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 4668619, "retrieval_score": 15.743246}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3817529, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3817529, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 3817529, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3817529, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 3817529, "retrieval_score": 7.0233927}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 7741878, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 7741878, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 7741878, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 7741878, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 7741878, "retrieval_score": 4.6678467}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 38987, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 38987, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 38987, "retrieval_score": 23.676287}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 38987, "retrieval_score": 22.314278}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 38987, "retrieval_score": 16.36546}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 42548362, "retrieval_score": 11.867972}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 42548362, "retrieval_score": 11.867972}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 42548362, "retrieval_score": 11.867972}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 42548362, "retrieval_score": 10.950673}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 42548362, "retrieval_score": 10.950673}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438, "for": 12765833, "retrieval_score": 14.952225}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166, "for": 12765833, "retrieval_score": 14.952225}
{"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846, "for": 12765833, "retrieval_score": 14.952225}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847, "for": 12765833, "retrieval_score": 14.952225}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331, "for": 12765833, "retrieval_score": 14.952225}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 15882395, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 15882395, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 15882395, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 15882395, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 15882395, "retrieval_score": 7.1087627}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 20677660, "retrieval_score": 13.223902}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 20677660, "retrieval_score": 13.223902}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 20677660, "retrieval_score": 13.223902}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070, "for": 20677660, "retrieval_score": 11.582834}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072, "for": 20677660, "retrieval_score": 11.582834}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 19334374, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 19334374, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 19334374, "retrieval_score": 7.5568957}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 19334374, "retrieval_score": 6.837495}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 19334374, "retrieval_score": 6.4862275}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 19334374, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 19334374, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 19334374, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 19334374, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 19334374, "retrieval_score": 11.254986}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 15096021, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 15096021, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 15096021, "retrieval_score": 21.64973}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 15096021, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 15096021, "retrieval_score": 16.36546}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 15096021, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 15096021, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 15096021, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 15096021, "retrieval_score": 8.549236}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 15096021, "retrieval_score": 8.549236}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 15096021, "retrieval_score": 17.848257}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 15096021, "retrieval_score": 17.848257}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 15096021, "retrieval_score": 17.848257}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 15096021, "retrieval_score": 16.462173}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 15096021, "retrieval_score": 16.36546}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660, "for": 25148611, "retrieval_score": 13.831333}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 25148611, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 25148611, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 25148611, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 25148611, "retrieval_score": 13.252438}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2150739, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2150739, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 2150739, "retrieval_score": 8.819389}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2150739, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2150739, "retrieval_score": 16.644709}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 38549915, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 38549915, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 38549915, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 38549915, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 38549915, "retrieval_score": 4.1138444}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 22093471, "retrieval_score": 18.629354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 22093471, "retrieval_score": 15.449832}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 22093471, "retrieval_score": 14.005602}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 22093471, "retrieval_score": 11.220665}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 2798627, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 2798627, "retrieval_score": 8.069274}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 2798627, "retrieval_score": 7.2568364}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 2798627, "retrieval_score": 6.926011}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 2798627, "retrieval_score": 6.2286806}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 19328874, "retrieval_score": 8.069274}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 19328874, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 19328874, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 19328874, "retrieval_score": 7.063412}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 19328874, "retrieval_score": 7.063412}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071, "for": 19328874, "retrieval_score": 13.432963}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 19328874, "retrieval_score": 13.157029}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 19328874, "retrieval_score": 12.477757}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 19328874, "retrieval_score": 11.79538}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 19328874, "retrieval_score": 10.540827}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 19618912, "retrieval_score": 9.314677}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 19618912, "retrieval_score": 7.9949646}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 19618912, "retrieval_score": 7.063412}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 19618912, "retrieval_score": 7.063412}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 19618912, "retrieval_score": 7.063412}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 3487377, "retrieval_score": 20.550377}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 3487377, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 3487377, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 3487377, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 3487377, "retrieval_score": 10.260323}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417, "for": 3061761, "retrieval_score": 7.9949646}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3061761, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3061761, "retrieval_score": 4.838603}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417, "for": 3061761, "retrieval_score": 7.9949646}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 3061761, "retrieval_score": 6.898015}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 3061761, "retrieval_score": 6.898015}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417, "for": 3061761, "retrieval_score": 7.9949646}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 3061761, "retrieval_score": 6.898015}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 3061761, "retrieval_score": 6.898015}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417, "for": 3061761, "retrieval_score": 7.9949646}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101, "for": 3061761, "retrieval_score": 7.002801}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3061761, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3061761, "retrieval_score": 4.838603}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2917372, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2917372, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2917372, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 2917372, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 2917372, "retrieval_score": 14.046785}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 444591, "retrieval_score": 8.419306}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006, "for": 444591, "retrieval_score": 8.056082}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930, "for": 444591, "retrieval_score": 7.4898286}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934, "for": 444591, "retrieval_score": 7.4898286}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995, "for": 444591, "retrieval_score": 7.4898286}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14162026, "retrieval_score": 22.162144}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 14162026, "retrieval_score": 19.449406}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 14162026, "retrieval_score": 19.449406}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 14162026, "retrieval_score": 17.332207}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862, "for": 14162026, "retrieval_score": 14.9463}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 1482308, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 1482308, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 1482308, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 1482308, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 1482308, "retrieval_score": 7.3108277}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 715417, "retrieval_score": 11.442135}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 715417, "retrieval_score": 10.022182}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 715417, "retrieval_score": 7.2308817}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270, "for": 715417, "retrieval_score": 7.2308817}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 715417, "retrieval_score": 7.1087627}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 5399112, "retrieval_score": 8.322354}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058, "for": 5399112, "retrieval_score": 7.289562}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347, "for": 5399112, "retrieval_score": 7.289562}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 5399112, "retrieval_score": 6.4848065}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 24525111, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 24525111, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 24525111, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 24525111, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 24525111, "retrieval_score": 6.7207417}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 187455, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 187455, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 187455, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 187455, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 187455, "retrieval_score": 6.9778156}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876, "for": 24492327, "retrieval_score": 9.774999}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 24492327, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 24492327, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 24492327, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 24492327, "retrieval_score": 8.866667}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287, "for": 8639973, "retrieval_score": 10.275188}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 8639973, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 8639973, "retrieval_score": 8.514181}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975, "for": 8639973, "retrieval_score": 7.6277695}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984, "for": 8639973, "retrieval_score": 7.6277695}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163, "for": 8215686, "retrieval_score": 10.275188}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839, "for": 8215686, "retrieval_score": 9.696108}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 8215686, "retrieval_score": 9.029783}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807, "for": 8215686, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 8215686, "retrieval_score": 8.322354}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 2317134, "retrieval_score": 13.577234}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 2317134, "retrieval_score": 13.577234}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 2317134, "retrieval_score": 13.577234}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 2317134, "retrieval_score": 10.877476}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 2317134, "retrieval_score": 10.134097}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 2317134, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 2317134, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 2317134, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 2317134, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 2317134, "retrieval_score": 12.407009}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 209513, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 209513, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 209513, "retrieval_score": 5.681296}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 209513, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 209513, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 209513, "retrieval_score": 5.681296}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 209513, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 209513, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 209513, "retrieval_score": 5.681296}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 209513, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 209513, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 209513, "retrieval_score": 5.681296}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 209513, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 209513, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 209513, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 209513, "retrieval_score": 5.681296}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 28669459, "retrieval_score": 16.13827}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021, "for": 28669459, "retrieval_score": 13.851784}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 28669459, "retrieval_score": 10.290231}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031, "for": 739993, "retrieval_score": 9.9514885}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030, "for": 739993, "retrieval_score": 8.308816}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75, "for": 739993, "retrieval_score": 3.580547}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74, "for": 739993, "retrieval_score": 3.342765}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60, "for": 739993, "retrieval_score": 3.1345985}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 40852575, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 40852575, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 40852575, "retrieval_score": 21.64973}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 40852575, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 40852575, "retrieval_score": 20.826847}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7371935, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7371935, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 7371935, "retrieval_score": 8.615965}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 7371935, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 7371935, "retrieval_score": 7.098534}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7371935, "retrieval_score": 18.059566}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7371935, "retrieval_score": 17.543041}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 7371935, "retrieval_score": 14.054703}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 7371935, "retrieval_score": 13.577234}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 7371935, "retrieval_score": 7.098534}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7371935, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7371935, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 7371935, "retrieval_score": 8.615965}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 7371935, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 7371935, "retrieval_score": 7.098534}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 29464234, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 29464234, "retrieval_score": 10.733391}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 29464234, "retrieval_score": 9.314677}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 29464234, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 29464234, "retrieval_score": 8.253944}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8650415, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8650415, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8650415, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8650415, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8650415, "retrieval_score": 16.138548}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 6504200, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 6504200, "retrieval_score": 6.4862275}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 6504200, "retrieval_score": 5.681296}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209, "for": 6504200, "retrieval_score": 5.681296}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 6504200, "retrieval_score": 5.627493}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2424412, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2424412, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2424412, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 2424412, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 2424412, "retrieval_score": 14.046785}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 2424412, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2424412, "retrieval_score": 9.050911}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 2424412, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2424412, "retrieval_score": 9.050911}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 2424412, "retrieval_score": 8.779708}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 15313250, "retrieval_score": 8.8023}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 15313250, "retrieval_score": 8.322354}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 15313250, "retrieval_score": 6.6175947}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 15313250, "retrieval_score": 6.4848065}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 15313250, "retrieval_score": 6.246592}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 15313250, "retrieval_score": 14.515808}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 15313250, "retrieval_score": 14.515808}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 15313250, "retrieval_score": 14.515808}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 15313250, "retrieval_score": 13.344483}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 15313250, "retrieval_score": 13.344483}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839, "for": 5507948, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 5507948, "retrieval_score": 9.314677}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 5507948, "retrieval_score": 8.612926}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331, "for": 5507948, "retrieval_score": 8.612926}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333, "for": 5507948, "retrieval_score": 8.612926}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 1038824, "retrieval_score": 16.49237}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 1038824, "retrieval_score": 16.49237}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 1038824, "retrieval_score": 16.49237}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 1038824, "retrieval_score": 16.49237}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 1038824, "retrieval_score": 16.49237}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 1038824, "retrieval_score": 10.994913}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 1038824, "retrieval_score": 10.994913}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 1038824, "retrieval_score": 10.994913}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 1038824, "retrieval_score": 10.994913}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 1038824, "retrieval_score": 10.994913}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1038824, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1038824, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 1038824, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 1038824, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 1038824, "retrieval_score": 6.066503}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078, "for": 1038824, "retrieval_score": 26.669792}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 1038824, "retrieval_score": 26.1559}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 1038824, "retrieval_score": 26.1559}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 1038824, "retrieval_score": 26.1559}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 1038824, "retrieval_score": 26.1559}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 19112735, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 19112735, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 19112735, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 19112735, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 19112735, "retrieval_score": 14.046785}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 9775731, "retrieval_score": 15.500871}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055, "for": 9775731, "retrieval_score": 15.500871}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 9775731, "retrieval_score": 15.4353485}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 9775731, "retrieval_score": 15.4353485}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 9775731, "retrieval_score": 15.4353485}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 367155, "retrieval_score": 10.207137}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 367155, "retrieval_score": 10.207137}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 367155, "retrieval_score": 10.207137}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 367155, "retrieval_score": 10.207137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 367155, "retrieval_score": 10.207137}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362, "for": 17972020, "retrieval_score": 8.18273}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478, "for": 17972020, "retrieval_score": 8.18273}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068, "for": 17972020, "retrieval_score": 8.18273}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812, "for": 17972020, "retrieval_score": 8.18273}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814, "for": 17972020, "retrieval_score": 8.18273}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 2823472, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 2823472, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 2823472, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 2823472, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 2823472, "retrieval_score": 7.703372}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 12005558, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 12005558, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 12005558, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 12005558, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 12005558, "retrieval_score": 19.296608}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 10974932, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 10974932, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 10974932, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 10974932, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 10974932, "retrieval_score": 5.627493}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026, "for": 14925239, "retrieval_score": 16.644709}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025, "for": 14925239, "retrieval_score": 14.579124}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 14925239, "retrieval_score": 8.308816}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 14925239, "retrieval_score": 7.131615}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480, "for": 14925239, "retrieval_score": 7.131615}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17815945, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 17815945, "retrieval_score": 21.070179}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 17815945, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17815945, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 17815945, "retrieval_score": 21.070179}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 21212706, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 21212706, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 21212706, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 21212706, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 21212706, "retrieval_score": 13.252438}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 4523551, "retrieval_score": 10.275188}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 4523551, "retrieval_score": 10.275188}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 4523551, "retrieval_score": 8.8023}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 4523551, "retrieval_score": 5.3017225}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 4523551, "retrieval_score": 4.4223604}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 12572362, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 12572362, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 12572362, "retrieval_score": 8.627357}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 12572362, "retrieval_score": 8.069274}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 12572362, "retrieval_score": 8.055008}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 23306653, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 23306653, "retrieval_score": 6.926011}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160, "for": 23306653, "retrieval_score": 6.6284943}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935, "for": 23306653, "retrieval_score": 6.6284943}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179, "for": 23306653, "retrieval_score": 6.0840073}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 33724111, "retrieval_score": 17.225851}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 33724111, "retrieval_score": 16.215618}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 33724111, "retrieval_score": 14.785275}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641, "for": 33724111, "retrieval_score": 13.282817}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675, "for": 33724111, "retrieval_score": 12.950443}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10973614, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 10973614, "retrieval_score": 9.314677}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 10973614, "retrieval_score": 7.002801}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 10973614, "retrieval_score": 4.6813893}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 10973614, "retrieval_score": 4.6813893}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10973614, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 10973614, "retrieval_score": 9.314677}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 10973614, "retrieval_score": 7.002801}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 10973614, "retrieval_score": 4.6813893}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 10973614, "retrieval_score": 4.6813893}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269, "for": 2527892, "retrieval_score": 7.289562}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869, "for": 2527892, "retrieval_score": 6.3532634}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885, "for": 2527892, "retrieval_score": 6.3532634}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902, "for": 2527892, "retrieval_score": 6.3532634}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906, "for": 2527892, "retrieval_score": 6.3532634}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 14411633, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 14411633, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 14411633, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 14411633, "retrieval_score": 13.223902}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 14411633, "retrieval_score": 13.223902}
{"snippet": "dialog.line(name, x, y, width, height)", "intent": "Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.", "question_id": 6139, "for": 17812978, "retrieval_score": 10.716825}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133, "for": 17812978, "retrieval_score": 9.747687}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138, "for": 17812978, "retrieval_score": 9.747687}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 17812978, "retrieval_score": 9.029783}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 17812978, "retrieval_score": 9.029783}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063, "for": 11709079, "retrieval_score": 21.070179}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286, "for": 11709079, "retrieval_score": 21.070179}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547, "for": 11709079, "retrieval_score": 21.070179}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066, "for": 11709079, "retrieval_score": 16.417953}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068, "for": 11709079, "retrieval_score": 16.417953}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 11709079, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 11709079, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 11709079, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 11709079, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 11709079, "retrieval_score": 6.1015863}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 17109608, "retrieval_score": 7.002801}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 17109608, "retrieval_score": 6.025233}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 17109608, "retrieval_score": 5.6103325}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423, "for": 17109608, "retrieval_score": 5.6103325}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 17109608, "retrieval_score": 5.27751}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117, "for": 265960, "retrieval_score": 6.466735}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 265960, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 265960, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 265960, "retrieval_score": 5.933986}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127, "for": 265960, "retrieval_score": 5.6642227}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710, "for": 2229827, "retrieval_score": 13.167707}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 2229827, "retrieval_score": 10.597315}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711, "for": 2229827, "retrieval_score": 10.260323}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712, "for": 2229827, "retrieval_score": 10.260323}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713, "for": 2229827, "retrieval_score": 8.404613}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 35427814, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 35427814, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 35427814, "retrieval_score": 13.955631}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 35427814, "retrieval_score": 13.955631}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 35427814, "retrieval_score": 13.955631}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 5796238, "retrieval_score": 13.458756}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5796238, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5796238, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5796238, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5796238, "retrieval_score": 8.18273}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13905936, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 13905936, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 13905936, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 13905936, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 13905936, "retrieval_score": 7.3108277}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13905936, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 13905936, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13905936, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13905936, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13905936, "retrieval_score": 12.450847}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054, "for": 2582580, "retrieval_score": 9.696108}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 2582580, "retrieval_score": 9.029783}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355, "for": 2582580, "retrieval_score": 8.322354}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730, "for": 2582580, "retrieval_score": 6.788617}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731, "for": 2582580, "retrieval_score": 6.788617}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375, "for": 13156395, "retrieval_score": 10.814992}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 13156395, "retrieval_score": 9.74494}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375, "for": 13156395, "retrieval_score": 10.814992}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 13156395, "retrieval_score": 9.390783}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697, "for": 12030179, "retrieval_score": 7.5568957}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616, "for": 12030179, "retrieval_score": 5.681296}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659, "for": 12030179, "retrieval_score": 5.681296}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666, "for": 12030179, "retrieval_score": 5.681296}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427, "for": 12030179, "retrieval_score": 5.681296}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267, "for": 12681945, "retrieval_score": 9.79767}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 12681945, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 12681945, "retrieval_score": 9.050911}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 12681945, "retrieval_score": 8.72709}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 12681945, "retrieval_score": 8.72709}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 11040626, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 11040626, "retrieval_score": 8.514181}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11040626, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 11040626, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 11040626, "retrieval_score": 8.18273}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 18.163029}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 3294889, "retrieval_score": 15.967229}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 15.909023}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 3294889, "retrieval_score": 13.45779}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 3294889, "retrieval_score": 11.551079}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 18.163029}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 3294889, "retrieval_score": 15.967229}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 15.909023}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 3294889, "retrieval_score": 13.45779}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 11.943216}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484, "for": 3294889, "retrieval_score": 10.524326}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 11.943216}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 3294889, "retrieval_score": 11.157139}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 3294889, "retrieval_score": 8.18273}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 3294889, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 3294889, "retrieval_score": 8.18273}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 11.943216}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 3294889, "retrieval_score": 11.157139}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 11.943216}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484, "for": 3294889, "retrieval_score": 10.524326}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 3294889, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 3294889, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3294889, "retrieval_score": 11.943216}
{"snippet": "timeit.timeit(stmt='pass', number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10484, "for": 3294889, "retrieval_score": 10.524326}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3294889, "retrieval_score": 8.756195}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 18102109, "retrieval_score": 8.819389}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 18102109, "retrieval_score": 8.8023}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 18102109, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 18102109, "retrieval_score": 7.9661465}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 18102109, "retrieval_score": 7.703372}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 498106, "retrieval_score": 8.819389}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 498106, "retrieval_score": 8.8023}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755, "for": 498106, "retrieval_score": 7.703372}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 498106, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 498106, "retrieval_score": 7.289562}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 3108042, "retrieval_score": 12.278121}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 3108042, "retrieval_score": 10.754423}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 3108042, "retrieval_score": 10.275188}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 3108042, "retrieval_score": 9.567153}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 3108042, "retrieval_score": 9.050911}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6856119, "retrieval_score": 8.819389}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6856119, "retrieval_score": 8.631657}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6856119, "retrieval_score": 7.56048}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 6856119, "retrieval_score": 7.289562}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866, "for": 6856119, "retrieval_score": 7.289562}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361, "for": 251464, "retrieval_score": 9.102088}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360, "for": 251464, "retrieval_score": 7.9725313}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368, "for": 251464, "retrieval_score": 7.9725313}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359, "for": 251464, "retrieval_score": 7.0923777}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367, "for": 251464, "retrieval_score": 7.0923777}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361, "for": 251464, "retrieval_score": 9.102088}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360, "for": 251464, "retrieval_score": 7.9725313}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368, "for": 251464, "retrieval_score": 7.9725313}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359, "for": 251464, "retrieval_score": 7.0923777}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367, "for": 251464, "retrieval_score": 7.0923777}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 14859458, "retrieval_score": 12.00373}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 14859458, "retrieval_score": 12.00373}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 14859458, "retrieval_score": 12.00373}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 14859458, "retrieval_score": 12.00373}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869, "for": 14859458, "retrieval_score": 12.00373}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 40384599, "retrieval_score": 15.557482}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 40384599, "retrieval_score": 13.803625}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 40384599, "retrieval_score": 13.2869215}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692, "for": 19410585, "retrieval_score": 7.724916}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 19410585, "retrieval_score": 7.427198}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 19410585, "retrieval_score": 7.3926377}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 19410585, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726, "for": 19410585, "retrieval_score": 7.3926377}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 2375335, "retrieval_score": 8.819389}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 2375335, "retrieval_score": 7.1087627}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027, "for": 2375335, "retrieval_score": 6.4752216}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 2375335, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 2375335, "retrieval_score": 6.1015863}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2803852, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2803852, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 2803852, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 2803852, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 2803852, "retrieval_score": 8.18273}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 20078816, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 20078816, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 20078816, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 20078816, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 20078816, "retrieval_score": 6.538975}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10346336, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 10346336, "retrieval_score": 9.314677}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10346336, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10346336, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10346336, "retrieval_score": 8.779708}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 11479392, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 11479392, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 11479392, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 11479392, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 11479392, "retrieval_score": 14.046785}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 40582103, "retrieval_score": 27.394985}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 40582103, "retrieval_score": 27.394985}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 40582103, "retrieval_score": 27.394985}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 40582103, "retrieval_score": 25.94491}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 40582103, "retrieval_score": 25.94491}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 40582103, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 40582103, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 40582103, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 40582103, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 40582103, "retrieval_score": 14.046785}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 41071947, "retrieval_score": 9.221109}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 41071947, "retrieval_score": 8.227689}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 41071947, "retrieval_score": 8.227689}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 41071947, "retrieval_score": 8.227689}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 41071947, "retrieval_score": 8.227689}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 10201977, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 10201977, "retrieval_score": 4.6678467}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 10201977, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 10201977, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 10201977, "retrieval_score": 4.428973}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 6916542, "retrieval_score": 9.696108}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 6916542, "retrieval_score": 9.696108}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 794995, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 794995, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 794995, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 794995, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 794995, "retrieval_score": 15.743246}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 5801945, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 5801945, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 5801945, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 5801945, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 5801945, "retrieval_score": 6.538975}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 372102, "retrieval_score": 6.246592}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993, "for": 372102, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994, "for": 372102, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995, "for": 372102, "retrieval_score": 5.0044913}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996, "for": 372102, "retrieval_score": 4.1744294}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 1514553, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 1514553, "retrieval_score": 9.314677}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1514553, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1514553, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1514553, "retrieval_score": 8.18273}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 39821166, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 39821166, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 39821166, "retrieval_score": 8.627357}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 39821166, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 39821166, "retrieval_score": 8.322354}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 12985456, "retrieval_score": 9.029783}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 12985456, "retrieval_score": 9.029783}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 12985456, "retrieval_score": 9.029783}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 12985456, "retrieval_score": 8.212582}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006, "for": 12985456, "retrieval_score": 7.890463}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 20876077, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 20876077, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 20876077, "retrieval_score": 8.18273}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 20876077, "retrieval_score": 7.0233927}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 20876077, "retrieval_score": 7.0233927}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645, "for": 5255657, "retrieval_score": 8.819389}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 13042013, "retrieval_score": 10.994913}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 13042013, "retrieval_score": 10.994913}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 13042013, "retrieval_score": 10.994913}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 13042013, "retrieval_score": 10.994913}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 13042013, "retrieval_score": 10.994913}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687, "for": 19738169, "retrieval_score": 10.275188}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 19738169, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 19738169, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 19738169, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 19738169, "retrieval_score": 8.18273}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 15210485, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 15210485, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 15210485, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 15210485, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 15210485, "retrieval_score": 5.627493}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 41513324, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 41513324, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 41513324, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 41513324, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 41513324, "retrieval_score": 13.852022}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 26266362, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 26266362, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 20110170, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 20110170, "retrieval_score": 8.069274}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 20110170, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 20110170, "retrieval_score": 7.7504354}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 20110170, "retrieval_score": 6.926011}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 7271482, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 7271482, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 7271482, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7271482, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 7271482, "retrieval_score": 8.857946}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7271482, "retrieval_score": 20.658737}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 7271482, "retrieval_score": 18.462936}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 7271482, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7271482, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7271482, "retrieval_score": 16.36546}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7271482, "retrieval_score": 34.294083}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 7271482, "retrieval_score": 30.038235}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 7271482, "retrieval_score": 29.902481}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7271482, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7271482, "retrieval_score": 24.54819}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 1966207, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 1966207, "retrieval_score": 9.314677}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 1966207, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 1966207, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 1966207, "retrieval_score": 9.292767}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142, "for": 3945856, "retrieval_score": 10.275188}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 3945856, "retrieval_score": 9.314677}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 3945856, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 3945856, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 3945856, "retrieval_score": 8.779708}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 12324456, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 12324456, "retrieval_score": 9.8809595}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12324456, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 12324456, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 12324456, "retrieval_score": 8.857946}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3724551, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3724551, "retrieval_score": 17.51239}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 3724551, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 3724551, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 3724551, "retrieval_score": 16.36546}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 3724551, "retrieval_score": 32.73092}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 3724551, "retrieval_score": 32.73092}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 3724551, "retrieval_score": 32.73092}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 3724551, "retrieval_score": 28.09357}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 3724551, "retrieval_score": 28.09357}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696, "for": 4789021, "retrieval_score": 10.275188}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952, "for": 4789021, "retrieval_score": 8.625506}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940, "for": 4789021, "retrieval_score": 7.784379}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948, "for": 4789021, "retrieval_score": 7.784379}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814, "for": 4789021, "retrieval_score": 7.784379}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696, "for": 4789021, "retrieval_score": 10.275188}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996, "for": 4789021, "retrieval_score": 10.275188}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952, "for": 4789021, "retrieval_score": 8.625506}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 4789021, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 4789021, "retrieval_score": 7.5568957}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755, "for": 19617355, "retrieval_score": 7.703372}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027, "for": 19617355, "retrieval_score": 6.611951}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037, "for": 19617355, "retrieval_score": 6.611951}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047, "for": 19617355, "retrieval_score": 6.611951}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593, "for": 19617355, "retrieval_score": 5.791417}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 17426386, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 17426386, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 17426386, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17426386, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 17426386, "retrieval_score": 14.046785}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4605439, "retrieval_score": 27.676735}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4605439, "retrieval_score": 24.242092}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 4605439, "retrieval_score": 18.232801}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 4605439, "retrieval_score": 18.232801}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4605439, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 41313232, "retrieval_score": 34.65296}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 41313232, "retrieval_score": 31.24027}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 41313232, "retrieval_score": 31.24027}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 41313232, "retrieval_score": 24.663815}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 41313232, "retrieval_score": 19.835854}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 2191699, "retrieval_score": 19.878656}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 18816297, "retrieval_score": 35.2092}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 18816297, "retrieval_score": 21.20689}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 18816297, "retrieval_score": 21.190237}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 18816297, "retrieval_score": 21.190237}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 18816297, "retrieval_score": 21.190237}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6280978, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6280978, "retrieval_score": 20.826847}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 6280978, "retrieval_score": 20.247295}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6280978, "retrieval_score": 18.242264}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 6280978, "retrieval_score": 17.734634}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017, "for": 5280178, "retrieval_score": 17.6046}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 5280178, "retrieval_score": 16.333923}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016, "for": 5280178, "retrieval_score": 15.110364}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147, "for": 5280178, "retrieval_score": 13.235189}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015, "for": 5280178, "retrieval_score": 13.235189}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 10822635, "retrieval_score": 10.275188}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 10822635, "retrieval_score": 7.703372}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 10822635, "retrieval_score": 6.68835}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 10822635, "retrieval_score": 6.68835}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734, "for": 10822635, "retrieval_score": 6.611951}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 18742657, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 18742657, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 18742657, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 18742657, "retrieval_score": 7.098534}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 18742657, "retrieval_score": 6.7207417}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 16888888, "retrieval_score": 8.819389}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764, "for": 16888888, "retrieval_score": 5.6545753}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104, "for": 16888888, "retrieval_score": 5.5320687}
{"snippet": "ArgumentParser.print_help(file=None)", "intent": "Print a help message , including the program usage and information about the arguments registered with the ArgumentParser . If `file` is None , sys.stdout is assumed .", "question_id": 106, "for": 16888888, "retrieval_score": 5.5320687}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638, "for": 16888888, "retrieval_score": 5.5320687}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 38831808, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 38831808, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 38831808, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 38831808, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 38831808, "retrieval_score": 7.0233927}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 5508352, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 5508352, "retrieval_score": 9.800473}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 5508352, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 5508352, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 5508352, "retrieval_score": 8.253944}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 9040939, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 9040939, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 9040939, "retrieval_score": 8.779708}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9040939, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9040939, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 36518800, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 36518800, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 36518800, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 36518800, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 36518800, "retrieval_score": 14.621655}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 19779790, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 19779790, "retrieval_score": 24.967064}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 19779790, "retrieval_score": 8.819389}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205, "for": 19779790, "retrieval_score": 7.9949646}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 19779790, "retrieval_score": 6.2297034}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 22963263, "retrieval_score": 15.493557}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 22963263, "retrieval_score": 15.160545}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 22963263, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 22963263, "retrieval_score": 8.756195}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 22963263, "retrieval_score": 8.18273}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 674764, "retrieval_score": 4.428973}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 674764, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 674764, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 674764, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 674764, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 674764, "retrieval_score": 6.926011}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 674764, "retrieval_score": 5.9267936}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 674764, "retrieval_score": 7.555182}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 674764, "retrieval_score": 5.9267936}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 674764, "retrieval_score": 5.9267936}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 674764, "retrieval_score": 5.9267936}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 674764, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 674764, "retrieval_score": 5.9267936}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 17627531, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 17627531, "retrieval_score": 16.644709}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 17627531, "retrieval_score": 13.45779}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 17627531, "retrieval_score": 12.350708}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 17627531, "retrieval_score": 12.350708}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 27946742, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 27946742, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 27946742, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 27946742, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 27946742, "retrieval_score": 6.538975}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 27946742, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 27946742, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 27946742, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 27946742, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 27946742, "retrieval_score": 11.254986}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 8247792, "retrieval_score": 7.002801}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 8247792, "retrieval_score": 5.6103325}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423, "for": 8247792, "retrieval_score": 5.6103325}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 8247792, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 8247792, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 8247792, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 8247792, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 8247792, "retrieval_score": 5.627493}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 8247792, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 8247792, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 8247792, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 8247792, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 8247792, "retrieval_score": 11.254986}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678, "for": 32874539, "retrieval_score": 9.4557085}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560, "for": 32874539, "retrieval_score": 8.579352}
{"snippet": "raw_config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1590, "for": 32874539, "retrieval_score": 8.579352}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271, "for": 32874539, "retrieval_score": 7.871623}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278, "for": 32874539, "retrieval_score": 7.871623}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4706499, "retrieval_score": 7.2568364}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 4706499, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 4706499, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 4706499, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 4706499, "retrieval_score": 6.7207417}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 4706499, "retrieval_score": 12.7647295}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 4706499, "retrieval_score": 12.7647295}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 4706499, "retrieval_score": 12.7647295}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 4706499, "retrieval_score": 12.7647295}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 4706499, "retrieval_score": 12.7647295}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 4706499, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 4706499, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 4706499, "retrieval_score": 7.3884673}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4706499, "retrieval_score": 7.2568364}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 4706499, "retrieval_score": 6.3823647}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 4706499, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 4706499, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 4706499, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 4706499, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 4706499, "retrieval_score": 8.253944}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18312447, "retrieval_score": 24.87165}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 18312447, "retrieval_score": 24.87165}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 18312447, "retrieval_score": 24.87165}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18312447, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18312447, "retrieval_score": 24.54819}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 13128565, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 13128565, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 13128565, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 13128565, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 13128565, "retrieval_score": 11.254986}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367, "for": 1196074, "retrieval_score": 7.7013187}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 1196074, "retrieval_score": 7.7013187}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052, "for": 1196074, "retrieval_score": 7.7013187}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793, "for": 1196074, "retrieval_score": 7.7013187}
{"snippet": "zipfile.PyZipFile(file, mode='r')", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "question_id": 12847, "for": 1196074, "retrieval_score": 7.7013187}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8303993, "retrieval_score": 27.682129}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8303993, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8303993, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8303993, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8303993, "retrieval_score": 24.54819}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 311627, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 311627, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 311627, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 311627, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 311627, "retrieval_score": 13.09412}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 311627, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 311627, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 311627, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 311627, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 311627, "retrieval_score": 11.469158}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 4111412, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 4111412, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 4111412, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 4111412, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 4111412, "retrieval_score": 14.046785}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 11339210, "retrieval_score": 9.050911}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 11339210, "retrieval_score": 8.819389}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11339210, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 11339210, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 11339210, "retrieval_score": 8.18273}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 647515, "retrieval_score": 8.819389}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964, "for": 647515, "retrieval_score": 8.612926}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754, "for": 647515, "retrieval_score": 8.612926}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 647515, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 647515, "retrieval_score": 7.703372}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287, "for": 14406214, "retrieval_score": 10.275188}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301, "for": 14406214, "retrieval_score": 8.8023}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 14406214, "retrieval_score": 8.8023}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 14406214, "retrieval_score": 8.8023}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 14406214, "retrieval_score": 8.8023}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975, "for": 14406214, "retrieval_score": 7.6277695}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984, "for": 14406214, "retrieval_score": 7.6277695}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114, "for": 14406214, "retrieval_score": 6.54706}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976, "for": 14406214, "retrieval_score": 5.734579}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977, "for": 14406214, "retrieval_score": 5.734579}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287, "for": 14406214, "retrieval_score": 10.275188}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 14406214, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 14406214, "retrieval_score": 8.514181}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975, "for": 14406214, "retrieval_score": 7.6277695}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984, "for": 14406214, "retrieval_score": 7.6277695}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 25279993, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 25279993, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 25279993, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 25279993, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 25279993, "retrieval_score": 11.469158}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 16387069, "retrieval_score": 7.2568364}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 16387069, "retrieval_score": 6.2286806}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 16387069, "retrieval_score": 7.2568364}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 16387069, "retrieval_score": 6.2286806}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 16387069, "retrieval_score": 5.4557104}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 179369, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 179369, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 179369, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 179369, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 179369, "retrieval_score": 7.703372}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 34543513, "retrieval_score": 28.673122}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 34543513, "retrieval_score": 28.673122}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 34543513, "retrieval_score": 28.673122}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 34543513, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 34543513, "retrieval_score": 24.54819}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1810743, "retrieval_score": 8.819389}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 1810743, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 1810743, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 1810743, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 1810743, "retrieval_score": 6.4322023}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1810743, "retrieval_score": 8.819389}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 1810743, "retrieval_score": 4.4333334}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 1810743, "retrieval_score": 4.4333334}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 1810743, "retrieval_score": 4.4333334}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 1810743, "retrieval_score": 4.4333334}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3159155, "retrieval_score": 23.070126}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 3159155, "retrieval_score": 20.843817}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 3159155, "retrieval_score": 20.843817}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3159155, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3159155, "retrieval_score": 18.016369}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357, "for": 2637760, "retrieval_score": 7.784379}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543, "for": 2637760, "retrieval_score": 7.784379}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229, "for": 2637760, "retrieval_score": 7.289562}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356, "for": 2637760, "retrieval_score": 6.6814804}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358, "for": 2637760, "retrieval_score": 6.6814804}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 40512124, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 40512124, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 40512124, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 40512124, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 40512124, "retrieval_score": 16.138548}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 16866261, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 16866261, "retrieval_score": 8.514181}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 16866261, "retrieval_score": 8.069274}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 16866261, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 16866261, "retrieval_score": 7.1087627}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 16866261, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 16866261, "retrieval_score": 6.926011}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 16866261, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 16866261, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 16866261, "retrieval_score": 6.266589}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142, "for": 988228, "retrieval_score": 10.275188}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 988228, "retrieval_score": 9.314677}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 988228, "retrieval_score": 7.9949646}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 988228, "retrieval_score": 7.002801}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 13793973, "retrieval_score": 8.069274}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 13793973, "retrieval_score": 7.1087627}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 13793973, "retrieval_score": 7.1087627}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 13793973, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 13793973, "retrieval_score": 7.1087627}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 10525301, "retrieval_score": 26.335415}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 10525301, "retrieval_score": 23.237347}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 10525301, "retrieval_score": 23.237347}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 10525301, "retrieval_score": 20.520645}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 10525301, "retrieval_score": 20.520645}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2407398, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2407398, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2407398, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2407398, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2407398, "retrieval_score": 14.621655}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 2407398, "retrieval_score": 10.275188}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2407398, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2407398, "retrieval_score": 8.756195}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 2407398, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 2407398, "retrieval_score": 8.253944}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 18695605, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 18695605, "retrieval_score": 8.514181}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 18695605, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 18695605, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18695605, "retrieval_score": 8.069274}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 18695605, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 18695605, "retrieval_score": 8.514181}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 18695605, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 18695605, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18695605, "retrieval_score": 8.069274}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 1534542, "retrieval_score": 10.754423}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 1534542, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 1534542, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 1534542, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 1534542, "retrieval_score": 9.801861}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 640001, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 640001, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 640001, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 640001, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 640001, "retrieval_score": 6.266589}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 29454773, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 29454773, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 29454773, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 29454773, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 29454773, "retrieval_score": 8.253944}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 14050824, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 14050824, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 14050824, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 14050824, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 14050824, "retrieval_score": 17.098473}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 11932729, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 11932729, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 11932729, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 11932729, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 11932729, "retrieval_score": 13.252438}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 4108561, "retrieval_score": 6.6814804}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 4108561, "retrieval_score": 6.246592}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 4108561, "retrieval_score": 5.8523183}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274, "for": 4108561, "retrieval_score": 5.8523183}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295, "for": 4108561, "retrieval_score": 5.8523183}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13070461, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 13070461, "retrieval_score": 14.046785}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13070461, "retrieval_score": 10.754423}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011, "for": 13070461, "retrieval_score": 10.398575}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 13070461, "retrieval_score": 10.275188}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010, "for": 13070461, "retrieval_score": 9.696108}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539, "for": 13070461, "retrieval_score": 9.652323}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13070461, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13070461, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 13070461, "retrieval_score": 14.046785}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 14538885, "retrieval_score": 10.275188}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14538885, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 14538885, "retrieval_score": 8.756195}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 14538885, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 14538885, "retrieval_score": 8.069274}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8337004, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8337004, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8337004, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8337004, "retrieval_score": 8.18273}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 8337004, "retrieval_score": 8.069274}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 3460161, "retrieval_score": 25.94491}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 3460161, "retrieval_score": 25.94491}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 3460161, "retrieval_score": 22.725183}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 3460161, "retrieval_score": 22.725183}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 3460161, "retrieval_score": 22.725183}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2168123, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 2168123, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 2168123, "retrieval_score": 7.8520374}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 2168123, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 2168123, "retrieval_score": 7.377835}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2168123, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2168123, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2168123, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2168123, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2168123, "retrieval_score": 12.450847}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 6586310, "retrieval_score": 12.065391}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 6586310, "retrieval_score": 11.126384}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 6586310, "retrieval_score": 11.126384}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 6586310, "retrieval_score": 10.733391}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 6586310, "retrieval_score": 10.020174}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 3685265, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 3685265, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 3685265, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 3685265, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 3685265, "retrieval_score": 6.7207417}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 19267591, "retrieval_score": 14.26323}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 19267591, "retrieval_score": 14.26323}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873, "for": 19267591, "retrieval_score": 14.26323}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 19267591, "retrieval_score": 12.493184}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 19267591, "retrieval_score": 12.493184}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 32032836, "retrieval_score": 7.724916}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 9560207, "retrieval_score": 9.696108}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 9560207, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 9560207, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 9560207, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 9560207, "retrieval_score": 8.896322}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 8380389, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 8380389, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 8380389, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 8380389, "retrieval_score": 7.871623}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 8380389, "retrieval_score": 7.871623}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 15863066, "retrieval_score": 8.322354}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 15863066, "retrieval_score": 7.289562}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 15863066, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 15863066, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 15863066, "retrieval_score": 5.933986}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 4830535, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 4830535, "retrieval_score": 8.322354}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 4830535, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 4830535, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 4830535, "retrieval_score": 7.871623}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4830535, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4830535, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 4830535, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4830535, "retrieval_score": 8.18273}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 4830535, "retrieval_score": 7.871623}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 952914, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 952914, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 952914, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 952914, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 952914, "retrieval_score": 13.252438}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 952914, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 952914, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 952914, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 952914, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 952914, "retrieval_score": 7.3108277}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 952914, "retrieval_score": 13.016085}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 952914, "retrieval_score": 13.016085}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 952914, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 952914, "retrieval_score": 8.756195}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 952914, "retrieval_score": 8.322354}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 3673428, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3673428, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3673428, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 3673428, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 3673428, "retrieval_score": 4.448161}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 3984539, "retrieval_score": 18.928942}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 3984539, "retrieval_score": 17.417301}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 3984539, "retrieval_score": 17.417301}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 3984539, "retrieval_score": 17.417301}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653, "for": 3984539, "retrieval_score": 17.417301}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 3984539, "retrieval_score": 14.229356}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 3984539, "retrieval_score": 13.755367}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 3984539, "retrieval_score": 13.755367}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 3984539, "retrieval_score": 13.755367}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653, "for": 3984539, "retrieval_score": 13.755367}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 19300174, "retrieval_score": 12.065391}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 19300174, "retrieval_score": 11.126384}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 19300174, "retrieval_score": 11.126384}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 19300174, "retrieval_score": 10.733391}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 19300174, "retrieval_score": 10.020174}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 13368723, "retrieval_score": 16.917507}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13368723, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13368723, "retrieval_score": 14.214895}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 13368723, "retrieval_score": 12.950443}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13368723, "retrieval_score": 12.450847}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 37584492, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 37584492, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 37584492, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 37584492, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 37584492, "retrieval_score": 14.126824}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 17027690, "retrieval_score": 10.182877}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080, "for": 17027690, "retrieval_score": 9.058704}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083, "for": 17027690, "retrieval_score": 8.158068}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084, "for": 17027690, "retrieval_score": 8.158068}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 17027690, "retrieval_score": 8.069274}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 18358938, "retrieval_score": 9.314677}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18358938, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 18358938, "retrieval_score": 8.069274}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 18358938, "retrieval_score": 7.002801}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 18358938, "retrieval_score": 6.926011}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 53513, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 53513, "retrieval_score": 7.289562}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401, "for": 53513, "retrieval_score": 9.314677}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 53513, "retrieval_score": 9.314677}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 53513, "retrieval_score": 9.314677}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748, "for": 53513, "retrieval_score": 7.4325814}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 53513, "retrieval_score": 7.3884673}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751, "for": 53513, "retrieval_score": 7.35635}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13717463, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13717463, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13717463, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13717463, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 13717463, "retrieval_score": 14.046785}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 13237941, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 13237941, "retrieval_score": 10.626398}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 13237941, "retrieval_score": 9.029783}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 13237941, "retrieval_score": 7.3926377}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13237941, "retrieval_score": 6.788617}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 13237941, "retrieval_score": 26.91558}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 13237941, "retrieval_score": 23.102158}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 13237941, "retrieval_score": 23.102158}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13237941, "retrieval_score": 23.102158}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 13237941, "retrieval_score": 20.235212}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 13237941, "retrieval_score": 12.816343}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 13237941, "retrieval_score": 11.542114}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324, "for": 13237941, "retrieval_score": 11.542114}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 13237941, "retrieval_score": 10.931729}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 13237941, "retrieval_score": 10.550122}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 37084812, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 37084812, "retrieval_score": 8.322354}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 8938449, "retrieval_score": 12.07833}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 8938449, "retrieval_score": 9.89381}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 8938449, "retrieval_score": 9.89381}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548, "for": 8938449, "retrieval_score": 9.89381}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081, "for": 8938449, "retrieval_score": 8.612926}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 37125495, "retrieval_score": 8.290173}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 37125495, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 37125495, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 37125495, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 37125495, "retrieval_score": 5.681296}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 23531030, "retrieval_score": 12.07833}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 23531030, "retrieval_score": 9.89381}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 23531030, "retrieval_score": 9.89381}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548, "for": 23531030, "retrieval_score": 9.89381}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188, "for": 23531030, "retrieval_score": 8.612926}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 4301069, "retrieval_score": 9.029783}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 4301069, "retrieval_score": 9.029783}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 4301069, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4301069, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4301069, "retrieval_score": 8.756195}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 32458541, "retrieval_score": 5.4974566}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 1874194, "retrieval_score": 20.028557}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 1874194, "retrieval_score": 17.543041}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 1874194, "retrieval_score": 15.6063175}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 1874194, "retrieval_score": 13.577234}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539, "for": 1874194, "retrieval_score": 9.652323}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 1874194, "retrieval_score": 12.278121}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 1874194, "retrieval_score": 10.754423}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539, "for": 1874194, "retrieval_score": 9.652323}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 1874194, "retrieval_score": 9.567153}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 1874194, "retrieval_score": 8.756195}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 29100599, "retrieval_score": 9.696108}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 29100599, "retrieval_score": 9.314677}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 29100599, "retrieval_score": 8.322354}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 29100599, "retrieval_score": 7.9949646}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734, "for": 29100599, "retrieval_score": 7.002801}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2621674, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2621674, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2621674, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 2621674, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 2621674, "retrieval_score": 14.046785}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 5245058, "retrieval_score": 21.190237}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 5245058, "retrieval_score": 21.190237}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 5245058, "retrieval_score": 21.190237}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 5245058, "retrieval_score": 21.190237}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 5245058, "retrieval_score": 21.190237}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 2721782, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 2721782, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 2721782, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 2721782, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 2721782, "retrieval_score": 13.09412}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 27896214, "retrieval_score": 12.022469}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 27896214, "retrieval_score": 9.475338}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309, "for": 27896214, "retrieval_score": 9.367949}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 27896214, "retrieval_score": 8.819389}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 27896214, "retrieval_score": 7.591219}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 4628618, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 4628618, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 4628618, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 4628618, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 4628618, "retrieval_score": 6.7207417}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777, "for": 12777222, "retrieval_score": 10.275188}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 12777222, "retrieval_score": 8.819389}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519, "for": 12777222, "retrieval_score": 6.611951}
{"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529, "for": 12777222, "retrieval_score": 6.611951}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546, "for": 12777222, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3457673, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3457673, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3457673, "retrieval_score": 12.450847}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 3457673, "retrieval_score": 10.275188}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 3457673, "retrieval_score": 8.857946}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8194156, "retrieval_score": 10.275188}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 8194156, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8194156, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8194156, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 8194156, "retrieval_score": 6.611951}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 5577501, "retrieval_score": 7.2253866}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946, "for": 5577501, "retrieval_score": 6.5332274}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938, "for": 5577501, "retrieval_score": 6.427716}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 5577501, "retrieval_score": 6.427716}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 5577501, "retrieval_score": 6.427716}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 5577501, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 5577501, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 5577501, "retrieval_score": 9.292767}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 5577501, "retrieval_score": 8.9242325}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 5577501, "retrieval_score": 8.779708}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4934806, "retrieval_score": 17.638779}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 4934806, "retrieval_score": 9.478593}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 4934806, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 4934806, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 4934806, "retrieval_score": 8.866667}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 15530399, "retrieval_score": 8.290173}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 15530399, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 15530399, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 15530399, "retrieval_score": 6.788617}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 15530399, "retrieval_score": 6.538975}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 21519203, "retrieval_score": 10.275188}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 16040156, "retrieval_score": 10.275188}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 16040156, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 16040156, "retrieval_score": 9.800473}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021, "for": 16040156, "retrieval_score": 8.18273}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467, "for": 16040156, "retrieval_score": 8.18273}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 40963347, "retrieval_score": 7.724916}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 40963347, "retrieval_score": 7.05434}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 40963347, "retrieval_score": 7.05434}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 40963347, "retrieval_score": 7.05434}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 40963347, "retrieval_score": 6.9778156}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 180606, "retrieval_score": 23.993229}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 180606, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 180606, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 180606, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 180606, "retrieval_score": 14.046785}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 13462365, "retrieval_score": 15.493557}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13462365, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13462365, "retrieval_score": 14.214895}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13462365, "retrieval_score": 13.635344}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13462365, "retrieval_score": 12.450847}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 13462365, "retrieval_score": 15.493557}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13462365, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13462365, "retrieval_score": 14.214895}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13462365, "retrieval_score": 13.635344}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13462365, "retrieval_score": 12.450847}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 13291539, "retrieval_score": 12.7647295}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 13291539, "retrieval_score": 12.7647295}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 13291539, "retrieval_score": 12.7647295}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 13291539, "retrieval_score": 12.7647295}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 13291539, "retrieval_score": 12.7647295}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 8777753, "retrieval_score": 9.696108}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 8777753, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 8777753, "retrieval_score": 9.335693}
{"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220, "for": 8777753, "retrieval_score": 8.8023}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261, "for": 8777753, "retrieval_score": 8.8023}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 13838405, "retrieval_score": 7.6277695}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 13838405, "retrieval_score": 7.2534}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 13838405, "retrieval_score": 6.54706}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 13838405, "retrieval_score": 6.54706}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 13838405, "retrieval_score": 6.3532634}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 3766633, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 3766633, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 3766633, "retrieval_score": 15.909074}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 3766633, "retrieval_score": 15.909074}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 3766633, "retrieval_score": 15.909074}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 39604780, "retrieval_score": 9.226346}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 39604780, "retrieval_score": 8.069274}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 39604780, "retrieval_score": 7.703372}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 39604780, "retrieval_score": 6.926011}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312, "for": 39604780, "retrieval_score": 6.611951}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 42142756, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 42142756, "retrieval_score": 8.069274}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392, "for": 42142756, "retrieval_score": 7.9949646}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234, "for": 42142756, "retrieval_score": 7.9949646}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394, "for": 42142756, "retrieval_score": 7.002801}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 28416408, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 28416408, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28416408, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 28416408, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 28416408, "retrieval_score": 8.055008}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 17608210, "retrieval_score": 20.036072}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 17608210, "retrieval_score": 19.358953}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 17608210, "retrieval_score": 19.358953}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 17608210, "retrieval_score": 19.358953}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 17608210, "retrieval_score": 19.358953}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 21414159, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 21414159, "retrieval_score": 8.069274}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 21414159, "retrieval_score": 7.2568364}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 21414159, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 21414159, "retrieval_score": 6.926011}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8654637, "retrieval_score": 27.711048}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8654637, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8654637, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8654637, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8654637, "retrieval_score": 24.207823}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8654637, "retrieval_score": 33.10782}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 8654637, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 8654637, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 8654637, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 8654637, "retrieval_score": 32.277096}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 13668393, "retrieval_score": 20.550377}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461, "for": 13668393, "retrieval_score": 19.392216}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13668393, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13668393, "retrieval_score": 14.214895}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462, "for": 13668393, "retrieval_score": 12.969613}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 10543303, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 10543303, "retrieval_score": 14.046785}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 10543303, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 10543303, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 10543303, "retrieval_score": 14.046785}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 10543303, "retrieval_score": 9.696108}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 10543303, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 10543303, "retrieval_score": 9.314677}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 10543303, "retrieval_score": 8.322354}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 10543303, "retrieval_score": 8.18273}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 12655007, "retrieval_score": 20.550377}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 12655007, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 12655007, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 12655007, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 12655007, "retrieval_score": 17.098473}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608, "for": 16249440, "retrieval_score": 30.825565}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 16249440, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 16249440, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 16249440, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 16249440, "retrieval_score": 16.882479}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955, "for": 26727314, "retrieval_score": 7.9661465}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957, "for": 26727314, "retrieval_score": 7.9661465}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448, "for": 26727314, "retrieval_score": 6.837495}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126, "for": 26727314, "retrieval_score": 6.837495}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842, "for": 26727314, "retrieval_score": 6.2286806}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 32996293, "retrieval_score": 17.848257}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 32996293, "retrieval_score": 17.848257}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 32996293, "retrieval_score": 17.848257}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 32996293, "retrieval_score": 16.462173}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 32996293, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 32996293, "retrieval_score": 28.673122}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 32996293, "retrieval_score": 28.673122}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 32996293, "retrieval_score": 28.673122}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 32996293, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 32996293, "retrieval_score": 24.54819}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4289331, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4289331, "retrieval_score": 14.252948}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 4289331, "retrieval_score": 13.635344}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 4289331, "retrieval_score": 12.354825}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 4289331, "retrieval_score": 12.354825}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18176933, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 18176933, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 18176933, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 18176933, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 18176933, "retrieval_score": 13.852022}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479, "for": 826284, "retrieval_score": 7.5807543}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 826284, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 826284, "retrieval_score": 6.4862275}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 826284, "retrieval_score": 6.3532634}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 826284, "retrieval_score": 6.3532634}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 16677816, "retrieval_score": 19.392216}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 16677816, "retrieval_score": 19.392216}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 16677816, "retrieval_score": 10.182877}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005, "for": 16677816, "retrieval_score": 9.786665}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078, "for": 16677816, "retrieval_score": 9.786665}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 28161356, "retrieval_score": 9.314677}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 28161356, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 28161356, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 28161356, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 28161356, "retrieval_score": 7.871623}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 14442636, "retrieval_score": 7.832401}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 14442636, "retrieval_score": 7.832401}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 14442636, "retrieval_score": 7.832401}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 14442636, "retrieval_score": 7.832401}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254, "for": 14442636, "retrieval_score": 7.832401}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 14442636, "retrieval_score": 14.126824}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 14442636, "retrieval_score": 14.126824}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 14442636, "retrieval_score": 14.126824}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 14442636, "retrieval_score": 14.126824}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061, "for": 14442636, "retrieval_score": 14.126824}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 2951701, "retrieval_score": 15.741625}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 2951701, "retrieval_score": 15.741625}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 2951701, "retrieval_score": 15.741625}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 2951701, "retrieval_score": 15.741625}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871, "for": 2951701, "retrieval_score": 15.741625}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 30747705, "retrieval_score": 15.255539}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 30747705, "retrieval_score": 14.229356}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 30747705, "retrieval_score": 13.167707}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 30747705, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 30747705, "retrieval_score": 13.09412}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 30747705, "retrieval_score": 15.255539}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 30747705, "retrieval_score": 14.229356}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 30747705, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 30747705, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 30747705, "retrieval_score": 11.469158}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 867866, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 867866, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 867866, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 867866, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 867866, "retrieval_score": 9.390783}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 13277440, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 13277440, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 13277440, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 13277440, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 13277440, "retrieval_score": 6.066503}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16099694, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16099694, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 16099694, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 16099694, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 16099694, "retrieval_score": 13.2869215}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13324554, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13324554, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13324554, "retrieval_score": 24.54819}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957, "for": 13324554, "retrieval_score": 22.70673}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13324554, "retrieval_score": 21.070179}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 24748445, "retrieval_score": 8.8023}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 24748445, "retrieval_score": 6.6175947}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226, "for": 24748445, "retrieval_score": 5.3017225}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227, "for": 24748445, "retrieval_score": 5.3017225}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 24748445, "retrieval_score": 4.838603}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 7142062, "retrieval_score": 8.069274}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816, "for": 7142062, "retrieval_score": 7.5042133}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 7142062, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 7142062, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 7142062, "retrieval_score": 6.066503}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825, "for": 10472907, "retrieval_score": 21.33964}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384, "for": 10472907, "retrieval_score": 17.303751}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388, "for": 10472907, "retrieval_score": 17.303751}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 10472907, "retrieval_score": 15.667322}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 10472907, "retrieval_score": 15.667322}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825, "for": 10472907, "retrieval_score": 21.33964}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384, "for": 10472907, "retrieval_score": 17.303751}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388, "for": 10472907, "retrieval_score": 17.303751}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 10472907, "retrieval_score": 15.667322}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 10472907, "retrieval_score": 15.667322}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2612802, "retrieval_score": 26.268585}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2612802, "retrieval_score": 26.268585}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2612802, "retrieval_score": 21.932484}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2612802, "retrieval_score": 21.932484}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2612802, "retrieval_score": 21.932484}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695, "for": 2612802, "retrieval_score": 15.449832}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2612802, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2612802, "retrieval_score": 14.621655}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2612802, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2612802, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2612802, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 2612802, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 2612802, "retrieval_score": 14.046785}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602, "for": 25540259, "retrieval_score": 4.1460204}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474, "for": 25540259, "retrieval_score": 3.4435937}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504, "for": 25540259, "retrieval_score": 3.4435937}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512, "for": 25540259, "retrieval_score": 3.4435937}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520, "for": 25540259, "retrieval_score": 3.4435937}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 38147259, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 38147259, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 38147259, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 38147259, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205, "for": 38147259, "retrieval_score": 10.260323}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 3061, "retrieval_score": 7.7986274}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 3061, "retrieval_score": 5.5887933}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016, "for": 3061, "retrieval_score": 5.5887933}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481, "for": 3061, "retrieval_score": 5.5887933}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492, "for": 3061, "retrieval_score": 5.5887933}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 1949318, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427, "for": 1949318, "retrieval_score": 18.19951}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428, "for": 1949318, "retrieval_score": 14.580637}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429, "for": 1949318, "retrieval_score": 14.580637}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430, "for": 1949318, "retrieval_score": 14.580637}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431, "for": 1949318, "retrieval_score": 14.580637}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86, "for": 1949318, "retrieval_score": 9.793862}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095, "for": 1949318, "retrieval_score": 9.793862}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787, "for": 1949318, "retrieval_score": 9.793862}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805, "for": 1949318, "retrieval_score": 9.793862}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243, "for": 1949318, "retrieval_score": 9.793862}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1949318, "retrieval_score": 8.069274}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 1949318, "retrieval_score": 7.1087627}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1949318, "retrieval_score": 6.926011}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 1949318, "retrieval_score": 6.1015863}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 23931444, "retrieval_score": 8.322354}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 23931444, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 23931444, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 23931444, "retrieval_score": 7.3108277}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964, "for": 23931444, "retrieval_score": 6.788617}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 17098654, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 17098654, "retrieval_score": 8.322354}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415, "for": 17098654, "retrieval_score": 7.9661465}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425, "for": 17098654, "retrieval_score": 7.9661465}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416, "for": 17098654, "retrieval_score": 5.9889717}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 40311987, "retrieval_score": 7.724916}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 40311987, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 40311987, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 40311987, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 40311987, "retrieval_score": 4.027504}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4768151, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4768151, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 4768151, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 4768151, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 4768151, "retrieval_score": 13.2869215}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916, "for": 1962795, "retrieval_score": 9.029783}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909, "for": 1962795, "retrieval_score": 7.7504354}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911, "for": 1962795, "retrieval_score": 7.7504354}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917, "for": 1962795, "retrieval_score": 7.7504354}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 1962795, "retrieval_score": 4.6678467}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 22749706, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 22749706, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 22749706, "retrieval_score": 14.214895}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 22749706, "retrieval_score": 12.605309}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 22749706, "retrieval_score": 12.605309}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613, "for": 3945750, "retrieval_score": 7.703372}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681, "for": 3945750, "retrieval_score": 7.703372}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673, "for": 3945750, "retrieval_score": 6.611951}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675, "for": 3945750, "retrieval_score": 6.611951}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677, "for": 3945750, "retrieval_score": 6.611951}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839, "for": 9336270, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 9336270, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9336270, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9336270, "retrieval_score": 8.756195}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807, "for": 9336270, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 32533944, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 32533944, "retrieval_score": 8.322354}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362, "for": 32533944, "retrieval_score": 8.18273}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478, "for": 32533944, "retrieval_score": 8.18273}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485, "for": 32533944, "retrieval_score": 8.18273}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133, "for": 8306171, "retrieval_score": 8.357346}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 8306171, "retrieval_score": 7.7986274}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132, "for": 8306171, "retrieval_score": 6.9778156}
{"snippet": "config_parser.items(vars=None)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `vars`.", "question_id": 1554, "for": 8306171, "retrieval_score": 5.989192}
{"snippet": "sysconfig.get_paths(scheme, vars)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9867, "for": 8306171, "retrieval_score": 5.989192}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 2075128, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 2075128, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 2075128, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 2075128, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 2075128, "retrieval_score": 6.066503}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8425046, "retrieval_score": 28.074646}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8425046, "retrieval_score": 20.658737}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 8425046, "retrieval_score": 19.425667}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 8425046, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8425046, "retrieval_score": 16.36546}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 8425046, "retrieval_score": 28.074646}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8425046, "retrieval_score": 23.676287}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8425046, "retrieval_score": 20.658737}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 8425046, "retrieval_score": 19.425667}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 8425046, "retrieval_score": 18.095016}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 17690738, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 17690738, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 17690738, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 17690738, "retrieval_score": 8.322354}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 17690738, "retrieval_score": 7.871623}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 29902714, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 29902714, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 29902714, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 29902714, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 29902714, "retrieval_score": 5.681296}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 3899980, "retrieval_score": 8.8023}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288, "for": 3899980, "retrieval_score": 6.511324}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291, "for": 3899980, "retrieval_score": 6.511324}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650, "for": 3899980, "retrieval_score": 6.511324}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094, "for": 3899980, "retrieval_score": 6.511324}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 18837262, "retrieval_score": 15.493557}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18837262, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18837262, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 18837262, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 18837262, "retrieval_score": 8.18273}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 21022865, "retrieval_score": 18.629354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 21022865, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 21022865, "retrieval_score": 16.138548}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 21022865, "retrieval_score": 15.449832}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 21022865, "retrieval_score": 14.005602}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4703390, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4703390, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 4703390, "retrieval_score": 16.36546}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4703390, "retrieval_score": 16.36546}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 4703390, "retrieval_score": 14.046785}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4703390, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4703390, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 4703390, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 4703390, "retrieval_score": 24.54819}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 4703390, "retrieval_score": 21.070179}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 23286254, "retrieval_score": 10.275188}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 22245171, "retrieval_score": 7.7854953}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 22245171, "retrieval_score": 7.7854953}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 22245171, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 22245171, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 22245171, "retrieval_score": 7.098534}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 10895028, "retrieval_score": 10.209561}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 10895028, "retrieval_score": 10.209561}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 10895028, "retrieval_score": 10.209561}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945, "for": 10895028, "retrieval_score": 9.082443}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 10895028, "retrieval_score": 8.253944}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 15014276, "retrieval_score": 19.425667}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 15014276, "retrieval_score": 17.281105}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 15014276, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 15014276, "retrieval_score": 13.635344}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739, "for": 15014276, "retrieval_score": 11.987505}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 32722143, "retrieval_score": 8.8023}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755, "for": 32722143, "retrieval_score": 7.703372}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223, "for": 32722143, "retrieval_score": 6.6175947}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027, "for": 32722143, "retrieval_score": 6.611951}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037, "for": 32722143, "retrieval_score": 6.611951}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 14661701, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 14661701, "retrieval_score": 8.069274}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 14661701, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 14661701, "retrieval_score": 7.7504354}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 14661701, "retrieval_score": 7.05434}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18689823, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 18689823, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 18689823, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 18689823, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 18689823, "retrieval_score": 13.2869215}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 677656, "retrieval_score": 18.059566}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 677656, "retrieval_score": 18.059566}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 677656, "retrieval_score": 18.059566}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202, "for": 677656, "retrieval_score": 13.577234}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 677656, "retrieval_score": 8.756195}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 16994696, "retrieval_score": 15.932293}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 16994696, "retrieval_score": 15.932293}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 16994696, "retrieval_score": 13.67499}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 16994696, "retrieval_score": 13.67499}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118, "for": 16994696, "retrieval_score": 11.977943}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9323749, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9323749, "retrieval_score": 17.51239}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 9323749, "retrieval_score": 16.138548}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 9323749, "retrieval_score": 16.138548}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 9323749, "retrieval_score": 16.138548}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 7768859, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 7768859, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 7768859, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 7768859, "retrieval_score": 7.098534}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 7768859, "retrieval_score": 6.611951}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 11621165, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 11621165, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 11621165, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 11621165, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 11621165, "retrieval_score": 6.926011}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 10624937, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 10624937, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 10624937, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 10624937, "retrieval_score": 8.18273}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 10624937, "retrieval_score": 7.9661465}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5180365, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 5180365, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 5180365, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 5180365, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 5180365, "retrieval_score": 6.066503}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 40660956, "retrieval_score": 12.605309}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 40660956, "retrieval_score": 12.605309}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022, "for": 40660956, "retrieval_score": 10.512679}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026, "for": 40660956, "retrieval_score": 10.512679}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030, "for": 40660956, "retrieval_score": 10.512679}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 20733827, "retrieval_score": 17.638779}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 20733827, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 20733827, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 20733827, "retrieval_score": 7.3926377}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164, "for": 20733827, "retrieval_score": 7.3926377}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 11066874, "retrieval_score": 8.322354}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 11066874, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 11066874, "retrieval_score": 6.926011}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 11066874, "retrieval_score": 6.4848065}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992, "for": 11066874, "retrieval_score": 6.246592}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 5917537, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 5917537, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 5917537, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 5917537, "retrieval_score": 7.703372}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783, "for": 5917537, "retrieval_score": 7.703372}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4859292, "retrieval_score": 15.493557}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 4859292, "retrieval_score": 8.819389}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4859292, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4859292, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4859292, "retrieval_score": 8.18273}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 113655, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 113655, "retrieval_score": 8.756195}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 113655, "retrieval_score": 8.612926}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 113655, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 113655, "retrieval_score": 8.322354}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 38862349, "retrieval_score": 20.992002}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 38862349, "retrieval_score": 20.992002}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 38862349, "retrieval_score": 20.992002}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 38862349, "retrieval_score": 16.81786}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 38862349, "retrieval_score": 16.81786}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 11264005, "retrieval_score": 32.73092}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 11264005, "retrieval_score": 32.73092}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 11264005, "retrieval_score": 32.73092}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 11264005, "retrieval_score": 32.73092}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 11264005, "retrieval_score": 28.21736}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017, "for": 1027714, "retrieval_score": 17.6046}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148, "for": 1027714, "retrieval_score": 15.77116}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016, "for": 1027714, "retrieval_score": 15.110364}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 1027714, "retrieval_score": 13.592896}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147, "for": 1027714, "retrieval_score": 13.235189}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357, "for": 17223174, "retrieval_score": 23.35314}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543, "for": 17223174, "retrieval_score": 23.35314}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356, "for": 17223174, "retrieval_score": 20.044443}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358, "for": 17223174, "retrieval_score": 20.044443}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477, "for": 17223174, "retrieval_score": 20.044443}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 10857924, "retrieval_score": 9.314677}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 10857924, "retrieval_score": 8.8023}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 10857924, "retrieval_score": 7.9949646}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734, "for": 10857924, "retrieval_score": 7.002801}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224, "for": 10857924, "retrieval_score": 6.6175947}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 12310141, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 12310141, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 12310141, "retrieval_score": 12.450847}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 12310141, "retrieval_score": 11.30871}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 12310141, "retrieval_score": 11.30871}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13168252, "retrieval_score": 24.628319}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13168252, "retrieval_score": 24.628319}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13168252, "retrieval_score": 21.57198}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 13168252, "retrieval_score": 20.899944}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 13168252, "retrieval_score": 20.899944}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 27966626, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 27966626, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 27966626, "retrieval_score": 7.8520374}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697, "for": 27966626, "retrieval_score": 7.7504354}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051, "for": 27966626, "retrieval_score": 7.7504354}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10664430, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 10664430, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 10664430, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 10664430, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 10664430, "retrieval_score": 13.09412}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 41246071, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 41246071, "retrieval_score": 7.289562}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 41246071, "retrieval_score": 6.4848065}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502, "for": 41246071, "retrieval_score": 5.311947}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 17038639, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 17038639, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 17038639, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 17038639, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 17038639, "retrieval_score": 7.3108277}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 17038639, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 17038639, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 17038639, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 17038639, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 17038639, "retrieval_score": 8.857946}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 34097281, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 34097281, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 34097281, "retrieval_score": 8.779708}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 34097281, "retrieval_score": 8.069274}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 34097281, "retrieval_score": 7.377835}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 15269161, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 15269161, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 15269161, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 15269161, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 15269161, "retrieval_score": 7.3108277}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988, "for": 18663026, "retrieval_score": 7.2389855}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990, "for": 18663026, "retrieval_score": 7.2389855}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 18663026, "retrieval_score": 6.68835}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 18663026, "retrieval_score": 6.68835}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954, "for": 18663026, "retrieval_score": 6.661109}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973, "for": 12141150, "retrieval_score": 19.133135}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055, "for": 12141150, "retrieval_score": 12.278121}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054, "for": 12141150, "retrieval_score": 10.754423}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056, "for": 12141150, "retrieval_score": 9.567153}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12141150, "retrieval_score": 8.857946}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 5858916, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 5858916, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 5858916, "retrieval_score": 18.242264}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 5858916, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 5858916, "retrieval_score": 13.223902}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 32792602, "retrieval_score": 8.322354}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 32792602, "retrieval_score": 8.069274}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 32792602, "retrieval_score": 7.3108277}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 32792602, "retrieval_score": 7.3108277}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 32792602, "retrieval_score": 7.3108277}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 42458734, "retrieval_score": 10.542535}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 42458734, "retrieval_score": 8.9242325}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 42458734, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 42458734, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 42458734, "retrieval_score": 8.8023}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 11677860, "retrieval_score": 26.524675}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 11677860, "retrieval_score": 24.761837}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 11677860, "retrieval_score": 24.761837}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 11677860, "retrieval_score": 24.761837}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 11677860, "retrieval_score": 24.761837}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 4793617, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 4793617, "retrieval_score": 16.644709}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 4793617, "retrieval_score": 8.212582}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006, "for": 4793617, "retrieval_score": 7.890463}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929, "for": 4793617, "retrieval_score": 7.305926}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 5306079, "retrieval_score": 16.264385}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 5306079, "retrieval_score": 14.00354}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 5306079, "retrieval_score": 14.00354}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 5306079, "retrieval_score": 12.941035}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 5306079, "retrieval_score": 12.082512}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 18684397, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 18684397, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 18684397, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 18684397, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 18684397, "retrieval_score": 8.18273}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5503925, "retrieval_score": 8.069274}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5503925, "retrieval_score": 8.18273}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5503925, "retrieval_score": 8.069274}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 5229425, "retrieval_score": 8.308816}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5229425, "retrieval_score": 8.069274}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 5229425, "retrieval_score": 7.131615}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480, "for": 5229425, "retrieval_score": 7.131615}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491, "for": 5229425, "retrieval_score": 7.131615}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13496087, "retrieval_score": 8.819389}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 13496087, "retrieval_score": 9.050911}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13496087, "retrieval_score": 8.819389}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 13496087, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 13496087, "retrieval_score": 8.612926}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13496087, "retrieval_score": 7.5568957}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13496087, "retrieval_score": 8.819389}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 13496087, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 13496087, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 13496087, "retrieval_score": 7.3926377}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164, "for": 13496087, "retrieval_score": 7.3926377}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13496087, "retrieval_score": 9.221109}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13496087, "retrieval_score": 8.819389}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 13496087, "retrieval_score": 8.227689}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 13496087, "retrieval_score": 8.227689}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 13496087, "retrieval_score": 8.227689}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 10996140, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 10996140, "retrieval_score": 8.069274}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697, "for": 10996140, "retrieval_score": 7.7504354}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051, "for": 10996140, "retrieval_score": 7.7504354}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 10996140, "retrieval_score": 6.926011}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 12987178, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 12987178, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12987178, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 12987178, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 12987178, "retrieval_score": 8.857946}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 510357, "retrieval_score": 8.819389}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 510357, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 510357, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 510357, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 510357, "retrieval_score": 7.703372}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 40094588, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 40094588, "retrieval_score": 6.926011}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816, "for": 40094588, "retrieval_score": 6.4579678}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111, "for": 40094588, "retrieval_score": 6.4579678}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258, "for": 40094588, "retrieval_score": 6.4579678}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 28780956, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 28780956, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 28780956, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 28780956, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 28780956, "retrieval_score": 13.07795}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 19585280, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 19585280, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 19585280, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 19585280, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 19585280, "retrieval_score": 8.857946}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 12575421, "retrieval_score": 8.290173}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 12575421, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 12575421, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 12575421, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 12575421, "retrieval_score": 8.253944}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223, "for": 30241279, "retrieval_score": 14.312858}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224, "for": 30241279, "retrieval_score": 11.466825}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225, "for": 30241279, "retrieval_score": 11.466825}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909, "for": 30241279, "retrieval_score": 10.8042755}
{"snippet": "smtplib.SMTP(host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8463, "for": 30241279, "retrieval_score": 10.8042755}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 15740236, "retrieval_score": 10.275188}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 15740236, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 15740236, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 15740236, "retrieval_score": 6.6814804}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15740236, "retrieval_score": 6.066503}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 12440342, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 12440342, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 12440342, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12440342, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 12440342, "retrieval_score": 8.857946}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 39600161, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 39600161, "retrieval_score": 5.4753366}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 39600161, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 39600161, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 39600161, "retrieval_score": 5.4753366}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 15158599, "retrieval_score": 28.074646}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 15158599, "retrieval_score": 19.425667}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 15158599, "retrieval_score": 28.074646}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 15158599, "retrieval_score": 19.425667}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 15158599, "retrieval_score": 16.138548}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 2338531, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2338531, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 2338531, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 2338531, "retrieval_score": 6.788617}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526, "for": 2338531, "retrieval_score": 5.4992585}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 2338531, "retrieval_score": 7.2534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 2338531, "retrieval_score": 6.3532634}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 2338531, "retrieval_score": 6.3532634}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 2338531, "retrieval_score": 5.6518736}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 2338531, "retrieval_score": 5.627493}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 2338531, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 2338531, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 2338531, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 2338531, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 2338531, "retrieval_score": 8.857946}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 23668427, "retrieval_score": 7.832401}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 23668427, "retrieval_score": 7.832401}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 23668427, "retrieval_score": 7.832401}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 23668427, "retrieval_score": 7.832401}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254, "for": 23668427, "retrieval_score": 7.832401}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865, "for": 439115, "retrieval_score": 20.550377}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 439115, "retrieval_score": 8.819389}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238, "for": 439115, "retrieval_score": 6.6175947}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245, "for": 439115, "retrieval_score": 6.6175947}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481, "for": 439115, "retrieval_score": 6.6175947}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 3207219, "retrieval_score": 19.147097}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 3207219, "retrieval_score": 19.147097}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 3207219, "retrieval_score": 19.147097}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 3207219, "retrieval_score": 19.147097}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 3207219, "retrieval_score": 19.147097}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512, "for": 3207219, "retrieval_score": 16.901407}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957, "for": 3207219, "retrieval_score": 16.901407}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691, "for": 3207219, "retrieval_score": 16.901407}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 3207219, "retrieval_score": 12.7647295}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 3207219, "retrieval_score": 12.7647295}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3207219, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3207219, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 3207219, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 3207219, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 3207219, "retrieval_score": 6.066503}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3207219, "retrieval_score": 8.819389}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 8134602, "retrieval_score": 50.647438}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 8134602, "retrieval_score": 50.647438}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 8134602, "retrieval_score": 50.647438}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 8134602, "retrieval_score": 50.647438}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 8134602, "retrieval_score": 50.647438}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 24958010, "retrieval_score": 34.24179}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 24958010, "retrieval_score": 32.190643}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 24958010, "retrieval_score": 29.992435}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 24958010, "retrieval_score": 27.62984}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 24958010, "retrieval_score": 27.62984}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 24958010, "retrieval_score": 24.911064}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 24958010, "retrieval_score": 22.690716}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 24958010, "retrieval_score": 19.874828}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 24958010, "retrieval_score": 18.732853}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 24958010, "retrieval_score": 17.887672}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 24958010, "retrieval_score": 24.911064}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 24958010, "retrieval_score": 22.690716}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 24958010, "retrieval_score": 19.874828}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 24958010, "retrieval_score": 18.732853}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 24958010, "retrieval_score": 17.887672}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6376886, "retrieval_score": 10.413424}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6376886, "retrieval_score": 10.413424}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6376886, "retrieval_score": 9.121132}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 6376886, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 6376886, "retrieval_score": 8.612926}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 4135344, "retrieval_score": 20.288464}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 4135344, "retrieval_score": 20.288464}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873, "for": 4135344, "retrieval_score": 20.288464}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063, "for": 4135344, "retrieval_score": 19.066269}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 4135344, "retrieval_score": 17.770695}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 9427163, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9427163, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9427163, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9427163, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9427163, "retrieval_score": 16.36546}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 29311354, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 29311354, "retrieval_score": 7.9661465}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265, "for": 29311354, "retrieval_score": 6.837495}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348, "for": 29311354, "retrieval_score": 6.837495}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118, "for": 29311354, "retrieval_score": 5.9889717}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 26367812, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 26367812, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 26367812, "retrieval_score": 7.871623}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 26367812, "retrieval_score": 7.871623}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 26367812, "retrieval_score": 7.871623}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 1908741, "retrieval_score": 13.3767}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 1908741, "retrieval_score": 13.3767}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126, "for": 1908741, "retrieval_score": 11.481477}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707, "for": 1908741, "retrieval_score": 11.481477}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826, "for": 1908741, "retrieval_score": 10.056642}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158, "for": 15839491, "retrieval_score": 9.696108}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159, "for": 15839491, "retrieval_score": 9.696108}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 15839491, "retrieval_score": 8.8023}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697, "for": 15839491, "retrieval_score": 7.7504354}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051, "for": 15839491, "retrieval_score": 7.7504354}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 39816795, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 39816795, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 39816795, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 39816795, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 39816795, "retrieval_score": 8.253944}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 969285, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 969285, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 969285, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 969285, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 969285, "retrieval_score": 13.09412}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 12814667, "retrieval_score": 11.926105}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 12814667, "retrieval_score": 11.926105}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 12814667, "retrieval_score": 11.926105}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 12814667, "retrieval_score": 11.926105}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869, "for": 12814667, "retrieval_score": 11.926105}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 12814667, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 12814667, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 12814667, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 12814667, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 12814667, "retrieval_score": 17.098473}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365, "for": 39870642, "retrieval_score": 4.289906}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 748028, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 748028, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 748028, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 748028, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 748028, "retrieval_score": 4.1138444}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301, "for": 748028, "retrieval_score": 8.322354}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302, "for": 748028, "retrieval_score": 8.322354}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 748028, "retrieval_score": 7.131615}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 748028, "retrieval_score": 7.131615}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873, "for": 748028, "retrieval_score": 7.131615}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 8936030, "retrieval_score": 6.538975}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 15795525, "retrieval_score": 24.92645}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 15795525, "retrieval_score": 24.92645}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 15795525, "retrieval_score": 24.92645}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885, "for": 15795525, "retrieval_score": 24.92645}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886, "for": 15795525, "retrieval_score": 24.92645}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 11348347, "retrieval_score": 17.028362}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 11348347, "retrieval_score": 17.028362}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 11348347, "retrieval_score": 14.2175255}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 11348347, "retrieval_score": 14.2175255}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 11348347, "retrieval_score": 14.2175255}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 5430470, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 5430470, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 5430470, "retrieval_score": 7.3884673}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 5430470, "retrieval_score": 7.1087627}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 5430470, "retrieval_score": 7.063412}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11114358, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 11114358, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11114358, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11114358, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11114358, "retrieval_score": 13.2869215}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 13078751, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 13078751, "retrieval_score": 8.322354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 13078751, "retrieval_score": 7.724916}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 13078751, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 13078751, "retrieval_score": 4.6678467}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18789262, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18789262, "retrieval_score": 17.51239}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 18789262, "retrieval_score": 17.225851}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 18789262, "retrieval_score": 17.225851}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 18789262, "retrieval_score": 14.785275}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709, "for": 8218032, "retrieval_score": 9.029783}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113, "for": 8218032, "retrieval_score": 7.7504354}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 8218032, "retrieval_score": 7.7504354}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537, "for": 8218032, "retrieval_score": 6.788617}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 319426, "retrieval_score": 17.638779}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 319426, "retrieval_score": 16.138548}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 319426, "retrieval_score": 13.852022}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 319426, "retrieval_score": 12.133006}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 319426, "retrieval_score": 12.133006}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 319426, "retrieval_score": 17.638779}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 319426, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 319426, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 319426, "retrieval_score": 7.3884673}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477, "for": 319426, "retrieval_score": 6.3749056}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 319426, "retrieval_score": 17.638779}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391, "for": 319426, "retrieval_score": 10.561879}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5744980, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5744980, "retrieval_score": 8.069274}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 5744980, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 5744980, "retrieval_score": 7.289562}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 5744980, "retrieval_score": 7.289562}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 11303225, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 11303225, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 11303225, "retrieval_score": 9.292767}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 11303225, "retrieval_score": 8.819389}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 11303225, "retrieval_score": 8.756195}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 10716796, "retrieval_score": 9.050911}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 10716796, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10716796, "retrieval_score": 7.7504354}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 10716796, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 10716796, "retrieval_score": 7.5568957}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401, "for": 9618050, "retrieval_score": 9.314677}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 9618050, "retrieval_score": 9.314677}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894, "for": 9618050, "retrieval_score": 9.314677}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 9618050, "retrieval_score": 6.025233}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 9618050, "retrieval_score": 5.27751}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 17457793, "retrieval_score": 10.754423}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 17457793, "retrieval_score": 10.542535}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 17457793, "retrieval_score": 9.029783}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 17457793, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 17457793, "retrieval_score": 8.8023}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 2269827, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 2269827, "retrieval_score": 7.7504354}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 2269827, "retrieval_score": 6.039165}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946, "for": 2269827, "retrieval_score": 6.039165}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761, "for": 20400135, "retrieval_score": 12.083376}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763, "for": 20400135, "retrieval_score": 9.8979435}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 20400135, "retrieval_score": 8.253944}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 329886, "retrieval_score": 17.225851}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 329886, "retrieval_score": 17.225851}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 329886, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 329886, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 329886, "retrieval_score": 16.36546}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 9849192, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 9849192, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 9849192, "retrieval_score": 10.754423}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 9849192, "retrieval_score": 9.288356}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 9849192, "retrieval_score": 9.029783}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 27218543, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 27218543, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 27218543, "retrieval_score": 8.627357}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 27218543, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 27218543, "retrieval_score": 8.612926}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418, "for": 15445981, "retrieval_score": 8.322354}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 15445981, "retrieval_score": 6.8433437}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419, "for": 15445981, "retrieval_score": 6.4848065}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 15445981, "retrieval_score": 6.039165}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 15445981, "retrieval_score": 4.946905}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 11414596, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 11414596, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 11414596, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 11414596, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 11414596, "retrieval_score": 4.027504}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3437059, "retrieval_score": 13.080979}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 3437059, "retrieval_score": 13.080979}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 3437059, "retrieval_score": 7.3884673}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 3437059, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3437059, "retrieval_score": 6.611951}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 3437059, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 3437059, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 3437059, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 3437059, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 3437059, "retrieval_score": 5.4753366}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3437059, "retrieval_score": 16.138548}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3437059, "retrieval_score": 13.852022}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 3437059, "retrieval_score": 12.133006}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 3437059, "retrieval_score": 12.133006}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 3437059, "retrieval_score": 12.133006}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 36542169, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 36542169, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 36542169, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 36542169, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 36542169, "retrieval_score": 8.055008}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 23351183, "retrieval_score": 9.696108}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162, "for": 23351183, "retrieval_score": 9.696108}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 23351183, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 23351183, "retrieval_score": 6.926011}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631, "for": 23351183, "retrieval_score": 6.6814804}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441, "for": 23351183, "retrieval_score": 12.538538}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443, "for": 23351183, "retrieval_score": 12.538538}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442, "for": 23351183, "retrieval_score": 9.770071}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444, "for": 23351183, "retrieval_score": 9.770071}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 23351183, "retrieval_score": 8.069274}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 28199524, "retrieval_score": 19.392216}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 28199524, "retrieval_score": 16.644709}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 28199524, "retrieval_score": 9.314677}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28199524, "retrieval_score": 8.9242325}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 28199524, "retrieval_score": 8.857946}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 3728017, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 3728017, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 3728017, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 3728017, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 3728017, "retrieval_score": 11.756009}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 15457504, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 15457504, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 15457504, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 15457504, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 15457504, "retrieval_score": 13.07795}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4879641, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4879641, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4879641, "retrieval_score": 18.242264}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 4879641, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 4879641, "retrieval_score": 17.098473}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 32743479, "retrieval_score": 8.819389}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 36296993, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 36296993, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 36296993, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 36296993, "retrieval_score": 13.223902}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 36296993, "retrieval_score": 13.223902}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 7270321, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 7270321, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 7270321, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 7270321, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 7270321, "retrieval_score": 21.070179}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047, "for": 843277, "retrieval_score": 7.7986274}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 843277, "retrieval_score": 7.7986274}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028, "for": 843277, "retrieval_score": 12.180738}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034, "for": 843277, "retrieval_score": 10.569409}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194, "for": 843277, "retrieval_score": 9.257761}
{"snippet": "test.support.swap_item(obj, attr, new_val)", "intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "question_id": 10195, "for": 843277, "retrieval_score": 9.257761}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035, "for": 843277, "retrieval_score": 8.23572}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047, "for": 843277, "retrieval_score": 7.7986274}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 843277, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 843277, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 843277, "retrieval_score": 7.3884673}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 843277, "retrieval_score": 6.611951}
{"snippet": "timeit.timeit(stmt='pass', globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "question_id": 10485, "for": 843277, "retrieval_score": 9.322154}
{"snippet": "timeit.Timer(stmt='pass', globals=None)", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10504, "for": 843277, "retrieval_score": 9.322154}
{"snippet": "timeit.Timer(setup='pass', globals=None)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10506, "for": 843277, "retrieval_score": 9.322154}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 843277, "retrieval_score": 7.7986274}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 843277, "retrieval_score": 7.3884673}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 6243460, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 6243460, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 6243460, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 6243460, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 6243460, "retrieval_score": 17.098473}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 5384570, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 5384570, "retrieval_score": 8.322354}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 5384570, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 5384570, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 5384570, "retrieval_score": 8.18273}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18990069, "retrieval_score": 21.64973}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 18990069, "retrieval_score": 21.64973}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 18990069, "retrieval_score": 21.64973}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18990069, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18990069, "retrieval_score": 16.36546}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18990069, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18990069, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 18990069, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18990069, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 18990069, "retrieval_score": 14.046785}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18990069, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18990069, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 18990069, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18990069, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 18990069, "retrieval_score": 21.070179}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 4296249, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 4296249, "retrieval_score": 7.7504354}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 4296249, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 4296249, "retrieval_score": 6.4862275}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 4296249, "retrieval_score": 6.039165}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10406130, "retrieval_score": 13.007814}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10406130, "retrieval_score": 13.007814}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10406130, "retrieval_score": 13.007814}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 10406130, "retrieval_score": 13.844368}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 10406130, "retrieval_score": 13.844368}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10406130, "retrieval_score": 17.559416}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 10406130, "retrieval_score": 13.080979}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 10406130, "retrieval_score": 7.002801}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 10406130, "retrieval_score": 6.611951}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 10406130, "retrieval_score": 6.611951}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461, "for": 35797523, "retrieval_score": 19.392216}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 35797523, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 35797523, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 35797523, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 35797523, "retrieval_score": 13.223902}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332, "for": 6710684, "retrieval_score": 10.380584}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334, "for": 6710684, "retrieval_score": 10.380584}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 6710684, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 6710684, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 6710684, "retrieval_score": 8.627357}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 40221516, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 40221516, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 40221516, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 40221516, "retrieval_score": 16.507889}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 40221516, "retrieval_score": 16.507889}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 24659239, "retrieval_score": 19.392216}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 24659239, "retrieval_score": 14.579124}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 9039961, "retrieval_score": 10.620587}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 9039961, "retrieval_score": 10.620587}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 9039961, "retrieval_score": 10.620587}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 9039961, "retrieval_score": 10.620587}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 9039961, "retrieval_score": 10.620587}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 3252590, "retrieval_score": 27.711048}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 3252590, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 3252590, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 3252590, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 3252590, "retrieval_score": 24.207823}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 4508155, "retrieval_score": 8.069274}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 4508155, "retrieval_score": 8.069274}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 4508155, "retrieval_score": 8.069274}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 4508155, "retrieval_score": 8.069274}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 4508155, "retrieval_score": 6.926011}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3925096, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 3925096, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 3925096, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 3925096, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 3925096, "retrieval_score": 8.866667}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 2040038, "retrieval_score": 29.82325}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 2040038, "retrieval_score": 25.597864}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 2040038, "retrieval_score": 25.597864}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 2040038, "retrieval_score": 25.597864}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 2040038, "retrieval_score": 24.54819}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 8139797, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8139797, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8139797, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 8139797, "retrieval_score": 13.223902}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 8139797, "retrieval_score": 13.223902}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 18723580, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 18723580, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 18723580, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 18723580, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 18723580, "retrieval_score": 5.631149}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 26640145, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 26640145, "retrieval_score": 8.756195}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 26640145, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 26640145, "retrieval_score": 8.069274}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 26640145, "retrieval_score": 7.3108277}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 26640145, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 26640145, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 26640145, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 26640145, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 26640145, "retrieval_score": 6.926011}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 13902805, "retrieval_score": 10.275188}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13902805, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 13902805, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 13902805, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 13902805, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13902805, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 13902805, "retrieval_score": 8.756195}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 13902805, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 13902805, "retrieval_score": 8.514181}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 13902805, "retrieval_score": 7.3108277}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 13902805, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 13902805, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 13902805, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 13902805, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 13902805, "retrieval_score": 7.1087627}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 39187788, "retrieval_score": 10.275188}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 39187788, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 39187788, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 39187788, "retrieval_score": 7.8520374}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634, "for": 39187788, "retrieval_score": 7.55799}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 1299855, "retrieval_score": 13.592896}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 1299855, "retrieval_score": 11.79538}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877, "for": 1299855, "retrieval_score": 10.591631}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878, "for": 1299855, "retrieval_score": 10.591631}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879, "for": 1299855, "retrieval_score": 10.591631}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7128153, "retrieval_score": 20.247295}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 7128153, "retrieval_score": 17.734634}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 7128153, "retrieval_score": 17.225851}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 7128153, "retrieval_score": 14.785275}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 7128153, "retrieval_score": 13.223902}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238, "for": 11269575, "retrieval_score": 9.061501}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242, "for": 11269575, "retrieval_score": 9.061501}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693, "for": 11269575, "retrieval_score": 7.703372}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 11269575, "retrieval_score": 7.703372}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306, "for": 11269575, "retrieval_score": 7.422612}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 27905295, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 27905295, "retrieval_score": 7.7504354}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229, "for": 27905295, "retrieval_score": 6.511324}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089, "for": 27905295, "retrieval_score": 6.511324}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459, "for": 27905295, "retrieval_score": 6.3254023}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 31143732, "retrieval_score": 8.668978}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886, "for": 31143732, "retrieval_score": 8.308816}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1447575, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1447575, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1447575, "retrieval_score": 16.36546}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 1447575, "retrieval_score": 16.36546}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 1447575, "retrieval_score": 14.046785}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 17277100, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 17277100, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 17277100, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 17277100, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 17277100, "retrieval_score": 14.046785}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 23823206, "retrieval_score": 10.994913}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 23823206, "retrieval_score": 10.994913}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 23823206, "retrieval_score": 10.994913}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 23823206, "retrieval_score": 10.994913}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 23823206, "retrieval_score": 10.994913}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 509742, "retrieval_score": 17.638779}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964, "for": 509742, "retrieval_score": 8.612926}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754, "for": 509742, "retrieval_score": 8.612926}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438, "for": 509742, "retrieval_score": 7.3926377}
{"snippet": "mailbox.Maildir(dirname, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "question_id": 5755, "for": 509742, "retrieval_score": 6.4752216}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333, "for": 817087, "retrieval_score": 9.030213}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338, "for": 817087, "retrieval_score": 9.030213}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772, "for": 817087, "retrieval_score": 9.030213}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305, "for": 817087, "retrieval_score": 7.9095764}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677, "for": 817087, "retrieval_score": 7.9095764}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866, "for": 14745022, "retrieval_score": 7.289562}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 14745022, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 14745022, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 14745022, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 14745022, "retrieval_score": 7.098534}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116, "for": 14745022, "retrieval_score": 14.27504}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171, "for": 14745022, "retrieval_score": 14.27504}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 14745022, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 14745022, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 14745022, "retrieval_score": 14.197068}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 2587402, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2587402, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 2587402, "retrieval_score": 8.615965}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 2587402, "retrieval_score": 8.069274}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 2587402, "retrieval_score": 6.9778156}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 2587402, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 2587402, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 2587402, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 2587402, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 2587402, "retrieval_score": 17.098473}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 2587402, "retrieval_score": 18.232801}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 2587402, "retrieval_score": 18.232801}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 2587402, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 2587402, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 2587402, "retrieval_score": 11.254986}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024, "for": 19939084, "retrieval_score": 6.4752216}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023, "for": 19939084, "retrieval_score": 5.760368}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022, "for": 19939084, "retrieval_score": 5.1876597}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021, "for": 19939084, "retrieval_score": 4.718532}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020, "for": 19939084, "retrieval_score": 4.327216}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 14931769, "retrieval_score": 9.679496}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14931769, "retrieval_score": 8.9242325}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 14931769, "retrieval_score": 8.72709}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 14931769, "retrieval_score": 9.679496}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14931769, "retrieval_score": 8.9242325}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 14931769, "retrieval_score": 8.72709}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 14931769, "retrieval_score": 49.958702}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 14931769, "retrieval_score": 28.55381}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 14931769, "retrieval_score": 28.55381}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 14931769, "retrieval_score": 28.55381}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 14931769, "retrieval_score": 27.438797}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261, "for": 14931769, "retrieval_score": 9.679496}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14931769, "retrieval_score": 8.9242325}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 14931769, "retrieval_score": 8.756195}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 14931769, "retrieval_score": 7.8520374}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 20025882, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 20025882, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 20025882, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 20025882, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 20025882, "retrieval_score": 11.853587}
{"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863, "for": 2553354, "retrieval_score": 14.078575}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131, "for": 2553354, "retrieval_score": 13.791815}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862, "for": 2553354, "retrieval_score": 12.524323}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 2553354, "retrieval_score": 11.748602}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 2553354, "retrieval_score": 11.748602}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 16734590, "retrieval_score": 24.130781}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 16734590, "retrieval_score": 21.466782}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 16734590, "retrieval_score": 19.835854}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16734590, "retrieval_score": 19.835854}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 16734590, "retrieval_score": 19.835854}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 575819, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 575819, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 575819, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 575819, "retrieval_score": 18.57447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 575819, "retrieval_score": 16.36546}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 29422691, "retrieval_score": 23.070126}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 29422691, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 29422691, "retrieval_score": 18.016369}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 29422691, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 29422691, "retrieval_score": 13.2869215}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 12897374, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 12897374, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 12897374, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 12897374, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 12897374, "retrieval_score": 7.3108277}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 12897374, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 12897374, "retrieval_score": 10.733391}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 12897374, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 12897374, "retrieval_score": 8.514181}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 12897374, "retrieval_score": 8.253944}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193, "for": 15571267, "retrieval_score": 5.222019}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378, "for": 15571267, "retrieval_score": 5.222019}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380, "for": 15571267, "retrieval_score": 5.222019}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599, "for": 15571267, "retrieval_score": 4.573974}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 15571267, "retrieval_score": 4.573974}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 7253803, "retrieval_score": 5.4974566}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 7253803, "retrieval_score": 5.4974566}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 7253803, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 7253803, "retrieval_score": 5.4974566}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 7253803, "retrieval_score": 5.4974566}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 7253803, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 7253803, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 7253803, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 7253803, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 7253803, "retrieval_score": 8.055008}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 13223737, "retrieval_score": 13.36706}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 13223737, "retrieval_score": 13.157029}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 13223737, "retrieval_score": 12.395496}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 13223737, "retrieval_score": 11.79538}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071, "for": 13223737, "retrieval_score": 10.540827}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 5501641, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 5501641, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 5501641, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 5501641, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 5501641, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 33711985, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 33711985, "retrieval_score": 8.756195}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 33711985, "retrieval_score": 8.407638}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 33711985, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 33711985, "retrieval_score": 7.3108277}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11351874, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 11351874, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11351874, "retrieval_score": 18.242264}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 11351874, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 11351874, "retrieval_score": 17.098473}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11351874, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 11351874, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11351874, "retrieval_score": 18.242264}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 11351874, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 11351874, "retrieval_score": 17.098473}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 962619, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 962619, "retrieval_score": 7.9949646}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 962619, "retrieval_score": 6.926011}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166, "for": 962619, "retrieval_score": 6.2297034}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189, "for": 962619, "retrieval_score": 6.2297034}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 20796355, "retrieval_score": 8.819389}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 20796355, "retrieval_score": 8.819389}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188, "for": 20796355, "retrieval_score": 8.612926}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191, "for": 20796355, "retrieval_score": 7.3926377}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194, "for": 20796355, "retrieval_score": 7.3926377}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691, "for": 20796355, "retrieval_score": 7.3926377}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 20796355, "retrieval_score": 8.819389}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 974678, "retrieval_score": 40.853745}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 974678, "retrieval_score": 35.78385}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 974678, "retrieval_score": 32.190643}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 974678, "retrieval_score": 27.62984}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 974678, "retrieval_score": 27.62984}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603, "for": 17618981, "retrieval_score": 9.559011}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164, "for": 17618981, "retrieval_score": 7.939506}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165, "for": 17618981, "retrieval_score": 7.939506}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079, "for": 17618981, "retrieval_score": 7.3371043}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 17618981, "retrieval_score": 7.2534}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4004550, "retrieval_score": 19.045078}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 4004550, "retrieval_score": 17.660248}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4004550, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4004550, "retrieval_score": 14.214895}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 4004550, "retrieval_score": 10.542535}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 4004550, "retrieval_score": 10.542535}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 4004550, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 4004550, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 4004550, "retrieval_score": 8.8023}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 4004550, "retrieval_score": 6.837495}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 10839719, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 10839719, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 10839719, "retrieval_score": 8.779708}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065, "for": 10839719, "retrieval_score": 8.290298}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 10839719, "retrieval_score": 7.377835}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 1450393, "retrieval_score": 8.407638}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 1450393, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 1450393, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 1450393, "retrieval_score": 7.3884673}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 1450393, "retrieval_score": 7.063412}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 1450393, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 1450393, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 1450393, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 1450393, "retrieval_score": 7.703372}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783, "for": 1450393, "retrieval_score": 7.703372}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8214932, "retrieval_score": 15.493557}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8214932, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 8214932, "retrieval_score": 11.943216}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 8214932, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8214932, "retrieval_score": 8.756195}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8214932, "retrieval_score": 16.491547}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8214932, "retrieval_score": 13.635344}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 8214932, "retrieval_score": 11.943216}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 8214932, "retrieval_score": 9.314677}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 8214932, "retrieval_score": 8.308816}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127, "for": 12557612, "retrieval_score": 11.15621}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 12557612, "retrieval_score": 9.908409}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 12557612, "retrieval_score": 9.314677}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183, "for": 12557612, "retrieval_score": 8.67879}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158, "for": 12557612, "retrieval_score": 7.3926377}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 15183084, "retrieval_score": 10.275188}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 15183084, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 15183084, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 15183084, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 15183084, "retrieval_score": 8.549236}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 10915391, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 10915391, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 10915391, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 10915391, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 10915391, "retrieval_score": 14.046785}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 10915391, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 10915391, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 10915391, "retrieval_score": 10.754423}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 10915391, "retrieval_score": 9.314677}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 10915391, "retrieval_score": 9.288356}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 39159475, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 39159475, "retrieval_score": 8.322354}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 39159475, "retrieval_score": 7.6829867}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988, "for": 39159475, "retrieval_score": 7.2389855}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990, "for": 39159475, "retrieval_score": 7.2389855}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028, "for": 20585920, "retrieval_score": 6.3532634}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 20585920, "retrieval_score": 6.3532634}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032, "for": 20585920, "retrieval_score": 5.6518736}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691, "for": 20585920, "retrieval_score": 5.089952}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038, "for": 20585920, "retrieval_score": 5.089952}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 11692613, "retrieval_score": 13.252438}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126, "for": 2918362, "retrieval_score": 10.1776905}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 2918362, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 2918362, "retrieval_score": 8.322354}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 2918362, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 2918362, "retrieval_score": 6.538975}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083, "for": 2918362, "retrieval_score": 6.0314703}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 2918362, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 2918362, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 2918362, "retrieval_score": 5.933986}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 2918362, "retrieval_score": 5.4753366}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 14358567, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 14358567, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 14358567, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 14358567, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 14358567, "retrieval_score": 13.852022}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1270951, "retrieval_score": 17.638779}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 1270951, "retrieval_score": 9.077086}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 1270951, "retrieval_score": 9.077086}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 1270951, "retrieval_score": 9.077086}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 1270951, "retrieval_score": 9.077086}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 59825, "retrieval_score": 9.696108}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058, "for": 59825, "retrieval_score": 8.322354}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 59825, "retrieval_score": 8.308816}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043, "for": 59825, "retrieval_score": 8.308816}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 59825, "retrieval_score": 8.308816}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 5486725, "retrieval_score": 8.819389}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 5486725, "retrieval_score": 8.216764}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 5486725, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 5486725, "retrieval_score": 7.289562}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 5486725, "retrieval_score": 6.8604403}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 5218948, "retrieval_score": 13.09412}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862, "for": 5218948, "retrieval_score": 13.09412}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864, "for": 5218948, "retrieval_score": 13.09412}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754, "for": 5218948, "retrieval_score": 11.469158}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183, "for": 5218948, "retrieval_score": 11.469158}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 9542738, "retrieval_score": 13.007814}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 9542738, "retrieval_score": 13.007814}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 9542738, "retrieval_score": 13.007814}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 9542738, "retrieval_score": 12.050466}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 9542738, "retrieval_score": 11.282446}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10541640, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 10541640, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 10541640, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 10541640, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 10541640, "retrieval_score": 16.36546}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 7262828, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 7262828, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 7262828, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 7262828, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 7262828, "retrieval_score": 11.254986}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 6086047, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 6086047, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 6086047, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 6086047, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 6086047, "retrieval_score": 6.066503}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 41946927, "retrieval_score": 14.148284}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 41946927, "retrieval_score": 14.148284}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 41946927, "retrieval_score": 14.148284}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 41946927, "retrieval_score": 11.334974}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 41946927, "retrieval_score": 11.334974}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 21164910, "retrieval_score": 10.275188}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 21164910, "retrieval_score": 9.221109}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 21164910, "retrieval_score": 8.227689}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 21164910, "retrieval_score": 8.227689}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 21164910, "retrieval_score": 8.227689}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 20183069, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 20183069, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 20183069, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 20183069, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 20183069, "retrieval_score": 11.756009}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 9905471, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 9905471, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 9905471, "retrieval_score": 14.214895}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 9905471, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 9905471, "retrieval_score": 8.857946}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 9089043, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 9089043, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 9089043, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 9089043, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 9089043, "retrieval_score": 19.878656}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3820312, "retrieval_score": 23.875263}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3820312, "retrieval_score": 20.912376}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 3820312, "retrieval_score": 14.359954}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3820312, "retrieval_score": 14.214895}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 3820312, "retrieval_score": 11.254986}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17407691, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 17407691, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 17407691, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 17407691, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 17407691, "retrieval_score": 7.0233927}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 8369219, "retrieval_score": 9.74494}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 8369219, "retrieval_score": 8.819389}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877, "for": 8369219, "retrieval_score": 8.669114}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 8369219, "retrieval_score": 7.807212}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071, "for": 8369219, "retrieval_score": 7.807212}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 33680914, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 33680914, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 33680914, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 33680914, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 33680914, "retrieval_score": 8.253944}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 3277503, "retrieval_score": 12.7647295}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 3277503, "retrieval_score": 18.629354}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 3277503, "retrieval_score": 18.629354}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 3277503, "retrieval_score": 14.126824}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 17134716, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 17134716, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 17134716, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 17134716, "retrieval_score": 8.322354}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 41251391, "retrieval_score": 27.270687}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 41251391, "retrieval_score": 23.886433}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 41251391, "retrieval_score": 23.676287}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 41251391, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 41251391, "retrieval_score": 16.36546}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740, "for": 7173850, "retrieval_score": 9.314677}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 7173850, "retrieval_score": 8.407638}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 7173850, "retrieval_score": 8.069274}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390, "for": 7173850, "retrieval_score": 7.9949646}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 7173850, "retrieval_score": 7.019806}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 41386443, "retrieval_score": 8.819389}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496, "for": 41386443, "retrieval_score": 8.18273}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815, "for": 41386443, "retrieval_score": 7.0233927}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259, "for": 41386443, "retrieval_score": 7.0233927}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223, "for": 41386443, "retrieval_score": 6.8982306}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 34962104, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 34962104, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 34962104, "retrieval_score": 15.909074}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 34962104, "retrieval_score": 15.909074}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 34962104, "retrieval_score": 15.909074}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 30015665, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 30015665, "retrieval_score": 7.289562}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 17474211, "retrieval_score": 17.660248}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 17474211, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 17474211, "retrieval_score": 15.909074}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 17474211, "retrieval_score": 15.909074}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 17474211, "retrieval_score": 15.909074}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 6633678, "retrieval_score": 8.322354}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 6633678, "retrieval_score": 7.289562}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 6633678, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 6633678, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 6633678, "retrieval_score": 5.627493}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114, "for": 12345387, "retrieval_score": 9.052468}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115, "for": 12345387, "retrieval_score": 7.5509944}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116, "for": 12345387, "retrieval_score": 7.5509944}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117, "for": 12345387, "retrieval_score": 7.5509944}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118, "for": 12345387, "retrieval_score": 7.5509944}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 903853, "retrieval_score": 19.392216}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 903853, "retrieval_score": 19.392216}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 903853, "retrieval_score": 19.392216}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 903853, "retrieval_score": 19.392216}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 903853, "retrieval_score": 6.611951}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 9758959, "retrieval_score": 12.970858}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 9758959, "retrieval_score": 10.754423}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9758959, "retrieval_score": 9.050911}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 9758959, "retrieval_score": 9.029783}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 9758959, "retrieval_score": 8.779708}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3328012, "retrieval_score": 17.638779}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 3328012, "retrieval_score": 16.433529}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 3328012, "retrieval_score": 13.7208805}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 3328012, "retrieval_score": 13.7208805}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040, "for": 3328012, "retrieval_score": 11.776893}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 8122079, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8122079, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8122079, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 8122079, "retrieval_score": 13.223902}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 8122079, "retrieval_score": 13.223902}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 19961490, "retrieval_score": 16.617632}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 19961490, "retrieval_score": 14.26323}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480, "for": 19961490, "retrieval_score": 14.26323}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491, "for": 19961490, "retrieval_score": 14.26323}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508, "for": 19961490, "retrieval_score": 14.26323}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 27589325, "retrieval_score": 6.266589}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 4287209, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 4287209, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 4287209, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 4287209, "retrieval_score": 16.138548}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898, "for": 4287209, "retrieval_score": 15.660703}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 4287209, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 4287209, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 4287209, "retrieval_score": 12.340725}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 4287209, "retrieval_score": 10.754423}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 4287209, "retrieval_score": 9.208992}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 27659153, "retrieval_score": 15.110364}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 27659153, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 27659153, "retrieval_score": 14.214895}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 27659153, "retrieval_score": 13.235189}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 27659153, "retrieval_score": 13.235189}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 27659153, "retrieval_score": 15.110364}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 27659153, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 27659153, "retrieval_score": 14.214895}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 27659153, "retrieval_score": 13.235189}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 27659153, "retrieval_score": 13.235189}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 4618373, "retrieval_score": 6.039165}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 4618373, "retrieval_score": 4.946905}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 4618373, "retrieval_score": 4.946905}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548, "for": 4618373, "retrieval_score": 4.946905}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14043080, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14043080, "retrieval_score": 24.967064}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 14043080, "retrieval_score": 8.819389}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920, "for": 14043080, "retrieval_score": 6.202405}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922, "for": 14043080, "retrieval_score": 6.202405}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 33435418, "retrieval_score": 25.94491}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 33435418, "retrieval_score": 25.94491}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 33435418, "retrieval_score": 23.858871}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 33435418, "retrieval_score": 23.858871}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 33435418, "retrieval_score": 23.858871}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 3662142, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 3662142, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 3662142, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 3662142, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 3662142, "retrieval_score": 6.266589}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 200738, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 200738, "retrieval_score": 7.7504354}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 200738, "retrieval_score": 6.6814804}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 200738, "retrieval_score": 6.039165}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946, "for": 200738, "retrieval_score": 6.039165}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 10040143, "retrieval_score": 8.069274}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 10040143, "retrieval_score": 7.6829867}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 10040143, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 10040143, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 10040143, "retrieval_score": 7.5568957}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 11924135, "retrieval_score": 7.063412}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 11924135, "retrieval_score": 7.063412}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 11924135, "retrieval_score": 7.063412}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 11924135, "retrieval_score": 7.063412}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061, "for": 11924135, "retrieval_score": 7.063412}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 11924135, "retrieval_score": 9.029783}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 11924135, "retrieval_score": 8.473424}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582, "for": 11924135, "retrieval_score": 8.443655}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589, "for": 11924135, "retrieval_score": 8.443655}
{"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398, "for": 11924135, "retrieval_score": 8.443655}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4915920, "retrieval_score": 23.070126}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4915920, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4915920, "retrieval_score": 18.016369}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4915920, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4915920, "retrieval_score": 17.51239}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 70797, "retrieval_score": 9.029783}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 70797, "retrieval_score": 9.029783}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 70797, "retrieval_score": 8.407638}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 70797, "retrieval_score": 7.7504354}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 70797, "retrieval_score": 7.7504354}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 4641765, "retrieval_score": 7.002801}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028, "for": 4641765, "retrieval_score": 6.3532634}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 4641765, "retrieval_score": 6.3532634}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032, "for": 4641765, "retrieval_score": 5.6518736}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 4641765, "retrieval_score": 5.6103325}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028, "for": 4641765, "retrieval_score": 6.3532634}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 4641765, "retrieval_score": 6.3532634}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032, "for": 4641765, "retrieval_score": 5.6518736}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418, "for": 4641765, "retrieval_score": 5.5569787}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426, "for": 4641765, "retrieval_score": 5.5569787}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 4641765, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 4641765, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 4641765, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 4641765, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 4641765, "retrieval_score": 5.681296}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 11837979, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 11837979, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 11837979, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 11837979, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 11837979, "retrieval_score": 6.7207417}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 1720421, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 1720421, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 1720421, "retrieval_score": 7.3884673}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 1720421, "retrieval_score": 6.626219}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 1720421, "retrieval_score": 6.626219}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920, "for": 22086116, "retrieval_score": 6.202405}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922, "for": 22086116, "retrieval_score": 6.202405}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924, "for": 22086116, "retrieval_score": 6.202405}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987, "for": 22086116, "retrieval_score": 6.202405}
{"snippet": "calendar.prcal(year)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) .", "question_id": 1001, "for": 22086116, "retrieval_score": 6.202405}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 19095796, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 19095796, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 19095796, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 19095796, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 19095796, "retrieval_score": 6.066503}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 17097236, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 17097236, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 17097236, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 17097236, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 17097236, "retrieval_score": 5.631149}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625, "for": 13411544, "retrieval_score": 7.2534}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632, "for": 13411544, "retrieval_score": 7.2534}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621, "for": 13411544, "retrieval_score": 6.3532634}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659, "for": 13411544, "retrieval_score": 6.3532634}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626, "for": 13411544, "retrieval_score": 5.6518736}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13411544, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 13411544, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 13411544, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 13411544, "retrieval_score": 10.32076}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 13411544, "retrieval_score": 9.880573}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 13411544, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 13411544, "retrieval_score": 7.7504354}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625, "for": 13411544, "retrieval_score": 7.2534}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632, "for": 13411544, "retrieval_score": 7.2534}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621, "for": 13411544, "retrieval_score": 6.3532634}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845, "for": 10750802, "retrieval_score": 7.168575}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842, "for": 10750802, "retrieval_score": 6.2286806}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616, "for": 10750802, "retrieval_score": 6.2286806}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803, "for": 10750802, "retrieval_score": 5.4557104}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397, "for": 10750802, "retrieval_score": 5.4557104}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 35711059, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 35711059, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 35711059, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 35711059, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 35711059, "retrieval_score": 16.36546}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696, "for": 14734533, "retrieval_score": 10.275188}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 14734533, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 14734533, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 14734533, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 14734533, "retrieval_score": 8.253944}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 517355, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 517355, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 517355, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 517355, "retrieval_score": 16.882479}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 517355, "retrieval_score": 16.882479}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 517355, "retrieval_score": 14.75567}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 517355, "retrieval_score": 14.75567}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 517355, "retrieval_score": 14.75567}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 517355, "retrieval_score": 13.331309}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 517355, "retrieval_score": 13.331309}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 17106819, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 17106819, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 17106819, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 17106819, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 17106819, "retrieval_score": 16.138548}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254, "for": 18724607, "retrieval_score": 20.287468}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255, "for": 18724607, "retrieval_score": 20.287468}
{"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256, "for": 18724607, "retrieval_score": 20.287468}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248, "for": 18724607, "retrieval_score": 19.922426}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249, "for": 18724607, "retrieval_score": 19.922426}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 22397058, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 22397058, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 22397058, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 22397058, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 22397058, "retrieval_score": 4.6678467}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908, "for": 22397058, "retrieval_score": 13.277027}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896, "for": 22397058, "retrieval_score": 11.629367}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898, "for": 22397058, "retrieval_score": 11.629367}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913, "for": 22397058, "retrieval_score": 10.345505}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914, "for": 22397058, "retrieval_score": 10.345505}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 19121722, "retrieval_score": 20.195007}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 19121722, "retrieval_score": 20.195007}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 19121722, "retrieval_score": 17.999207}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 19121722, "retrieval_score": 17.999207}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132, "for": 19121722, "retrieval_score": 17.999207}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 34527388, "retrieval_score": 9.029783}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 34527388, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 34527388, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 34527388, "retrieval_score": 9.029783}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 34527388, "retrieval_score": 8.8023}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 17604837, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 17604837, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 17604837, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 17604837, "retrieval_score": 32.277096}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 17604837, "retrieval_score": 27.704044}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029, "for": 16735786, "retrieval_score": 19.392216}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171, "for": 16735786, "retrieval_score": 16.644709}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 16735786, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 16735786, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 16735786, "retrieval_score": 8.253944}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 18938276, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 18938276, "retrieval_score": 9.800473}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18938276, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18938276, "retrieval_score": 8.756195}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021, "for": 18938276, "retrieval_score": 8.18273}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 17166601, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 17166601, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 17166601, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 17166601, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 17166601, "retrieval_score": 6.926011}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 17166601, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 17166601, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 17166601, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 17166601, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 17166601, "retrieval_score": 6.926011}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 9257094, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 9257094, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 9257094, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 9257094, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 9257094, "retrieval_score": 5.627493}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 186857, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 186857, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 186857, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 186857, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 186857, "retrieval_score": 13.252438}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492, "for": 15459217, "retrieval_score": 16.138548}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 15459217, "retrieval_score": 13.852022}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532, "for": 15459217, "retrieval_score": 13.852022}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533, "for": 15459217, "retrieval_score": 13.852022}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586, "for": 15459217, "retrieval_score": 12.133006}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392, "for": 38147447, "retrieval_score": 12.381802}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392, "for": 38147447, "retrieval_score": 12.381802}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483, "for": 38147447, "retrieval_score": 10.290231}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 17462994, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 17462994, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 17462994, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 17462994, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 17462994, "retrieval_score": 16.138548}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 15465204, "retrieval_score": 19.392216}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 15465204, "retrieval_score": 16.644709}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 15465204, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 15465204, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 15465204, "retrieval_score": 12.450847}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 14766194, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 14766194, "retrieval_score": 10.204068}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 14766194, "retrieval_score": 10.204068}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 14766194, "retrieval_score": 10.204068}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 14766194, "retrieval_score": 9.335693}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 22240602, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 22240602, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 22240602, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 22240602, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 22240602, "retrieval_score": 7.1087627}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 21205074, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 21205074, "retrieval_score": 16.681612}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 21205074, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 21205074, "retrieval_score": 16.414843}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 21205074, "retrieval_score": 14.214895}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 20230211, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 20230211, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 20230211, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864, "for": 20230211, "retrieval_score": 11.756009}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868, "for": 20230211, "retrieval_score": 11.756009}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 4940032, "retrieval_score": 8.819389}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 4940032, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 4940032, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 4940032, "retrieval_score": 7.3884673}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4940032, "retrieval_score": 7.2568364}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982, "for": 4940032, "retrieval_score": 14.445836}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5995, "for": 4940032, "retrieval_score": 14.445836}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978, "for": 4940032, "retrieval_score": 13.009599}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987, "for": 4940032, "retrieval_score": 13.009599}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 4940032, "retrieval_score": 12.7647295}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 4940032, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 4940032, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 4940032, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 4940032, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 4940032, "retrieval_score": 14.126824}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382, "for": 14431731, "retrieval_score": 35.277557}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 14431731, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 14431731, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 14431731, "retrieval_score": 13.955631}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 14431731, "retrieval_score": 13.955631}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 5106228, "retrieval_score": 13.844368}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 5106228, "retrieval_score": 13.844368}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 5106228, "retrieval_score": 13.844368}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 5106228, "retrieval_score": 13.331309}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 5106228, "retrieval_score": 13.331309}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 15390374, "retrieval_score": 20.550377}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 15390374, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 15390374, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 15390374, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 15390374, "retrieval_score": 10.260323}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 3501382, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 3501382, "retrieval_score": 11.985868}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 3501382, "retrieval_score": 9.050911}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3501382, "retrieval_score": 9.011011}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040, "for": 3501382, "retrieval_score": 8.819389}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 3501382, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 3501382, "retrieval_score": 11.985868}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 3501382, "retrieval_score": 9.050911}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3501382, "retrieval_score": 9.011011}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 3501382, "retrieval_score": 6.4862275}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193, "for": 307305, "retrieval_score": 8.819389}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770, "for": 307305, "retrieval_score": 4.289906}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797, "for": 307305, "retrieval_score": 4.289906}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802, "for": 307305, "retrieval_score": 4.289906}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225, "for": 307305, "retrieval_score": 4.289906}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 4152376, "retrieval_score": 9.696108}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 4152376, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 4152376, "retrieval_score": 8.612926}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058, "for": 4152376, "retrieval_score": 8.322354}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 4152376, "retrieval_score": 7.3926377}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4152376, "retrieval_score": 8.9242325}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4152376, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4152376, "retrieval_score": 8.756195}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 4152376, "retrieval_score": 8.72709}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 4152376, "retrieval_score": 8.72709}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 1388818, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 1388818, "retrieval_score": 8.514181}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 1388818, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 1388818, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 1388818, "retrieval_score": 8.253944}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1388818, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1388818, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1388818, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1388818, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 1388818, "retrieval_score": 21.070179}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 17757450, "retrieval_score": 8.069274}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 17757450, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 17757450, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 17757450, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 17757450, "retrieval_score": 7.098534}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 3166619, "retrieval_score": 8.9242325}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065, "for": 3166619, "retrieval_score": 8.290298}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 3166619, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 3166619, "retrieval_score": 7.8520374}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491, "for": 3166619, "retrieval_score": 7.2568364}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 10675054, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 10675054, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 10675054, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 10675054, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 10675054, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 7717380, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 7717380, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 7717380, "retrieval_score": 9.677206}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 7717380, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 7717380, "retrieval_score": 9.314677}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 13794532, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 13794532, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 13794532, "retrieval_score": 9.029783}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 13794532, "retrieval_score": 8.8023}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041, "for": 13794532, "retrieval_score": 7.7504354}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 23612271, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 23612271, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 23612271, "retrieval_score": 7.3926377}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164, "for": 23612271, "retrieval_score": 7.3926377}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 23612271, "retrieval_score": 6.611951}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 9495262, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 9495262, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 9495262, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 9495262, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 9495262, "retrieval_score": 20.778034}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1731346, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 1731346, "retrieval_score": 7.9949646}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1731346, "retrieval_score": 6.926011}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 1731346, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 1731346, "retrieval_score": 6.4862275}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880, "for": 29035168, "retrieval_score": 13.3767}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890, "for": 29035168, "retrieval_score": 13.3767}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492, "for": 29035168, "retrieval_score": 11.481477}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885, "for": 29035168, "retrieval_score": 11.481477}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916, "for": 29035168, "retrieval_score": 11.481477}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 20059427, "retrieval_score": 21.326288}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 20059427, "retrieval_score": 21.326288}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 20059427, "retrieval_score": 21.326288}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 20059427, "retrieval_score": 21.326288}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080, "for": 20059427, "retrieval_score": 19.142178}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 3996904, "retrieval_score": 6.6814804}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 3996904, "retrieval_score": 5.8523183}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274, "for": 3996904, "retrieval_score": 5.8523183}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295, "for": 3996904, "retrieval_score": 5.8523183}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878, "for": 3996904, "retrieval_score": 5.206232}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 3996904, "retrieval_score": 8.819389}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 3996904, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 3996904, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 3996904, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 3996904, "retrieval_score": 8.253944}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 3996904, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3996904, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3996904, "retrieval_score": 6.926011}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 3996904, "retrieval_score": 6.6814804}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 3996904, "retrieval_score": 6.066503}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 5864271, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 5864271, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 5864271, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 5864271, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 5864271, "retrieval_score": 21.070179}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 28664103, "retrieval_score": 24.207823}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 28664103, "retrieval_score": 24.207823}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 28664103, "retrieval_score": 20.778034}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 28664103, "retrieval_score": 20.778034}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 28664103, "retrieval_score": 20.778034}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 10666163, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 10666163, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 10666163, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 10666163, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 10666163, "retrieval_score": 13.252438}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 10666163, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 10666163, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 10666163, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 10666163, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 10666163, "retrieval_score": 13.2869215}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 16412563, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 16412563, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 16412563, "retrieval_score": 10.754423}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 16412563, "retrieval_score": 9.288356}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 16412563, "retrieval_score": 9.029783}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 10365225, "retrieval_score": 9.050911}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 10365225, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 10365225, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 10365225, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 10365225, "retrieval_score": 8.18273}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 2759323, "retrieval_score": 8.819389}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188, "for": 2759323, "retrieval_score": 8.612926}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191, "for": 2759323, "retrieval_score": 7.3926377}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194, "for": 2759323, "retrieval_score": 7.3926377}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691, "for": 2759323, "retrieval_score": 7.3926377}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 2759323, "retrieval_score": 8.819389}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 2759323, "retrieval_score": 4.4333334}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 2759323, "retrieval_score": 4.4333334}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 2759323, "retrieval_score": 4.4333334}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 2759323, "retrieval_score": 4.4333334}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 40076861, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 40076861, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 40076861, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 40076861, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 40076861, "retrieval_score": 4.027504}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 30062429, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 30062429, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 30062429, "retrieval_score": 12.450847}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 30062429, "retrieval_score": 11.926105}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 30062429, "retrieval_score": 11.926105}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 30062429, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 30062429, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 30062429, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 30062429, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 30062429, "retrieval_score": 14.046785}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 5075247, "retrieval_score": 8.405603}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 5075247, "retrieval_score": 6.898015}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 5075247, "retrieval_score": 6.898015}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 5075247, "retrieval_score": 6.898015}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653, "for": 5075247, "retrieval_score": 6.898015}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 1883604, "retrieval_score": 13.00074}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 1883604, "retrieval_score": 13.00074}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 1883604, "retrieval_score": 13.00074}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 1883604, "retrieval_score": 13.00074}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 1883604, "retrieval_score": 13.00074}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6159313, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6159313, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6159313, "retrieval_score": 18.242264}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 6159313, "retrieval_score": 16.507889}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 3939361, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 3939361, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 3939361, "retrieval_score": 7.063412}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 3939361, "retrieval_score": 7.063412}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 3939361, "retrieval_score": 7.063412}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 3939361, "retrieval_score": 9.747522}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729, "for": 3939361, "retrieval_score": 9.747522}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726, "for": 3939361, "retrieval_score": 7.103077}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730, "for": 3939361, "retrieval_score": 7.103077}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 3939361, "retrieval_score": 5.933986}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 3939361, "retrieval_score": 9.696108}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162, "for": 3939361, "retrieval_score": 9.696108}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160, "for": 3939361, "retrieval_score": 9.696108}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162, "for": 3939361, "retrieval_score": 9.696108}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 3939361, "retrieval_score": 9.677206}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 3939361, "retrieval_score": 14.126824}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 38704545, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 38704545, "retrieval_score": 9.050911}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 38704545, "retrieval_score": 7.9949646}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 38704545, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 38704545, "retrieval_score": 7.5568957}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 19672101, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 19672101, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 19672101, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 19672101, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 19672101, "retrieval_score": 7.377835}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027, "for": 13627865, "retrieval_score": 7.7986274}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 13627865, "retrieval_score": 5.5887933}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016, "for": 13627865, "retrieval_score": 5.5887933}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481, "for": 13627865, "retrieval_score": 5.5887933}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492, "for": 13627865, "retrieval_score": 5.5887933}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 199059, "retrieval_score": 33.94309}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 199059, "retrieval_score": 33.94309}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 199059, "retrieval_score": 33.94309}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 199059, "retrieval_score": 27.193691}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 199059, "retrieval_score": 24.193012}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 727507, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 727507, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 727507, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 727507, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 727507, "retrieval_score": 6.066503}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 28657018, "retrieval_score": 14.148284}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 28657018, "retrieval_score": 14.148284}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 28657018, "retrieval_score": 14.148284}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 28657018, "retrieval_score": 11.334974}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 28657018, "retrieval_score": 11.334974}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 579856, "retrieval_score": 10.275188}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 579856, "retrieval_score": 10.275188}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 579856, "retrieval_score": 9.314677}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 579856, "retrieval_score": 7.002801}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 579856, "retrieval_score": 6.596385}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 3220284, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 3220284, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 3220284, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 3220284, "retrieval_score": 16.882479}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 3220284, "retrieval_score": 16.882479}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8172861, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8172861, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8172861, "retrieval_score": 16.36546}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8172861, "retrieval_score": 16.36546}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8172861, "retrieval_score": 14.046785}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 5826427, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 5826427, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 5826427, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 5826427, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 5826427, "retrieval_score": 6.7207417}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 5826427, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 5826427, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 5826427, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 5826427, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 5826427, "retrieval_score": 6.4322023}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 13557937, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 13557937, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 13557937, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 13557937, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 13557937, "retrieval_score": 7.3108277}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13557937, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 13557937, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13557937, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13557937, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13557937, "retrieval_score": 12.450847}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 13557937, "retrieval_score": 19.133135}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 13557937, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 13557937, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13557937, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13557937, "retrieval_score": 14.214895}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 9932549, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 9932549, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 9932549, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 9932549, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 9932549, "retrieval_score": 14.621655}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 11144513, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 11144513, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 11144513, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 11144513, "retrieval_score": 8.549236}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 11144513, "retrieval_score": 8.549236}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446, "for": 16739319, "retrieval_score": 8.819389}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 16739319, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 16739319, "retrieval_score": 8.322354}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773, "for": 16739319, "retrieval_score": 7.1560035}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777, "for": 16739319, "retrieval_score": 7.1560035}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778, "for": 16739319, "retrieval_score": 7.1560035}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 21618351, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 21618351, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 21618351, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 21618351, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 21618351, "retrieval_score": 11.469158}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 17713873, "retrieval_score": 9.029783}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 17713873, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 17713873, "retrieval_score": 7.289562}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 17713873, "retrieval_score": 6.788617}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 17713873, "retrieval_score": 6.788617}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 20778951, "retrieval_score": 20.414274}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 20778951, "retrieval_score": 20.414274}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 20778951, "retrieval_score": 20.414274}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 20778951, "retrieval_score": 20.414274}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 20778951, "retrieval_score": 20.414274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 21558999, "retrieval_score": 11.453697}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 21558999, "retrieval_score": 11.453697}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 21558999, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 21558999, "retrieval_score": 8.069274}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 21558999, "retrieval_score": 6.926011}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 674509, "retrieval_score": 10.754423}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 674509, "retrieval_score": 9.696108}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 674509, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 674509, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 674509, "retrieval_score": 8.756195}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 674509, "retrieval_score": 16.491547}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 674509, "retrieval_score": 13.45779}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 674509, "retrieval_score": 11.551079}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 674509, "retrieval_score": 11.551079}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 674509, "retrieval_score": 11.551079}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 674509, "retrieval_score": 10.754423}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518, "for": 674509, "retrieval_score": 9.696108}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 674509, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 674509, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 674509, "retrieval_score": 8.857946}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 42098487, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 42098487, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 42098487, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 42098487, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 42098487, "retrieval_score": 4.6678467}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 30406725, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 30406725, "retrieval_score": 9.314677}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 30406725, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 30406725, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 30406725, "retrieval_score": 7.9949646}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 8916302, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 8916302, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 8916302, "retrieval_score": 8.627357}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 8916302, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 8916302, "retrieval_score": 8.253944}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 8372399, "retrieval_score": 11.526255}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 8372399, "retrieval_score": 11.167046}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 8372399, "retrieval_score": 11.167046}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8372399, "retrieval_score": 10.275188}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 8372399, "retrieval_score": 10.056794}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 17071871, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 17071871, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 8.188911}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 17071871, "retrieval_score": 9.314677}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625, "for": 17071871, "retrieval_score": 7.2534}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632, "for": 17071871, "retrieval_score": 7.2534}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 17071871, "retrieval_score": 7.002801}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621, "for": 17071871, "retrieval_score": 6.3532634}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661, "for": 17071871, "retrieval_score": 8.188911}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426, "for": 17071871, "retrieval_score": 7.7775}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 17071871, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 17071871, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 17071871, "retrieval_score": 6.066503}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 38273353, "retrieval_score": 13.67499}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648, "for": 38273353, "retrieval_score": 11.977943}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647, "for": 38273353, "retrieval_score": 10.655599}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414, "for": 38273353, "retrieval_score": 10.655599}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429, "for": 38273353, "retrieval_score": 9.596195}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6996603, "retrieval_score": 8.819389}
{"snippet": "shutil.rmtree(path, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8335, "for": 6996603, "retrieval_score": 10.68436}
{"snippet": "shutil.rmtree(path, ignore_errors=False, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8336, "for": 6996603, "retrieval_score": 10.64482}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454, "for": 6996603, "retrieval_score": 10.126368}
{"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456, "for": 6996603, "retrieval_score": 9.164247}
{"snippet": "os.fwalk(onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `onerror`.", "question_id": 6986, "for": 6996603, "retrieval_score": 8.392915}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6996603, "retrieval_score": 8.819389}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 6996603, "retrieval_score": 3.9162004}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 6996603, "retrieval_score": 3.9162004}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 6996603, "retrieval_score": 3.9162004}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 6996603, "retrieval_score": 3.9162004}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 19365513, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 19365513, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 19365513, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 19365513, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 19365513, "retrieval_score": 6.9778156}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014, "for": 10586778, "retrieval_score": 9.314677}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013, "for": 10586778, "retrieval_score": 7.9949646}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012, "for": 10586778, "retrieval_score": 7.002801}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 28684154, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 28684154, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 28684154, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 28684154, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 28684154, "retrieval_score": 14.621655}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 16962512, "retrieval_score": 10.542535}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 16962512, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 16962512, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 16962512, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 16962512, "retrieval_score": 9.801861}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 41154648, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 41154648, "retrieval_score": 8.322354}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 41154648, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 41154648, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 41154648, "retrieval_score": 4.1138444}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034, "for": 444058, "retrieval_score": 15.250372}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194, "for": 444058, "retrieval_score": 13.357823}
{"snippet": "test.support.swap_item(obj, attr, new_val)", "intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "question_id": 10195, "for": 444058, "retrieval_score": 13.357823}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035, "for": 444058, "retrieval_score": 11.8831415}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354, "for": 444058, "retrieval_score": 10.90728}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 35269374, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 35269374, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 35269374, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 35269374, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 35269374, "retrieval_score": 16.36546}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 9534608, "retrieval_score": 8.819389}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766, "for": 9534608, "retrieval_score": 6.266589}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798, "for": 9534608, "retrieval_score": 6.266589}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815, "for": 9534608, "retrieval_score": 6.266589}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817, "for": 9534608, "retrieval_score": 6.266589}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 432842, "retrieval_score": 18.452692}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 432842, "retrieval_score": 15.406744}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312, "for": 432842, "retrieval_score": 13.223902}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856, "for": 432842, "retrieval_score": 12.297417}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851, "for": 432842, "retrieval_score": 10.304109}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 432842, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 432842, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 432842, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 432842, "retrieval_score": 16.507889}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 432842, "retrieval_score": 16.507889}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 432842, "retrieval_score": 18.452692}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 432842, "retrieval_score": 15.406744}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312, "for": 432842, "retrieval_score": 13.223902}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856, "for": 432842, "retrieval_score": 12.297417}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851, "for": 432842, "retrieval_score": 10.304109}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 432842, "retrieval_score": 18.452692}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 432842, "retrieval_score": 15.406744}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312, "for": 432842, "retrieval_score": 13.223902}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856, "for": 432842, "retrieval_score": 12.297417}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851, "for": 432842, "retrieval_score": 10.304109}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979, "for": 432842, "retrieval_score": 18.452692}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978, "for": 432842, "retrieval_score": 15.406744}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312, "for": 432842, "retrieval_score": 13.223902}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856, "for": 432842, "retrieval_score": 12.297417}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851, "for": 432842, "retrieval_score": 10.304109}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 5048841, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 5048841, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 5048841, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 5048841, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 5048841, "retrieval_score": 7.3108277}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4697006, "retrieval_score": 22.509972}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4697006, "retrieval_score": 22.509972}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4697006, "retrieval_score": 22.509972}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4697006, "retrieval_score": 22.509972}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 4697006, "retrieval_score": 22.509972}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4697006, "retrieval_score": 22.88427}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4697006, "retrieval_score": 20.044365}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 4697006, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 4697006, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 4697006, "retrieval_score": 14.2175255}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 7974442, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 7974442, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 7974442, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 7974442, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 7974442, "retrieval_score": 17.098473}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 348196, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 348196, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 348196, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 348196, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 348196, "retrieval_score": 8.18273}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 23914774, "retrieval_score": 32.73092}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 23914774, "retrieval_score": 32.73092}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 23914774, "retrieval_score": 32.73092}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 23914774, "retrieval_score": 28.09357}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 23914774, "retrieval_score": 28.09357}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 4433017, "retrieval_score": 7.724916}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4433017, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4433017, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4433017, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4433017, "retrieval_score": 5.627493}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 20512297, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 20512297, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 20512297, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 20512297, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 20512297, "retrieval_score": 4.027504}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11850425, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11850425, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 11850425, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 11850425, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 11850425, "retrieval_score": 8.857946}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 42180455, "retrieval_score": 9.029783}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 42180455, "retrieval_score": 7.063412}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033, "for": 42180455, "retrieval_score": 7.063412}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501, "for": 42180455, "retrieval_score": 7.063412}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720, "for": 42180455, "retrieval_score": 7.063412}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 31547657, "retrieval_score": 28.00708}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 31547657, "retrieval_score": 28.00708}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 31547657, "retrieval_score": 25.88207}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 31547657, "retrieval_score": 24.165024}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 31547657, "retrieval_score": 24.165024}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 5352546, "retrieval_score": 20.778034}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 5352546, "retrieval_score": 20.778034}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 5352546, "retrieval_score": 20.778034}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 5352546, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 5352546, "retrieval_score": 20.778034}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145, "for": 16114244, "retrieval_score": 5.6150355}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171, "for": 16114244, "retrieval_score": 5.6150355}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175, "for": 16114244, "retrieval_score": 5.6150355}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304, "for": 16114244, "retrieval_score": 5.6150355}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844, "for": 16114244, "retrieval_score": 5.6150355}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295, "for": 8386675, "retrieval_score": 9.3718}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907, "for": 8386675, "retrieval_score": 8.337169}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902, "for": 8386675, "retrieval_score": 7.0471783}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699, "for": 8386675, "retrieval_score": 7.0471783}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706, "for": 8386675, "retrieval_score": 7.0471783}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 9470142, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 9470142, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 9470142, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 9470142, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 9470142, "retrieval_score": 6.266589}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 2261011, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 2261011, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737, "for": 2261011, "retrieval_score": 6.4752216}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496, "for": 2261011, "retrieval_score": 5.760368}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497, "for": 2261011, "retrieval_score": 5.760368}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664, "for": 32926587, "retrieval_score": 21.40953}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2665, "for": 32926587, "retrieval_score": 21.40953}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2666, "for": 32926587, "retrieval_score": 21.40953}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 32926587, "retrieval_score": 20.556585}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 32926587, "retrieval_score": 20.556585}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869, "for": 16127862, "retrieval_score": 20.550377}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869, "for": 16127862, "retrieval_score": 20.550377}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16127862, "retrieval_score": 13.223902}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2054416, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2054416, "retrieval_score": 16.681612}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2054416, "retrieval_score": 14.214895}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 2054416, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 2054416, "retrieval_score": 9.800473}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 15509617, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 15509617, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 15509617, "retrieval_score": 8.819389}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 15509617, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 15509617, "retrieval_score": 4.838603}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 227459, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 227459, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 227459, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 227459, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 227459, "retrieval_score": 4.448161}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 227459, "retrieval_score": 10.275188}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 227459, "retrieval_score": 10.275188}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784, "for": 28538536, "retrieval_score": 7.7504354}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802, "for": 28538536, "retrieval_score": 7.7504354}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789, "for": 28538536, "retrieval_score": 6.039165}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807, "for": 28538536, "retrieval_score": 6.039165}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378, "for": 28538536, "retrieval_score": 5.807153}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1397827, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 1397827, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 1397827, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 1397827, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 1397827, "retrieval_score": 11.254986}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 13081090, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 13081090, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 13081090, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 13081090, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 13081090, "retrieval_score": 16.36546}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 39373620, "retrieval_score": 17.225851}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 39373620, "retrieval_score": 14.785275}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675, "for": 39373620, "retrieval_score": 12.950443}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 39373620, "retrieval_score": 11.520736}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 39373620, "retrieval_score": 11.520736}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 39373620, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 39373620, "retrieval_score": 13.955631}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 39373620, "retrieval_score": 13.955631}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 39373620, "retrieval_score": 13.955631}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 39373620, "retrieval_score": 13.955631}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4965159, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 4965159, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 4965159, "retrieval_score": 7.289562}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807, "for": 4965159, "retrieval_score": 5.746236}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924, "for": 4965159, "retrieval_score": 5.746236}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 36139, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 36139, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 36139, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 36139, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 36139, "retrieval_score": 8.857946}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 36139, "retrieval_score": 7.2534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 36139, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 36139, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 36139, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 36139, "retrieval_score": 7.098534}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 36139, "retrieval_score": 7.2534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 36139, "retrieval_score": 6.3532634}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 36139, "retrieval_score": 6.3532634}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 36139, "retrieval_score": 5.6518736}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 36139, "retrieval_score": 5.089952}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 36139, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 36139, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 36139, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 36139, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 36139, "retrieval_score": 7.3108277}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 24041436, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 24041436, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 24041436, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 24041436, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 24041436, "retrieval_score": 7.871623}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026, "for": 9396706, "retrieval_score": 8.322354}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025, "for": 9396706, "retrieval_score": 7.289562}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354, "for": 9396706, "retrieval_score": 5.45364}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355, "for": 9396706, "retrieval_score": 5.45364}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645, "for": 9396706, "retrieval_score": 5.45364}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 12883376, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 12883376, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 12883376, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 12883376, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 12883376, "retrieval_score": 8.055008}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 22904654, "retrieval_score": 8.8023}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223, "for": 22904654, "retrieval_score": 6.6175947}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224, "for": 22904654, "retrieval_score": 5.3017225}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225, "for": 22904654, "retrieval_score": 5.3017225}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226, "for": 22904654, "retrieval_score": 4.4223604}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 22904654, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 22904654, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 22904654, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 22904654, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 22904654, "retrieval_score": 6.4322023}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 7125009, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 7125009, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 7125009, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 7125009, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 7125009, "retrieval_score": 5.681296}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 7125009, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 7125009, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 7125009, "retrieval_score": 9.292767}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288, "for": 7125009, "retrieval_score": 6.511324}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291, "for": 7125009, "retrieval_score": 6.511324}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 312443, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 312443, "retrieval_score": 21.070179}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 312443, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 312443, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 312443, "retrieval_score": 21.070179}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 39299703, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 39299703, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 39299703, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 39299703, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 39299703, "retrieval_score": 5.9267936}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 11403474, "retrieval_score": 7.1087627}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 11403474, "retrieval_score": 7.1087627}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 11403474, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 11403474, "retrieval_score": 7.1087627}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 11403474, "retrieval_score": 6.266589}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 31650399, "retrieval_score": 14.359954}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 31650399, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 31650399, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 31650399, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 31650399, "retrieval_score": 11.254986}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 20084487, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 20084487, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 20084487, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 20084487, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 20084487, "retrieval_score": 13.852022}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693, "for": 8217613, "retrieval_score": 7.703372}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722, "for": 8217613, "retrieval_score": 7.703372}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 8217613, "retrieval_score": 7.131615}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 8217613, "retrieval_score": 7.131615}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873, "for": 8217613, "retrieval_score": 7.131615}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 18272066, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 18272066, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 18272066, "retrieval_score": 12.450847}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 18272066, "retrieval_score": 10.275188}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18272066, "retrieval_score": 8.857946}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 29558007, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 29558007, "retrieval_score": 8.756195}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 29558007, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 29558007, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 29558007, "retrieval_score": 7.3926377}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 3855093, "retrieval_score": 23.993229}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 3855093, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 3855093, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 3855093, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 3855093, "retrieval_score": 14.046785}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127, "for": 16128833, "retrieval_score": 11.15621}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 16128833, "retrieval_score": 9.314677}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158, "for": 16128833, "retrieval_score": 7.3926377}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172, "for": 16128833, "retrieval_score": 7.3926377}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 16128833, "retrieval_score": 6.54706}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 14961014, "retrieval_score": 26.504875}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 14961014, "retrieval_score": 26.504875}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 14961014, "retrieval_score": 26.504875}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 14961014, "retrieval_score": 26.504875}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 14961014, "retrieval_score": 26.504875}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 306400, "retrieval_score": 8.819389}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 3931541, "retrieval_score": 19.295033}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 3931541, "retrieval_score": 17.164894}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 3931541, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 3931541, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 3931541, "retrieval_score": 16.507889}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 3931541, "retrieval_score": 17.028362}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 3931541, "retrieval_score": 17.028362}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 3931541, "retrieval_score": 14.2175255}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 3931541, "retrieval_score": 14.2175255}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 3931541, "retrieval_score": 14.2175255}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238, "for": 163542, "retrieval_score": 22.327026}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242, "for": 163542, "retrieval_score": 22.327026}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168, "for": 163542, "retrieval_score": 20.06505}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239, "for": 163542, "retrieval_score": 18.288898}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240, "for": 163542, "retrieval_score": 18.288898}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 163542, "retrieval_score": 35.2092}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 163542, "retrieval_score": 24.504745}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 163542, "retrieval_score": 22.517973}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 163542, "retrieval_score": 20.440304}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315, "for": 163542, "retrieval_score": 19.314417}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18637651, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18637651, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 18637651, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 18637651, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 18637651, "retrieval_score": 14.621655}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 18637651, "retrieval_score": 10.275188}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18637651, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18637651, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 18637651, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 18637651, "retrieval_score": 7.3108277}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 20504881, "retrieval_score": 13.297001}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 20504881, "retrieval_score": 13.297001}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 20504881, "retrieval_score": 13.297001}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 20504881, "retrieval_score": 13.297001}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 20504881, "retrieval_score": 13.297001}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 21261330, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 21261330, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 21261330, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 21261330, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 21261330, "retrieval_score": 13.252438}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 6886493, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 6886493, "retrieval_score": 6.926011}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 6886493, "retrieval_score": 6.596385}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 6886493, "retrieval_score": 6.596385}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252, "for": 6886493, "retrieval_score": 6.596385}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 6886493, "retrieval_score": 8.216764}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 6886493, "retrieval_score": 6.8604403}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 6886493, "retrieval_score": 6.8604403}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040, "for": 6886493, "retrieval_score": 5.8884463}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 6886493, "retrieval_score": 5.8884463}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 6886493, "retrieval_score": 8.216764}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 6886493, "retrieval_score": 6.8604403}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 6886493, "retrieval_score": 6.8604403}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040, "for": 6886493, "retrieval_score": 5.8884463}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 6886493, "retrieval_score": 5.8884463}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287, "for": 16389188, "retrieval_score": 10.275188}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 16389188, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 16389188, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 16389188, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 16389188, "retrieval_score": 7.1087627}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843, "for": 14159753, "retrieval_score": 8.8023}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288, "for": 14159753, "retrieval_score": 6.511324}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291, "for": 14159753, "retrieval_score": 6.511324}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650, "for": 14159753, "retrieval_score": 6.511324}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094, "for": 14159753, "retrieval_score": 6.511324}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 29530232, "retrieval_score": 10.275188}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 29530232, "retrieval_score": 9.314677}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 29530232, "retrieval_score": 7.002801}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 29530232, "retrieval_score": 5.6103325}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487, "for": 4979542, "retrieval_score": 7.3675203}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072, "for": 4979542, "retrieval_score": 7.3675203}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372, "for": 4979542, "retrieval_score": 7.3675203}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698, "for": 4979542, "retrieval_score": 7.3675203}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646, "for": 4979542, "retrieval_score": 6.065423}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 9880173, "retrieval_score": 18.781567}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 9880173, "retrieval_score": 18.781567}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 9880173, "retrieval_score": 18.781567}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 9880173, "retrieval_score": 18.781567}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 9880173, "retrieval_score": 18.781567}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708, "for": 41178532, "retrieval_score": 8.819389}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 41178532, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 41178532, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 41178532, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 41178532, "retrieval_score": 4.1138444}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 8704952, "retrieval_score": 13.252438}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 27867754, "retrieval_score": 18.059566}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 27867754, "retrieval_score": 18.059566}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 27867754, "retrieval_score": 18.059566}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041, "for": 27867754, "retrieval_score": 15.500871}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 27867754, "retrieval_score": 8.069274}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 36113747, "retrieval_score": 6.001865}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 36113747, "retrieval_score": 6.001865}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 36113747, "retrieval_score": 6.001865}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 36113747, "retrieval_score": 6.001865}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869, "for": 36113747, "retrieval_score": 6.001865}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 7794208, "retrieval_score": 11.453697}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 7794208, "retrieval_score": 11.453697}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7794208, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7794208, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 7794208, "retrieval_score": 8.615965}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 13628725, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 13628725, "retrieval_score": 9.314677}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13628725, "retrieval_score": 8.819389}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 13628725, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 13628725, "retrieval_score": 8.612926}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 13628725, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 13628725, "retrieval_score": 9.314677}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 13628725, "retrieval_score": 8.819389}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 13628725, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 13628725, "retrieval_score": 8.612926}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 764235, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 764235, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 764235, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 764235, "retrieval_score": 16.138548}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 34197047, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 34197047, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 34197047, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 34197047, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 34197047, "retrieval_score": 13.252438}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839, "for": 7831371, "retrieval_score": 9.696108}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7831371, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 7831371, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 7831371, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 7831371, "retrieval_score": 8.857946}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3283306, "retrieval_score": 8.819389}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 3283306, "retrieval_score": 4.538543}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 3283306, "retrieval_score": 4.538543}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 3283306, "retrieval_score": 4.538543}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 3283306, "retrieval_score": 4.538543}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 2173797, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 2173797, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 2173797, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 2173797, "retrieval_score": 6.788617}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 2173797, "retrieval_score": 5.275061}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 7658932, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 7658932, "retrieval_score": 16.138548}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 7658932, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 7658932, "retrieval_score": 13.852022}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 7658932, "retrieval_score": 13.852022}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 8901996, "retrieval_score": 8.069274}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 8901996, "retrieval_score": 7.7854953}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 8901996, "retrieval_score": 7.7854953}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 8901996, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 8901996, "retrieval_score": 7.098534}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 464736, "retrieval_score": 5.1035686}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 464736, "retrieval_score": 5.1035686}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 464736, "retrieval_score": 5.1035686}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 464736, "retrieval_score": 5.1035686}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 464736, "retrieval_score": 5.1035686}
{"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412, "for": 82831, "retrieval_score": 9.029783}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413, "for": 82831, "retrieval_score": 6.788617}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414, "for": 82831, "retrieval_score": 6.788617}
{"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415, "for": 82831, "retrieval_score": 5.438738}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 82831, "retrieval_score": 18.154173}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 82831, "retrieval_score": 18.154173}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 82831, "retrieval_score": 18.154173}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 82831, "retrieval_score": 18.154173}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366, "for": 82831, "retrieval_score": 18.154173}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 82831, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 82831, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 82831, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 82831, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 82831, "retrieval_score": 8.866667}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 6.872098}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 82831, "retrieval_score": 6.066503}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 6.872098}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 82831, "retrieval_score": 6.066503}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 82831, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 82831, "retrieval_score": 7.289562}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 82831, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 82831, "retrieval_score": 7.289562}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 6.872098}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 82831, "retrieval_score": 6.066503}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 82831, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 82831, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 82831, "retrieval_score": 6.926011}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439, "for": 82831, "retrieval_score": 6.872098}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 82831, "retrieval_score": 6.066503}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 1059559, "retrieval_score": 11.262298}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 1059559, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 1059559, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 1059559, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 1059559, "retrieval_score": 11.262298}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 41127441, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 41127441, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 41127441, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 41127441, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 41127441, "retrieval_score": 14.046785}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840, "for": 20347766, "retrieval_score": 7.5568957}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403, "for": 20347766, "retrieval_score": 7.5568957}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839, "for": 20347766, "retrieval_score": 6.4862275}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130, "for": 20347766, "retrieval_score": 6.4862275}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404, "for": 20347766, "retrieval_score": 6.4862275}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 18500541, "retrieval_score": 24.130781}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 18500541, "retrieval_score": 21.466782}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 18500541, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 18500541, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 18500541, "retrieval_score": 16.507889}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 7253907, "retrieval_score": 6.676981}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 7253907, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 7253907, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 7253907, "retrieval_score": 5.8480387}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 7253907, "retrieval_score": 5.8480387}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 674519, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 674519, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 674519, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 674519, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 674519, "retrieval_score": 16.138548}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2397687, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2397687, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2397687, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2397687, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2397687, "retrieval_score": 12.450847}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2397687, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2397687, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2397687, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2397687, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2397687, "retrieval_score": 12.450847}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 961263, "retrieval_score": 8.407638}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 961263, "retrieval_score": 7.019806}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264, "for": 961263, "retrieval_score": 7.019806}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034, "for": 961263, "retrieval_score": 7.019806}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578, "for": 961263, "retrieval_score": 7.019806}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 34358278, "retrieval_score": 8.069274}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 34358278, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 34358278, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 34358278, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602, "for": 34358278, "retrieval_score": 7.5568957}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 32292554, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 32292554, "retrieval_score": 8.756195}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 32292554, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 32292554, "retrieval_score": 8.612926}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 32292554, "retrieval_score": 7.3926377}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 30483977, "retrieval_score": 9.696108}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 30483977, "retrieval_score": 8.819389}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 30483977, "retrieval_score": 8.322354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 30483977, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 30483977, "retrieval_score": 8.18273}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28253102, "retrieval_score": 80.021225}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 28253102, "retrieval_score": 70.30696}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 28253102, "retrieval_score": 70.30696}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 28253102, "retrieval_score": 62.710194}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862, "for": 28253102, "retrieval_score": 53.508705}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246, "for": 23797491, "retrieval_score": 18.532211}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 23797491, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 23797491, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 23797491, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 23797491, "retrieval_score": 15.743246}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876, "for": 4383571, "retrieval_score": 9.774999}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229, "for": 4383571, "retrieval_score": 9.029783}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235, "for": 4383571, "retrieval_score": 9.029783}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 4383571, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 4383571, "retrieval_score": 8.866667}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 20206615, "retrieval_score": 16.138548}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 20206615, "retrieval_score": 16.138548}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 20206615, "retrieval_score": 14.5068}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 20206615, "retrieval_score": 13.852022}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 20206615, "retrieval_score": 13.852022}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 16436133, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 16436133, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 16436133, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 16436133, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 16436133, "retrieval_score": 6.1015863}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 2231663, "retrieval_score": 13.007814}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 2231663, "retrieval_score": 13.007814}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 2231663, "retrieval_score": 13.007814}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 2231663, "retrieval_score": 12.050466}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 2231663, "retrieval_score": 11.282446}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 2231663, "retrieval_score": 13.844368}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 2231663, "retrieval_score": 13.844368}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 2231663, "retrieval_score": 13.844368}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 2231663, "retrieval_score": 13.331309}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 2231663, "retrieval_score": 13.331309}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2231663, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2231663, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2231663, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 2231663, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 2231663, "retrieval_score": 21.070179}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2597099, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2597099, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 2597099, "retrieval_score": 12.340725}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 2597099, "retrieval_score": 10.275188}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2597099, "retrieval_score": 9.050911}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 2597099, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 2597099, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 2597099, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 2597099, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 2597099, "retrieval_score": 17.098473}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 32838802, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 32838802, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 32838802, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 32838802, "retrieval_score": 10.32076}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 32838802, "retrieval_score": 10.204068}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 27060098, "retrieval_score": 5.631149}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 26081300, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 26081300, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 26081300, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 26081300, "retrieval_score": 7.011446}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 26081300, "retrieval_score": 6.266589}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 22520932, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 22520932, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 22520932, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 22520932, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 22520932, "retrieval_score": 21.070179}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 6429638, "retrieval_score": 19.045078}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 6429638, "retrieval_score": 16.681612}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 6429638, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 6429638, "retrieval_score": 16.414843}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 6429638, "retrieval_score": 14.214895}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 6429638, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 6429638, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 6429638, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 6429638, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 6429638, "retrieval_score": 4.1138444}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 6429638, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 6429638, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 6429638, "retrieval_score": 7.5568957}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 6429638, "retrieval_score": 6.837495}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 6429638, "retrieval_score": 6.4862275}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462, "for": 13076560, "retrieval_score": 17.225851}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463, "for": 13076560, "retrieval_score": 17.225851}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464, "for": 13076560, "retrieval_score": 17.225851}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436, "for": 13076560, "retrieval_score": 17.225851}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475, "for": 13076560, "retrieval_score": 17.225851}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 11391969, "retrieval_score": 9.362779}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 11391969, "retrieval_score": 9.362779}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171, "for": 11391969, "retrieval_score": 9.362779}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175, "for": 11391969, "retrieval_score": 9.362779}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413, "for": 11391969, "retrieval_score": 9.362779}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 32191029, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 32191029, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 32191029, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 32191029, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 32191029, "retrieval_score": 8.253944}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 3961581, "retrieval_score": 10.947191}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 3961581, "retrieval_score": 10.947191}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 3961581, "retrieval_score": 10.947191}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 3961581, "retrieval_score": 8.84866}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 3961581, "retrieval_score": 8.84866}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 10998621, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 10998621, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 10998621, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 10998621, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 10998621, "retrieval_score": 7.1087627}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 25678689, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 25678689, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 25678689, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 25678689, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 25678689, "retrieval_score": 13.2869215}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 8712332, "retrieval_score": 8.9242325}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 8712332, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 8712332, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 8712332, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 8712332, "retrieval_score": 8.857946}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 39605640, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 39605640, "retrieval_score": 6.926011}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 39605640, "retrieval_score": 6.626219}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 39605640, "retrieval_score": 6.626219}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 39605640, "retrieval_score": 6.626219}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 27318022, "retrieval_score": 8.819389}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362, "for": 27318022, "retrieval_score": 8.18273}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478, "for": 27318022, "retrieval_score": 8.18273}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485, "for": 27318022, "retrieval_score": 8.18273}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556, "for": 27318022, "retrieval_score": 8.18273}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 2416823, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 2416823, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 2416823, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 2416823, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 2416823, "retrieval_score": 6.538975}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840, "for": 17424182, "retrieval_score": 12.452402}
{"snippet": "binascii.crc32(data, value)", "intent": "Compute CRC-32 , the 32-bit checksum of `data` , starting with an initial CRC of `value` .", "question_id": 841, "for": 17424182, "retrieval_score": 12.452402}
{"snippet": "zlib.adler32(data, value)", "intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "question_id": 12893, "for": 17424182, "retrieval_score": 12.452402}
{"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917, "for": 17424182, "retrieval_score": 12.452402}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825, "for": 17424182, "retrieval_score": 10.039081}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 9841303, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 9841303, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 9841303, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 9841303, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 9841303, "retrieval_score": 7.1087627}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 930865, "retrieval_score": 17.6046}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 930865, "retrieval_score": 10.754423}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 930865, "retrieval_score": 10.603445}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 930865, "retrieval_score": 9.029783}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 930865, "retrieval_score": 8.844721}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 25440008, "retrieval_score": 9.314677}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 25440008, "retrieval_score": 7.002801}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 25440008, "retrieval_score": 5.6103325}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 17734779, "retrieval_score": 11.453697}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 17734779, "retrieval_score": 11.453697}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 17734779, "retrieval_score": 9.589609}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 17734779, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 17734779, "retrieval_score": 8.857946}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 17734779, "retrieval_score": 11.453697}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 17734779, "retrieval_score": 11.453697}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 17734779, "retrieval_score": 9.589609}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 17734779, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 17734779, "retrieval_score": 8.857946}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643, "for": 19069701, "retrieval_score": 10.275188}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 19069701, "retrieval_score": 7.427198}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669, "for": 19069701, "retrieval_score": 7.3675203}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770, "for": 19069701, "retrieval_score": 6.3749056}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767, "for": 19069701, "retrieval_score": 6.323683}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1885181, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1885181, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 1885181, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 1885181, "retrieval_score": 6.4862275}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 1885181, "retrieval_score": 6.066503}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 9507819, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 9507819, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 9507819, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 9507819, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 9507819, "retrieval_score": 4.448161}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417, "for": 7670226, "retrieval_score": 7.9949646}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099, "for": 7670226, "retrieval_score": 7.002801}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101, "for": 7670226, "retrieval_score": 7.002801}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 7670226, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 7670226, "retrieval_score": 4.838603}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735, "for": 12376863, "retrieval_score": 38.78443}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854, "for": 12376863, "retrieval_score": 38.78443}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 12376863, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 12376863, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 12376863, "retrieval_score": 8.253944}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 8899905, "retrieval_score": 6.68835}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 8899905, "retrieval_score": 6.68835}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126, "for": 8899905, "retrieval_score": 5.7407384}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707, "for": 8899905, "retrieval_score": 5.7407384}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826, "for": 8899905, "retrieval_score": 5.028321}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 25040875, "retrieval_score": 43.349453}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 25040875, "retrieval_score": 37.96985}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 25040875, "retrieval_score": 35.098312}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 25040875, "retrieval_score": 30.12555}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 25040875, "retrieval_score": 30.12555}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 25040875, "retrieval_score": 25.186422}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 25040875, "retrieval_score": 22.060823}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 25040875, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 25040875, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 25040875, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 25040875, "retrieval_score": 25.186422}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 25040875, "retrieval_score": 22.060823}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 25040875, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 25040875, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 25040875, "retrieval_score": 18.57447}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 40744328, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 40744328, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 40744328, "retrieval_score": 12.340725}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 40744328, "retrieval_score": 9.050911}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 40744328, "retrieval_score": 8.857946}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 40744328, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 40744328, "retrieval_score": 9.335693}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 40744328, "retrieval_score": 9.029783}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 40744328, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 40744328, "retrieval_score": 8.055008}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8519599, "retrieval_score": 24.911064}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 8519599, "retrieval_score": 22.690716}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 8519599, "retrieval_score": 19.874828}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8519599, "retrieval_score": 18.732853}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 8519599, "retrieval_score": 17.887672}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 22733642, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 22733642, "retrieval_score": 14.252948}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 22733642, "retrieval_score": 13.846563}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 22733642, "retrieval_score": 13.846563}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 22733642, "retrieval_score": 11.254986}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4810537, "retrieval_score": 8.819389}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018, "for": 4810537, "retrieval_score": 7.5568957}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 4810537, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 4810537, "retrieval_score": 7.289562}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395, "for": 4810537, "retrieval_score": 6.4862275}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4810537, "retrieval_score": 8.819389}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974, "for": 4810537, "retrieval_score": 7.3926377}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 4810537, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 4810537, "retrieval_score": 7.289562}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991, "for": 4810537, "retrieval_score": 6.4752216}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 533398, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 533398, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 533398, "retrieval_score": 7.289562}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 533398, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 533398, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 533398, "retrieval_score": 7.289562}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 533398, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 533398, "retrieval_score": 6.4322023}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 10592674, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 10592674, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 10592674, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 10592674, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 10592674, "retrieval_score": 16.36546}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 14180866, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 14180866, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 14180866, "retrieval_score": 12.450847}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 14180866, "retrieval_score": 10.275188}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 14180866, "retrieval_score": 9.696108}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 14180866, "retrieval_score": 10.275188}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 14180866, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 14180866, "retrieval_score": 8.322354}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 14180866, "retrieval_score": 6.837495}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648, "for": 14180866, "retrieval_score": 5.9889717}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061, "for": 21778118, "retrieval_score": 6.68835}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070, "for": 21778118, "retrieval_score": 6.68835}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126, "for": 21778118, "retrieval_score": 5.7407384}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707, "for": 21778118, "retrieval_score": 5.7407384}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826, "for": 21778118, "retrieval_score": 5.028321}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 31676133, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 31676133, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 31676133, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 31676133, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 31676133, "retrieval_score": 14.621655}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 11336548, "retrieval_score": 7.1087627}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83, "for": 11336548, "retrieval_score": 6.7207417}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 11336548, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 11336548, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 11336548, "retrieval_score": 6.1015863}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 18351951, "retrieval_score": 6.7207417}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 18351951, "retrieval_score": 6.7207417}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 18351951, "retrieval_score": 6.7207417}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 18351951, "retrieval_score": 6.7207417}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 18351951, "retrieval_score": 6.7207417}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 234512, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 234512, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 234512, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 234512, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 234512, "retrieval_score": 11.254986}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 20477190, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 20477190, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 20477190, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 20477190, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 20477190, "retrieval_score": 8.857946}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 30405804, "retrieval_score": 8.819389}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 30405804, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 30405804, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 30405804, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 30405804, "retrieval_score": 6.4322023}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 15043326, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 15043326, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 15043326, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 15043326, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 15043326, "retrieval_score": 5.4753366}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 15043326, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 15043326, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 15043326, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 15043326, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 15043326, "retrieval_score": 8.857946}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 12772057, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 12772057, "retrieval_score": 16.644709}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 12772057, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 12772057, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 12772057, "retrieval_score": 15.743246}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2111163, "retrieval_score": 17.848465}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 2111163, "retrieval_score": 15.704075}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 2111163, "retrieval_score": 15.704075}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 2111163, "retrieval_score": 14.022892}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862, "for": 2111163, "retrieval_score": 11.808055}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2111163, "retrieval_score": 13.534788}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 2111163, "retrieval_score": 11.958744}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 2111163, "retrieval_score": 11.958744}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 2111163, "retrieval_score": 10.713577}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008, "for": 2111163, "retrieval_score": 9.209711}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 14743454, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 14743454, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 14743454, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 14743454, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 14743454, "retrieval_score": 16.138548}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 15650538, "retrieval_score": 26.339123}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 15650538, "retrieval_score": 26.339123}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 15650538, "retrieval_score": 26.339123}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 15650538, "retrieval_score": 21.008404}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 15650538, "retrieval_score": 19.458683}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 3582601, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 3582601, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 3582601, "retrieval_score": 8.627357}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3582601, "retrieval_score": 8.069274}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 3582601, "retrieval_score": 8.055008}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 15282189, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 15282189, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 15282189, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 15282189, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 15282189, "retrieval_score": 7.1087627}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 3518778, "retrieval_score": 4.6813893}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 3518778, "retrieval_score": 4.6813893}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171, "for": 3518778, "retrieval_score": 4.6813893}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175, "for": 3518778, "retrieval_score": 4.6813893}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413, "for": 3518778, "retrieval_score": 4.6813893}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 3518778, "retrieval_score": 8.819389}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236, "for": 3518778, "retrieval_score": 7.5574336}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242, "for": 3518778, "retrieval_score": 7.5574336}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352, "for": 3518778, "retrieval_score": 7.5574336}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356, "for": 3518778, "retrieval_score": 7.5574336}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604, "for": 3518778, "retrieval_score": 2.2836504}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714, "for": 3518778, "retrieval_score": 2.0028987}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052, "for": 3518778, "retrieval_score": 2.0028987}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533, "for": 3518778, "retrieval_score": 2.0028987}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010, "for": 3518778, "retrieval_score": 2.0028987}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980, "for": 11833266, "retrieval_score": 7.2253866}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946, "for": 11833266, "retrieval_score": 6.5332274}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938, "for": 11833266, "retrieval_score": 6.427716}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940, "for": 11833266, "retrieval_score": 6.427716}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942, "for": 11833266, "retrieval_score": 6.427716}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 11833266, "retrieval_score": 8.9242325}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 11833266, "retrieval_score": 8.72709}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 11833266, "retrieval_score": 8.72709}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 11833266, "retrieval_score": 8.72709}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834, "for": 11833266, "retrieval_score": 8.72709}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 11811392, "retrieval_score": 9.314677}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 11811392, "retrieval_score": 7.002801}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 11811392, "retrieval_score": 5.6103325}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 3878555, "retrieval_score": 6.538975}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 15334783, "retrieval_score": 33.10782}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 15334783, "retrieval_score": 32.277096}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 15334783, "retrieval_score": 32.277096}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 15334783, "retrieval_score": 32.277096}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 15334783, "retrieval_score": 32.277096}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 2030053, "retrieval_score": 8.819389}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 2030053, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 2030053, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2030053, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2030053, "retrieval_score": 8.18273}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4581646, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4581646, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4581646, "retrieval_score": 12.450847}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 4581646, "retrieval_score": 9.696108}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 4581646, "retrieval_score": 9.5380535}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 4581646, "retrieval_score": 12.950443}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 4581646, "retrieval_score": 11.520736}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 4581646, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 4581646, "retrieval_score": 9.314677}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 4581646, "retrieval_score": 8.322354}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 1790520, "retrieval_score": 8.8023}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 1790520, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 1790520, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 1790520, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 1790520, "retrieval_score": 7.3108277}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 41083229, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 41083229, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 41083229, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 41083229, "retrieval_score": 19.296608}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903, "for": 41083229, "retrieval_score": 19.296608}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 16418415, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 16418415, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 16418415, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 16418415, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 16418415, "retrieval_score": 17.098473}
{"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946, "for": 6018340, "retrieval_score": 7.724916}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18137341, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 18137341, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 18137341, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 18137341, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 18137341, "retrieval_score": 8.857946}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 32792874, "retrieval_score": 17.887672}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 32792874, "retrieval_score": 17.887672}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132, "for": 32792874, "retrieval_score": 17.887672}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488, "for": 32792874, "retrieval_score": 17.887672}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599, "for": 32792874, "retrieval_score": 15.667837}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 32792874, "retrieval_score": 28.891224}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 32792874, "retrieval_score": 28.891224}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 32792874, "retrieval_score": 25.305864}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 32792874, "retrieval_score": 19.835854}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 32792874, "retrieval_score": 19.835854}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 40313203, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 40313203, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 40313203, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 40313203, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 40313203, "retrieval_score": 14.046785}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 7287996, "retrieval_score": 9.029783}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 7287996, "retrieval_score": 9.029783}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 7287996, "retrieval_score": 8.819389}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 7287996, "retrieval_score": 7.7504354}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 7287996, "retrieval_score": 7.7504354}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 7287996, "retrieval_score": 18.059566}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 7287996, "retrieval_score": 18.059566}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 7287996, "retrieval_score": 15.500871}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 7287996, "retrieval_score": 15.500871}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 7287996, "retrieval_score": 8.819389}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 13167391, "retrieval_score": 9.5380535}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 13167391, "retrieval_score": 9.5380535}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 13167391, "retrieval_score": 9.5380535}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 13167391, "retrieval_score": 9.5380535}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870, "for": 13167391, "retrieval_score": 9.5380535}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 1217251, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 1217251, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 1217251, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 1217251, "retrieval_score": 8.756195}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 1217251, "retrieval_score": 8.615965}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 11921649, "retrieval_score": 15.664802}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 11921649, "retrieval_score": 15.664802}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 11921649, "retrieval_score": 15.664802}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 11921649, "retrieval_score": 15.664802}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254, "for": 11921649, "retrieval_score": 15.664802}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 30009948, "retrieval_score": 8.473424}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 30009948, "retrieval_score": 7.5379715}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 30009948, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 30009948, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 30009948, "retrieval_score": 6.788617}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 5251663, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 5251663, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 5251663, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 5251663, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 5251663, "retrieval_score": 14.621655}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.selection_set(*items)", "intent": "items becomes the new selection . With arguments `*items`.", "question_id": 10654, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 1712227, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 1712227, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 1712227, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 1712227, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 1712227, "retrieval_score": 7.377835}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "widget.selection_set(*items)", "intent": "items becomes the new selection . With arguments `*items`.", "question_id": 10654, "for": 1712227, "retrieval_score": 8.069274}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 1712227, "retrieval_score": 12.605309}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 1712227, "retrieval_score": 12.605309}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 1712227, "retrieval_score": 6.9778156}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 25817930, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 25817930, "retrieval_score": 9.8809595}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 25817930, "retrieval_score": 7.9161854}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 25817930, "retrieval_score": 7.9161854}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668, "for": 25817930, "retrieval_score": 6.603179}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 25817930, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 25817930, "retrieval_score": 9.8809595}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 25817930, "retrieval_score": 7.9161854}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 25817930, "retrieval_score": 7.9161854}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 25817930, "retrieval_score": 7.724916}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091, "for": 17679089, "retrieval_score": 9.616297}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071, "for": 17679089, "retrieval_score": 9.616297}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085, "for": 17679089, "retrieval_score": 9.616297}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093, "for": 17679089, "retrieval_score": 9.616297}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139, "for": 17679089, "retrieval_score": 9.616297}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4877844, "retrieval_score": 23.875263}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4877844, "retrieval_score": 20.912376}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 4877844, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 4877844, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4877844, "retrieval_score": 16.36546}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157, "for": 15411107, "retrieval_score": 6.1642365}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 15411107, "retrieval_score": 5.3992634}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322, "for": 15411107, "retrieval_score": 5.3992634}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330, "for": 15411107, "retrieval_score": 5.3992634}
{"snippet": "hmac.new(key, digestmod=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . `digestmod` is the digest name , digest constructor or module for the HMAC object to use .", "question_id": 4331, "for": 15411107, "retrieval_score": 5.3992634}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 15411107, "retrieval_score": 13.3470745}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393, "for": 15411107, "retrieval_score": 5.275061}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375, "for": 15411107, "retrieval_score": 5.275061}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329, "for": 15411107, "retrieval_score": 5.275061}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611, "for": 15411107, "retrieval_score": 5.275061}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 15411107, "retrieval_score": 26.694149}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643, "for": 15411107, "retrieval_score": 24.613232}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 15411107, "retrieval_score": 14.776935}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 15411107, "retrieval_score": 14.776935}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 15411107, "retrieval_score": 14.776935}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 5373474, "retrieval_score": 8.407638}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955, "for": 5373474, "retrieval_score": 7.9661465}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957, "for": 5373474, "retrieval_score": 7.9661465}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262, "for": 5373474, "retrieval_score": 7.019806}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264, "for": 5373474, "retrieval_score": 7.019806}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 6027690, "retrieval_score": 9.696108}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 6027690, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 6027690, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 6027690, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 6027690, "retrieval_score": 8.549236}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 753052, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 753052, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 753052, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 753052, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 753052, "retrieval_score": 6.538975}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 41923906, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 41923906, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 41923906, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 41923906, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 41923906, "retrieval_score": 12.407009}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600, "for": 11009155, "retrieval_score": 6.8772707}
{"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606, "for": 11009155, "retrieval_score": 6.349691}
{"snippet": "subprocess.run(args, capture_output=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9572, "for": 11009155, "retrieval_score": 5.9520493}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 11009155, "retrieval_score": 5.9520493}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576, "for": 11009155, "retrieval_score": 5.9520493}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384, "for": 7351270, "retrieval_score": 12.284268}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 7351270, "retrieval_score": 12.950443}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 7351270, "retrieval_score": 11.520736}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 7351270, "retrieval_score": 8.069274}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739, "for": 7351270, "retrieval_score": 7.9916697}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741, "for": 7351270, "retrieval_score": 6.9302254}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392, "for": 7351270, "retrieval_score": 14.312007}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384, "for": 7351270, "retrieval_score": 12.284268}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 12280143, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 6740865, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 6740865, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 6740865, "retrieval_score": 6.6814804}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 6740865, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 6740865, "retrieval_score": 6.538975}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 8751653, "retrieval_score": 9.221109}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 8751653, "retrieval_score": 9.050911}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 8751653, "retrieval_score": 8.227689}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 8751653, "retrieval_score": 8.227689}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 8751653, "retrieval_score": 8.227689}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 8751653, "retrieval_score": 10.542535}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 8751653, "retrieval_score": 9.050911}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 8751653, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 8751653, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 8751653, "retrieval_score": 8.8023}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8751653, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8751653, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8751653, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8751653, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8751653, "retrieval_score": 7.0233927}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073, "for": 31029560, "retrieval_score": 8.308816}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073, "for": 31029560, "retrieval_score": 8.308816}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432, "for": 31029560, "retrieval_score": 7.131615}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 11354544, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 11354544, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 11354544, "retrieval_score": 7.063412}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 11354544, "retrieval_score": 7.063412}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 11354544, "retrieval_score": 7.063412}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 22128218, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 22128218, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 22128218, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 22128218, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 22128218, "retrieval_score": 4.1138444}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 40208429, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 40208429, "retrieval_score": 16.414843}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 40208429, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 40208429, "retrieval_score": 13.263839}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 40208429, "retrieval_score": 12.340725}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 27758657, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 27758657, "retrieval_score": 11.985868}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 27758657, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 27758657, "retrieval_score": 9.050911}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 27758657, "retrieval_score": 9.011011}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 9573244, "retrieval_score": 7.289562}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 9573244, "retrieval_score": 7.3884673}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477, "for": 9573244, "retrieval_score": 6.3749056}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478, "for": 9573244, "retrieval_score": 6.3749056}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 364519, "retrieval_score": 16.491547}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 364519, "retrieval_score": 9.029783}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 364519, "retrieval_score": 18.163029}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 364519, "retrieval_score": 15.967229}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 364519, "retrieval_score": 15.909023}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 364519, "retrieval_score": 13.45779}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 364519, "retrieval_score": 11.551079}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 364519, "retrieval_score": 9.029783}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 364519, "retrieval_score": 9.029783}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495, "for": 364519, "retrieval_score": 8.308816}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 364519, "retrieval_score": 11.157139}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 364519, "retrieval_score": 9.029783}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 364519, "retrieval_score": 10.275188}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 364519, "retrieval_score": 9.029783}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 364519, "retrieval_score": 8.069274}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 34438901, "retrieval_score": 18.232801}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 34438901, "retrieval_score": 18.232801}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 34438901, "retrieval_score": 13.46184}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 34438901, "retrieval_score": 11.791245}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 34438901, "retrieval_score": 11.254986}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 5618878, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 5618878, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 5618878, "retrieval_score": 12.450847}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 5618878, "retrieval_score": 11.11521}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 5618878, "retrieval_score": 11.11521}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 5618878, "retrieval_score": 6.611951}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 5618878, "retrieval_score": 7.098534}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 5618878, "retrieval_score": 6.837495}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 16096754, "retrieval_score": 23.070126}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 16096754, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 16096754, "retrieval_score": 18.016369}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 16096754, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 16096754, "retrieval_score": 13.2869215}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 1058712, "retrieval_score": 8.819389}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 1058712, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 1058712, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 1058712, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 1058712, "retrieval_score": 7.377835}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 4230000, "retrieval_score": 17.225851}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 4230000, "retrieval_score": 17.225851}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4230000, "retrieval_score": 17.025373}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 4230000, "retrieval_score": 17.025373}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4230000, "retrieval_score": 14.912549}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 14262654, "retrieval_score": 11.526255}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 14262654, "retrieval_score": 11.526255}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 14262654, "retrieval_score": 9.801861}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 17438906, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 17438906, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 17438906, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 17438906, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 17438906, "retrieval_score": 6.926011}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 14853243, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 14853243, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 14853243, "retrieval_score": 9.029783}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041, "for": 14853243, "retrieval_score": 7.7504354}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 14853243, "retrieval_score": 7.3926377}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 1957273, "retrieval_score": 16.422333}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1957273, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 1957273, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 1957273, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 1957273, "retrieval_score": 8.857946}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 24722212, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 24722212, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 24722212, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 24722212, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 24722212, "retrieval_score": 8.866667}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 31818050, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 31818050, "retrieval_score": 11.985868}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 31818050, "retrieval_score": 9.050911}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 31818050, "retrieval_score": 9.011011}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 31818050, "retrieval_score": 12.706527}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 31818050, "retrieval_score": 12.706527}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758, "for": 31818050, "retrieval_score": 12.706527}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471, "for": 31818050, "retrieval_score": 12.706527}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478, "for": 31818050, "retrieval_score": 10.179904}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 31818050, "retrieval_score": 6.025233}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 31818050, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 31818050, "retrieval_score": 5.27751}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 31818050, "retrieval_score": 5.1451154}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 31818050, "retrieval_score": 5.1451154}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 31818050, "retrieval_score": 5.1451154}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 31818050, "retrieval_score": 7.05434}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 31818050, "retrieval_score": 7.05434}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020, "for": 31818050, "retrieval_score": 7.05434}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 31818050, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 31818050, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 31818050, "retrieval_score": 8.779708}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 31818050, "retrieval_score": 12.050466}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 31818050, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 31818050, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 31818050, "retrieval_score": 10.55502}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 31818050, "retrieval_score": 10.55502}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 31818050, "retrieval_score": 7.002801}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 31818050, "retrieval_score": 6.025233}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421, "for": 31818050, "retrieval_score": 5.6103325}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 31818050, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 31818050, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 31818050, "retrieval_score": 5.681296}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 31818050, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 31818050, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 31818050, "retrieval_score": 5.681296}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 31818050, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 31818050, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 31818050, "retrieval_score": 9.292767}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 31818050, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 31818050, "retrieval_score": 8.322354}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 31818050, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 31818050, "retrieval_score": 7.377835}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 31818050, "retrieval_score": 7.377835}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246, "for": 12843099, "retrieval_score": 18.532211}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466, "for": 12843099, "retrieval_score": 15.743246}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 9224385, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 9224385, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 9224385, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 9224385, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 9224385, "retrieval_score": 16.138548}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 11280536, "retrieval_score": 10.275188}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 11280536, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 11280536, "retrieval_score": 8.322354}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 11280536, "retrieval_score": 6.837495}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648, "for": 11280536, "retrieval_score": 5.9889717}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 10824319, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10824319, "retrieval_score": 7.7504354}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 10824319, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 10824319, "retrieval_score": 6.4862275}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 10824319, "retrieval_score": 6.039165}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 10824319, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 10824319, "retrieval_score": 7.7504354}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 10824319, "retrieval_score": 6.039165}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946, "for": 10824319, "retrieval_score": 6.039165}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 10824319, "retrieval_score": 5.627493}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 40851413, "retrieval_score": 16.811207}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 40851413, "retrieval_score": 13.4683895}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 40851413, "retrieval_score": 13.4683895}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 40851413, "retrieval_score": 13.426676}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 40851413, "retrieval_score": 13.426676}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 40851413, "retrieval_score": 16.811207}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 40851413, "retrieval_score": 13.4683895}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 40851413, "retrieval_score": 13.4683895}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 40851413, "retrieval_score": 13.426676}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 40851413, "retrieval_score": 13.426676}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 13842088, "retrieval_score": 10.619277}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 13842088, "retrieval_score": 7.289562}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 13842088, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 13842088, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 13842088, "retrieval_score": 6.4322023}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 18524112, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 18524112, "retrieval_score": 8.322354}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 18524112, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 18524112, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 18524112, "retrieval_score": 4.3136783}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 22741068, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 22741068, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 22741068, "retrieval_score": 8.756195}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 22741068, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 22741068, "retrieval_score": 8.514181}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 11530799, "retrieval_score": 12.278121}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 11530799, "retrieval_score": 11.926105}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 11530799, "retrieval_score": 11.926105}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 11530799, "retrieval_score": 11.926105}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 11530799, "retrieval_score": 11.926105}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 17117912, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 17117912, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17117912, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 17117912, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 17117912, "retrieval_score": 16.36546}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 17117912, "retrieval_score": 27.682129}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 17117912, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 17117912, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 17117912, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 17117912, "retrieval_score": 24.54819}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758, "for": 9354127, "retrieval_score": 8.819389}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 9354127, "retrieval_score": 8.8023}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 9354127, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 9354127, "retrieval_score": 7.9949646}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 9354127, "retrieval_score": 6.926011}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3781851, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 3781851, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 3781851, "retrieval_score": 7.289562}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 3781851, "retrieval_score": 6.4848065}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502, "for": 3781851, "retrieval_score": 5.311947}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 8383213, "retrieval_score": 10.207137}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 8383213, "retrieval_score": 10.207137}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 8383213, "retrieval_score": 10.207137}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 8383213, "retrieval_score": 10.207137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 8383213, "retrieval_score": 10.207137}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028, "for": 27146262, "retrieval_score": 11.081215}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036, "for": 27146262, "retrieval_score": 11.081215}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032, "for": 27146262, "retrieval_score": 9.857867}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119, "for": 27146262, "retrieval_score": 9.5337925}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123, "for": 27146262, "retrieval_score": 9.5337925}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 6494508, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 6494508, "retrieval_score": 9.314677}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 6494508, "retrieval_score": 8.819389}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 6494508, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 6494508, "retrieval_score": 8.756195}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 1082413, "retrieval_score": 11.853587}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 1082413, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 1082413, "retrieval_score": 11.853587}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 7745562, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 7745562, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 7745562, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 7745562, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 7745562, "retrieval_score": 8.18273}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 12496531, "retrieval_score": 10.754423}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 12496531, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 12496531, "retrieval_score": 9.800473}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 12496531, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 12496531, "retrieval_score": 9.677206}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 18649884, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 18649884, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 18649884, "retrieval_score": 18.242264}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 18649884, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 18649884, "retrieval_score": 17.098473}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 761804, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 761804, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 761804, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 761804, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 761804, "retrieval_score": 4.448161}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 761804, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 761804, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 761804, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 761804, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 761804, "retrieval_score": 5.9267936}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587, "for": 761804, "retrieval_score": 8.405603}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 761804, "retrieval_score": 6.7341948}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589, "for": 761804, "retrieval_score": 6.7341948}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590, "for": 761804, "retrieval_score": 6.125212}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 761804, "retrieval_score": 5.617238}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133, "for": 761804, "retrieval_score": 9.460762}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135, "for": 761804, "retrieval_score": 8.416309}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417, "for": 761804, "retrieval_score": 8.416309}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136, "for": 761804, "retrieval_score": 7.579541}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 761804, "retrieval_score": 7.1087627}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060, "for": 761804, "retrieval_score": 5.4753366}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 9376384, "retrieval_score": 21.932484}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 9376384, "retrieval_score": 21.932484}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 9376384, "retrieval_score": 21.932484}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508, "for": 9376384, "retrieval_score": 18.82507}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511, "for": 9376384, "retrieval_score": 18.82507}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 17577727, "retrieval_score": 10.275188}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 17577727, "retrieval_score": 8.069274}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579, "for": 17577727, "retrieval_score": 7.019806}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 17577727, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 17577727, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 31767173, "retrieval_score": 13.331309}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 31767173, "retrieval_score": 13.331309}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 31767173, "retrieval_score": 13.331309}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 31767173, "retrieval_score": 12.972455}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 31767173, "retrieval_score": 12.972455}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 42100344, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 42100344, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 42100344, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 42100344, "retrieval_score": 8.322354}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 42100344, "retrieval_score": 7.098534}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 30190459, "retrieval_score": 9.314677}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 30190459, "retrieval_score": 8.819389}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625, "for": 30190459, "retrieval_score": 7.2534}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632, "for": 30190459, "retrieval_score": 7.2534}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 30190459, "retrieval_score": 7.002801}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 30190459, "retrieval_score": 9.314677}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 30190459, "retrieval_score": 8.819389}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 30190459, "retrieval_score": 7.002801}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 30190459, "retrieval_score": 6.898015}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 30190459, "retrieval_score": 6.898015}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 798854, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 798854, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 798854, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 798854, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 798854, "retrieval_score": 7.3108277}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 15886340, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 15886340, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 15886340, "retrieval_score": 6.788617}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 15886340, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 15886340, "retrieval_score": 6.266589}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 5882405, "retrieval_score": 10.207137}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 5882405, "retrieval_score": 10.207137}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 5882405, "retrieval_score": 10.207137}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 5882405, "retrieval_score": 10.207137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 5882405, "retrieval_score": 10.207137}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660, "for": 16883447, "retrieval_score": 15.216575}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662, "for": 16883447, "retrieval_score": 12.464463}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664, "for": 16883447, "retrieval_score": 12.464463}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070, "for": 16883447, "retrieval_score": 10.633445}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665, "for": 16883447, "retrieval_score": 10.5553875}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 1222677, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 1222677, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 1222677, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 1222677, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 1222677, "retrieval_score": 8.857946}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 41807864, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 41807864, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 41807864, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 41807864, "retrieval_score": 24.54819}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 41807864, "retrieval_score": 21.070179}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 2655956, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 2655956, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 2655956, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 2655956, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 2655956, "retrieval_score": 19.878656}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 3887469, "retrieval_score": 18.101822}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 3887469, "retrieval_score": 15.113791}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 3887469, "retrieval_score": 15.113791}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 3887469, "retrieval_score": 12.972455}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 3887469, "retrieval_score": 11.362592}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 39532974, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 39532974, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 39532974, "retrieval_score": 12.450847}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 39532974, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 39532974, "retrieval_score": 9.335693}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 2972212, "retrieval_score": 5.3102937}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 2972212, "retrieval_score": 5.3102937}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 2972212, "retrieval_score": 5.3102937}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 2972212, "retrieval_score": 5.3102937}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 2972212, "retrieval_score": 5.3102937}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2972212, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2972212, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2972212, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2972212, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2972212, "retrieval_score": 7.3108277}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 13022385, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 13022385, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 13022385, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 13022385, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 13022385, "retrieval_score": 7.703372}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 5254445, "retrieval_score": 14.005602}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 5254445, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 5254445, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 5254445, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 5254445, "retrieval_score": 11.254986}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 11219949, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 11219949, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 11219949, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 11219949, "retrieval_score": 8.612926}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 11219949, "retrieval_score": 8.18273}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770, "for": 20837786, "retrieval_score": 11.093477}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429, "for": 20837786, "retrieval_score": 9.716793}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 20837786, "retrieval_score": 9.715892}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774, "for": 20837786, "retrieval_score": 8.644074}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 20837786, "retrieval_score": 7.958649}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 2849286, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 2849286, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 2849286, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 2849286, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 2849286, "retrieval_score": 4.1138444}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 29034928, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 29034928, "retrieval_score": 8.322354}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 29034928, "retrieval_score": 7.6829867}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216, "for": 29034928, "retrieval_score": 6.834798}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787, "for": 29034928, "retrieval_score": 6.834798}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973, "for": 3428769, "retrieval_score": 19.133135}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 3428769, "retrieval_score": 18.629354}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 3428769, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 3428769, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 3428769, "retrieval_score": 17.098473}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2636755, "retrieval_score": 11.985868}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2636755, "retrieval_score": 11.985868}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 2636755, "retrieval_score": 11.944069}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 2636755, "retrieval_score": 11.944069}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007, "for": 2636755, "retrieval_score": 10.6254635}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 354038, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 354038, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 354038, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 354038, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 354038, "retrieval_score": 4.448161}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 354038, "retrieval_score": 4.7778044}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 354038, "retrieval_score": 4.7778044}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 354038, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 354038, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 354038, "retrieval_score": 4.7778044}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530, "for": 18366797, "retrieval_score": 9.416875}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 18366797, "retrieval_score": 8.819389}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223, "for": 18366797, "retrieval_score": 6.8982306}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234, "for": 18366797, "retrieval_score": 6.8982306}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305, "for": 18366797, "retrieval_score": 6.8982306}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 12604909, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 12604909, "retrieval_score": 16.414843}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 12604909, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464, "for": 12604909, "retrieval_score": 15.743246}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465, "for": 12604909, "retrieval_score": 15.743246}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 4362586, "retrieval_score": 9.696108}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 4362586, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 4362586, "retrieval_score": 8.756195}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 4362586, "retrieval_score": 8.322354}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 4362586, "retrieval_score": 7.3108277}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 6561653, "retrieval_score": 12.278121}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 6561653, "retrieval_score": 10.754423}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 6561653, "retrieval_score": 9.567153}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 6561653, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 6561653, "retrieval_score": 8.857946}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575, "for": 3774571, "retrieval_score": 9.790325}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577, "for": 3774571, "retrieval_score": 8.575359}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583, "for": 3774571, "retrieval_score": 7.4901934}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611, "for": 3774571, "retrieval_score": 7.4901934}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764, "for": 3774571, "retrieval_score": 7.472584}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 39268928, "retrieval_score": 11.262298}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 39268928, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 39268928, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 39268928, "retrieval_score": 11.262298}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 39268928, "retrieval_score": 11.262298}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 39268928, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 39268928, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 39268928, "retrieval_score": 12.450847}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90, "for": 39268928, "retrieval_score": 10.769655}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298, "for": 39268928, "retrieval_score": 10.769655}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689, "for": 13655392, "retrieval_score": 9.696108}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694, "for": 13655392, "retrieval_score": 9.696108}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 13655392, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 13655392, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13655392, "retrieval_score": 4.3136783}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 13655392, "retrieval_score": 6.7004194}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954, "for": 13655392, "retrieval_score": 6.7004194}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019, "for": 13655392, "retrieval_score": 6.7004194}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 13655392, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 13655392, "retrieval_score": 6.4322023}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 18397805, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859, "for": 18397805, "retrieval_score": 9.801861}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863, "for": 18397805, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867, "for": 18397805, "retrieval_score": 9.801861}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871, "for": 18397805, "retrieval_score": 9.801861}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 8199398, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 8199398, "retrieval_score": 5.933986}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 8199398, "retrieval_score": 6.788617}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 8199398, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 8199398, "retrieval_score": 5.933986}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2151517, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2151517, "retrieval_score": 8.756195}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 2151517, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 2151517, "retrieval_score": 8.514181}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2151517, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 2151517, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 2151517, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 2151517, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 2151517, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 2151517, "retrieval_score": 14.621655}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 36190533, "retrieval_score": 10.275188}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943, "for": 4324790, "retrieval_score": 21.326288}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992, "for": 4324790, "retrieval_score": 21.326288}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993, "for": 4324790, "retrieval_score": 21.326288}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995, "for": 4324790, "retrieval_score": 21.326288}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001, "for": 4324790, "retrieval_score": 21.326288}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 28767642, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 28767642, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 28767642, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 28767642, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 28767642, "retrieval_score": 14.046785}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964, "for": 21350605, "retrieval_score": 6.788617}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 21350605, "retrieval_score": 6.4322023}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 21350605, "retrieval_score": 7.3108277}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964, "for": 21350605, "retrieval_score": 6.788617}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 21350605, "retrieval_score": 6.4322023}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6278847, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 6278847, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 6278847, "retrieval_score": 7.289562}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 4552380, "retrieval_score": 9.029783}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 4552380, "retrieval_score": 8.612926}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331, "for": 4552380, "retrieval_score": 8.612926}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333, "for": 4552380, "retrieval_score": 8.612926}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4552380, "retrieval_score": 8.069274}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 4574509, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 4574509, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4574509, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 4574509, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 4574509, "retrieval_score": 8.055008}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 40196941, "retrieval_score": 6.9149857}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 40196941, "retrieval_score": 6.9149857}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 40196941, "retrieval_score": 6.9149857}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 40196941, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 40196941, "retrieval_score": 6.788617}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 6372228, "retrieval_score": 26.268585}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 6372228, "retrieval_score": 26.268585}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 6372228, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 6372228, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 6372228, "retrieval_score": 24.54819}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 4338032, "retrieval_score": 11.867972}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 4338032, "retrieval_score": 11.867972}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 4338032, "retrieval_score": 11.867972}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 4338032, "retrieval_score": 10.950673}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 4338032, "retrieval_score": 10.950673}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 11361985, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 11361985, "retrieval_score": 8.514181}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 11361985, "retrieval_score": 7.7504354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 11361985, "retrieval_score": 7.724916}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 11361985, "retrieval_score": 7.1087627}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 11361985, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 11361985, "retrieval_score": 8.514181}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 11361985, "retrieval_score": 7.7504354}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 11361985, "retrieval_score": 7.724916}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 11361985, "retrieval_score": 7.1087627}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 12307099, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 12307099, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 12307099, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 12307099, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 12307099, "retrieval_score": 8.253944}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301, "for": 11406091, "retrieval_score": 8.8023}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302, "for": 11406091, "retrieval_score": 8.8023}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303, "for": 11406091, "retrieval_score": 8.8023}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842, "for": 11406091, "retrieval_score": 8.8023}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843, "for": 11406091, "retrieval_score": 8.8023}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699, "for": 861190, "retrieval_score": 7.724916}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 861190, "retrieval_score": 7.2534}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741, "for": 861190, "retrieval_score": 6.3532634}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 861190, "retrieval_score": 6.3532634}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740, "for": 861190, "retrieval_score": 5.6518736}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 861190, "retrieval_score": 29.82325}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 861190, "retrieval_score": 25.597864}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 861190, "retrieval_score": 25.597864}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 861190, "retrieval_score": 25.597864}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 861190, "retrieval_score": 24.54819}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 14986218, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 14986218, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 14986218, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 14986218, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 14986218, "retrieval_score": 13.2869215}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 4690094, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 4690094, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 4690094, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 4690094, "retrieval_score": 18.57447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4690094, "retrieval_score": 16.36546}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 2742784, "retrieval_score": 9.696108}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2742784, "retrieval_score": 9.050911}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 2742784, "retrieval_score": 8.322354}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2742784, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2742784, "retrieval_score": 7.5568957}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1348026, "retrieval_score": 35.277557}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 1348026, "retrieval_score": 27.089352}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 1348026, "retrieval_score": 27.089352}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 1348026, "retrieval_score": 27.089352}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202, "for": 1348026, "retrieval_score": 20.365852}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 40535203, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 40535203, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 40535203, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 40535203, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 40535203, "retrieval_score": 14.621655}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 931092, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 931092, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 931092, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 931092, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 931092, "retrieval_score": 4.027504}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 931092, "retrieval_score": 10.275188}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 931092, "retrieval_score": 10.275188}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 931092, "retrieval_score": 5.4753366}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 931092, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 931092, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 931092, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 931092, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 931092, "retrieval_score": 4.027504}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 931092, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 931092, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 931092, "retrieval_score": 5.4753366}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 931092, "retrieval_score": 17.80196}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 931092, "retrieval_score": 17.80196}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 931092, "retrieval_score": 17.80196}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 931092, "retrieval_score": 16.42601}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 931092, "retrieval_score": 16.42601}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099, "for": 931092, "retrieval_score": 10.275188}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 931092, "retrieval_score": 5.627493}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 11064917, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 11064917, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 11064917, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 11064917, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 11064917, "retrieval_score": 21.070179}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848, "for": 33824334, "retrieval_score": 9.208992}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 33824334, "retrieval_score": 9.050911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 33824334, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 33824334, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 33824334, "retrieval_score": 7.8520374}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 10213994, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 10213994, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10213994, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 10213994, "retrieval_score": 8.756195}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 10213994, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 10213994, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 10213994, "retrieval_score": 9.029783}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10213994, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 10213994, "retrieval_score": 8.756195}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 10213994, "retrieval_score": 8.615965}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 9236926, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 9236926, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 9236926, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 9236926, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 9236926, "retrieval_score": 8.253944}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 899103, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 899103, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 899103, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 899103, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 899103, "retrieval_score": 13.252438}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 899103, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 899103, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 899103, "retrieval_score": 7.3884673}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 899103, "retrieval_score": 6.626219}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 899103, "retrieval_score": 6.626219}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434, "for": 899103, "retrieval_score": 8.322354}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714, "for": 899103, "retrieval_score": 8.322354}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415, "for": 899103, "retrieval_score": 7.9661465}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425, "for": 899103, "retrieval_score": 7.9661465}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416, "for": 899103, "retrieval_score": 5.9889717}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434, "for": 899103, "retrieval_score": 8.322354}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714, "for": 899103, "retrieval_score": 8.322354}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507, "for": 899103, "retrieval_score": 5.4753366}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894, "for": 899103, "retrieval_score": 5.4753366}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990, "for": 899103, "retrieval_score": 5.4753366}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952, "for": 2631935, "retrieval_score": 8.625506}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33, "for": 2631935, "retrieval_score": 8.254504}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732, "for": 2631935, "retrieval_score": 7.703372}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 2631935, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 2631935, "retrieval_score": 7.5568957}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492, "for": 7164679, "retrieval_score": 8.069274}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590, "for": 7164679, "retrieval_score": 7.546283}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 7164679, "retrieval_score": 6.926011}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532, "for": 7164679, "retrieval_score": 6.926011}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533, "for": 7164679, "retrieval_score": 6.926011}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 14850853, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 14850853, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 14850853, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 14850853, "retrieval_score": 7.703372}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783, "for": 14850853, "retrieval_score": 7.703372}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 415511, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 415511, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 415511, "retrieval_score": 8.819389}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 415511, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 415511, "retrieval_score": 16.644709}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 415511, "retrieval_score": 8.819389}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 415511, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 415511, "retrieval_score": 7.9661465}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 415511, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 415511, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 415511, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 415511, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 415511, "retrieval_score": 11.469158}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 415511, "retrieval_score": 9.696108}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 415511, "retrieval_score": 8.819389}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 415511, "retrieval_score": 8.322354}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 415511, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 415511, "retrieval_score": 7.098534}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 415511, "retrieval_score": 38.78443}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 415511, "retrieval_score": 33.289417}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 415511, "retrieval_score": 8.819389}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346, "for": 415511, "retrieval_score": 7.9661465}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386, "for": 415511, "retrieval_score": 7.9661465}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 19819863, "retrieval_score": 10.275188}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 37497559, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 37497559, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 37497559, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 37497559, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 37497559, "retrieval_score": 4.027504}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 15940280, "retrieval_score": 9.696108}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 15940280, "retrieval_score": 8.322354}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 12845112, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 12845112, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 12845112, "retrieval_score": 9.677206}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 12845112, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 12845112, "retrieval_score": 9.335693}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916, "for": 35414625, "retrieval_score": 11.312834}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 39381222, "retrieval_score": 10.724819}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 39381222, "retrieval_score": 10.182877}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080, "for": 39381222, "retrieval_score": 9.058704}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 39381222, "retrieval_score": 8.356815}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 39381222, "retrieval_score": 8.356815}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 7996940, "retrieval_score": 13.948992}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 7996940, "retrieval_score": 11.255368}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7996940, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 7996940, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 7996940, "retrieval_score": 8.857946}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 3476732, "retrieval_score": 8.9242325}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 3476732, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 3476732, "retrieval_score": 8.612926}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 3476732, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 3476732, "retrieval_score": 7.8520374}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 317413, "retrieval_score": 6.0532236}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787, "for": 317413, "retrieval_score": 5.3849573}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142, "for": 317413, "retrieval_score": 4.849573}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144, "for": 317413, "retrieval_score": 4.849573}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835, "for": 317413, "retrieval_score": 4.849573}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 849674, "retrieval_score": 18.059566}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748, "for": 849674, "retrieval_score": 13.577234}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255, "for": 849674, "retrieval_score": 13.577234}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747, "for": 849674, "retrieval_score": 12.07833}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249, "for": 849674, "retrieval_score": 7.0700746}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254, "for": 849674, "retrieval_score": 18.059566}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748, "for": 849674, "retrieval_score": 13.577234}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255, "for": 849674, "retrieval_score": 13.577234}
{"snippet": "IMAP4.thread(threading_algorithm, charset, search_criterion)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4747, "for": 849674, "retrieval_score": 12.07833}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249, "for": 849674, "retrieval_score": 7.0700746}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3989016, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3989016, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 3989016, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 3989016, "retrieval_score": 8.896322}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 3989016, "retrieval_score": 8.896322}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 42731970, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 42731970, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 42731970, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 42731970, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 42731970, "retrieval_score": 6.266589}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 33147992, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 33147992, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 33147992, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 33147992, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 33147992, "retrieval_score": 14.046785}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7900882, "retrieval_score": 27.682129}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7900882, "retrieval_score": 27.682129}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 7900882, "retrieval_score": 24.54819}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 16228248, "retrieval_score": 15.493557}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 16228248, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 16228248, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 16228248, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 16228248, "retrieval_score": 8.18273}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 943809, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 943809, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 943809, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 943809, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 943809, "retrieval_score": 6.266589}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 14104778, "retrieval_score": 8.819389}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 30605909, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 30605909, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 30605909, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 30605909, "retrieval_score": 8.069274}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 30605909, "retrieval_score": 7.1087627}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18082130, "retrieval_score": 10.207137}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 18082130, "retrieval_score": 10.207137}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 18082130, "retrieval_score": 10.207137}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 18082130, "retrieval_score": 10.207137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 18082130, "retrieval_score": 10.207137}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238, "for": 1946181, "retrieval_score": 13.235189}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245, "for": 1946181, "retrieval_score": 13.235189}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481, "for": 1946181, "retrieval_score": 13.235189}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498, "for": 1946181, "retrieval_score": 13.235189}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250, "for": 1946181, "retrieval_score": 10.603445}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 1101508, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 1101508, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 1101508, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 1101508, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 1101508, "retrieval_score": 11.469158}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 2674391, "retrieval_score": 8.322354}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 2674391, "retrieval_score": 7.289562}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 2674391, "retrieval_score": 8.322354}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 2674391, "retrieval_score": 7.289562}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 2674391, "retrieval_score": 5.933986}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129, "for": 2233917, "retrieval_score": 9.800473}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161, "for": 2233917, "retrieval_score": 9.800473}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2233917, "retrieval_score": 9.050911}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035, "for": 2233917, "retrieval_score": 8.407638}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021, "for": 2233917, "retrieval_score": 8.18273}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2233917, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2233917, "retrieval_score": 16.414843}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 2233917, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 2233917, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2233917, "retrieval_score": 12.450847}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 13093727, "retrieval_score": 23.237347}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 13093727, "retrieval_score": 23.237347}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 13093727, "retrieval_score": 18.781567}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 13093727, "retrieval_score": 18.781567}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 13093727, "retrieval_score": 18.781567}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 13093727, "retrieval_score": 13.846563}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 13093727, "retrieval_score": 13.846563}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119, "for": 13093727, "retrieval_score": 11.09325}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121, "for": 13093727, "retrieval_score": 11.09325}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9174, "for": 13093727, "retrieval_score": 11.09325}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 18200052, "retrieval_score": 12.050466}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 18200052, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 18200052, "retrieval_score": 10.55502}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 18200052, "retrieval_score": 10.55502}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 18200052, "retrieval_score": 10.55502}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 1854, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 1854, "retrieval_score": 7.289562}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486, "for": 1854, "retrieval_score": 7.784379}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496, "for": 1854, "retrieval_score": 7.784379}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510, "for": 1854, "retrieval_score": 7.784379}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7490, "for": 1854, "retrieval_score": 6.6814804}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491, "for": 1854, "retrieval_score": 6.6814804}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1854, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 1854, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 1854, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 1854, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 1854, "retrieval_score": 6.066503}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 11791568, "retrieval_score": 23.070126}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 11791568, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 11791568, "retrieval_score": 18.016369}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 11791568, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 11791568, "retrieval_score": 13.2869215}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896, "for": 2847272, "retrieval_score": 7.2534}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225, "for": 2847272, "retrieval_score": 7.2534}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308, "for": 2847272, "retrieval_score": 7.2534}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310, "for": 2847272, "retrieval_score": 7.2534}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254, "for": 2847272, "retrieval_score": 7.063963}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 15148684, "retrieval_score": 22.089222}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 15148684, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 15148684, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 15148684, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 15148684, "retrieval_score": 13.2869215}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 2153444, "retrieval_score": 21.101997}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 2153444, "retrieval_score": 21.101997}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862, "for": 2153444, "retrieval_score": 21.101997}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866, "for": 2153444, "retrieval_score": 21.101997}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870, "for": 2153444, "retrieval_score": 21.101997}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 17558552, "retrieval_score": 8.8023}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965, "for": 17558552, "retrieval_score": 8.616077}
{"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966, "for": 17558552, "retrieval_score": 8.616077}
{"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968, "for": 17558552, "retrieval_score": 8.616077}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069, "for": 17558552, "retrieval_score": 8.612926}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 21771133, "retrieval_score": 17.660248}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 21771133, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 21771133, "retrieval_score": 16.414843}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 21771133, "retrieval_score": 12.340725}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 21771133, "retrieval_score": 10.542535}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 39129846, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 39129846, "retrieval_score": 16.414843}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 39129846, "retrieval_score": 13.45779}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 39129846, "retrieval_score": 12.340725}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 39129846, "retrieval_score": 11.551079}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 8009176, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 8009176, "retrieval_score": 7.3926377}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 8009176, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862, "for": 8009176, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864, "for": 8009176, "retrieval_score": 6.54706}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 36454494, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 36454494, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 36454494, "retrieval_score": 9.292767}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065, "for": 36454494, "retrieval_score": 8.290298}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 36454494, "retrieval_score": 7.5673985}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 12224778, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 12224778, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 12224778, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 12224778, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 12224778, "retrieval_score": 8.857946}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697, "for": 4921038, "retrieval_score": 7.7504354}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051, "for": 4921038, "retrieval_score": 7.7504354}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332, "for": 4921038, "retrieval_score": 6.788617}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334, "for": 4921038, "retrieval_score": 6.788617}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027, "for": 4921038, "retrieval_score": 6.4752216}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 2783079, "retrieval_score": 23.139593}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 2783079, "retrieval_score": 23.139593}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902, "for": 2783079, "retrieval_score": 12.864405}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 120656, "retrieval_score": 19.835854}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 120656, "retrieval_score": 19.835854}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 120656, "retrieval_score": 19.835854}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 120656, "retrieval_score": 19.835854}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 120656, "retrieval_score": 19.835854}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 120656, "retrieval_score": 8.819389}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 120656, "retrieval_score": 4.4333334}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 120656, "retrieval_score": 4.4333334}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 120656, "retrieval_score": 4.4333334}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 120656, "retrieval_score": 4.4333334}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 11816315, "retrieval_score": 16.433529}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 11816315, "retrieval_score": 13.7208805}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 11816315, "retrieval_score": 13.7208805}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040, "for": 11816315, "retrieval_score": 11.776893}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 11816315, "retrieval_score": 11.776893}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 3258573, "retrieval_score": 16.580345}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 3258573, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 3258573, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 3258573, "retrieval_score": 16.507889}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 3258573, "retrieval_score": 16.507889}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3241594, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3241594, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 3241594, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 3241594, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 3241594, "retrieval_score": 6.066503}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 22296496, "retrieval_score": 9.029783}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 22296496, "retrieval_score": 9.029783}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 22296496, "retrieval_score": 7.7504354}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 22296496, "retrieval_score": 7.7504354}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790, "for": 22296496, "retrieval_score": 7.034341}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 247770, "retrieval_score": 9.478593}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081, "for": 247770, "retrieval_score": 8.432172}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 247770, "retrieval_score": 8.069274}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083, "for": 247770, "retrieval_score": 7.5938272}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 247770, "retrieval_score": 6.926011}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 247770, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 247770, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 247770, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 247770, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 247770, "retrieval_score": 6.066503}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 247770, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 247770, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 247770, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 247770, "retrieval_score": 8.866667}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824, "for": 247770, "retrieval_score": 8.866667}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 7026131, "retrieval_score": 13.09412}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862, "for": 7026131, "retrieval_score": 13.09412}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864, "for": 7026131, "retrieval_score": 13.09412}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755, "for": 7026131, "retrieval_score": 11.679382}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754, "for": 7026131, "retrieval_score": 11.469158}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 22918212, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 22918212, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 22918212, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 22918212, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 22918212, "retrieval_score": 6.926011}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13891559, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13891559, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 13891559, "retrieval_score": 8.18273}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 13891559, "retrieval_score": 7.0233927}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 13891559, "retrieval_score": 7.0233927}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 12030074, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 12030074, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 12030074, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 12030074, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 12030074, "retrieval_score": 14.046785}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 3411025, "retrieval_score": 13.803625}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 3411025, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 3411025, "retrieval_score": 10.754423}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 3411025, "retrieval_score": 9.696108}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159, "for": 3411025, "retrieval_score": 9.288356}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 3411025, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 3411025, "retrieval_score": 8.322354}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 3411025, "retrieval_score": 8.308816}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043, "for": 3411025, "retrieval_score": 8.308816}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 3411025, "retrieval_score": 8.308816}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 3847472, "retrieval_score": 12.354825}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 3847472, "retrieval_score": 12.354825}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 3847472, "retrieval_score": 12.354825}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 3847472, "retrieval_score": 12.354825}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 3847472, "retrieval_score": 12.354825}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83, "for": 12402561, "retrieval_score": 6.7207417}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 12402561, "retrieval_score": 6.039165}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82, "for": 12402561, "retrieval_score": 5.7685404}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96, "for": 12402561, "retrieval_score": 5.7685404}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616, "for": 12402561, "retrieval_score": 5.7685404}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 2508861, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 2508861, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 2508861, "retrieval_score": 7.5568957}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942, "for": 2508861, "retrieval_score": 6.4862275}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 2508861, "retrieval_score": 5.681296}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3308102, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3308102, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3308102, "retrieval_score": 12.450847}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087, "for": 3308102, "retrieval_score": 10.275188}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 3308102, "retrieval_score": 8.857946}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894, "for": 16114333, "retrieval_score": 9.314677}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895, "for": 16114333, "retrieval_score": 9.314677}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283, "for": 16114333, "retrieval_score": 7.002801}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 10941229, "retrieval_score": 13.016085}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 10941229, "retrieval_score": 13.016085}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 10941229, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 10941229, "retrieval_score": 8.756195}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 10941229, "retrieval_score": 8.322354}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 36957908, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 36957908, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 36957908, "retrieval_score": 7.063412}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089, "for": 36957908, "retrieval_score": 7.063412}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667, "for": 36957908, "retrieval_score": 7.063412}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 455612, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 455612, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 455612, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 455612, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 455612, "retrieval_score": 6.066503}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 455612, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 455612, "retrieval_score": 6.926011}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 455612, "retrieval_score": 6.676981}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 455612, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 455612, "retrieval_score": 6.066503}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 455612, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 455612, "retrieval_score": 8.322354}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 455612, "retrieval_score": 8.290173}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 455612, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 455612, "retrieval_score": 6.926011}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 455612, "retrieval_score": 9.696108}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 455612, "retrieval_score": 8.322354}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 455612, "retrieval_score": 8.290173}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 455612, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 455612, "retrieval_score": 6.926011}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 455612, "retrieval_score": 6.025233}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 455612, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923, "for": 455612, "retrieval_score": 5.27751}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925, "for": 455612, "retrieval_score": 5.27751}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 455612, "retrieval_score": 5.27751}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 455612, "retrieval_score": 10.542535}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 455612, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 455612, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 455612, "retrieval_score": 8.8023}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 455612, "retrieval_score": 6.676981}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 455612, "retrieval_score": 6.676981}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 455612, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 455612, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 455612, "retrieval_score": 5.8480387}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 455612, "retrieval_score": 5.8480387}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307, "for": 9652832, "retrieval_score": 12.022469}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309, "for": 9652832, "retrieval_score": 9.367949}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 9652832, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 9652832, "retrieval_score": 8.322354}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 9652832, "retrieval_score": 7.1087627}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 18722196, "retrieval_score": 8.322354}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 18722196, "retrieval_score": 6.4848065}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842, "for": 18722196, "retrieval_score": 6.2286806}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616, "for": 18722196, "retrieval_score": 6.2286806}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803, "for": 18722196, "retrieval_score": 5.4557104}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8671702, "retrieval_score": 11.442135}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 8671702, "retrieval_score": 10.022182}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729, "for": 8671702, "retrieval_score": 9.029783}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8671702, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 8671702, "retrieval_score": 8.779708}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 9497290, "retrieval_score": 19.392216}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 9497290, "retrieval_score": 16.644709}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 9497290, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 9497290, "retrieval_score": 14.214895}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418, "for": 9497290, "retrieval_score": 14.005602}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 3097866, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 3097866, "retrieval_score": 9.314677}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058, "for": 3097866, "retrieval_score": 8.322354}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656, "for": 3097866, "retrieval_score": 8.308816}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043, "for": 3097866, "retrieval_score": 8.308816}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 3097866, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 3097866, "retrieval_score": 9.314677}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3097866, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3097866, "retrieval_score": 8.756195}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058, "for": 3097866, "retrieval_score": 8.322354}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 42012589, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 42012589, "retrieval_score": 8.322354}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 42012589, "retrieval_score": 7.6829867}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216, "for": 42012589, "retrieval_score": 6.834798}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787, "for": 42012589, "retrieval_score": 6.834798}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 13408919, "retrieval_score": 11.453697}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 13408919, "retrieval_score": 11.453697}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13408919, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 13408919, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 13408919, "retrieval_score": 8.857946}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 39804375, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 39804375, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 39804375, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 39804375, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 39804375, "retrieval_score": 8.857946}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667, "for": 6250046, "retrieval_score": 6.334627}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671, "for": 6250046, "retrieval_score": 6.334627}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801, "for": 6250046, "retrieval_score": 6.334627}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834, "for": 6250046, "retrieval_score": 6.334627}
{"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840, "for": 6250046, "retrieval_score": 6.334627}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948, "for": 21018612, "retrieval_score": 16.644709}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949, "for": 21018612, "retrieval_score": 12.969613}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535, "for": 21018612, "retrieval_score": 9.906801}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 21018612, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 21018612, "retrieval_score": 8.322354}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 32296933, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 32296933, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 32296933, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 32296933, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 32296933, "retrieval_score": 13.252438}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 32296933, "retrieval_score": 26.504875}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 32296933, "retrieval_score": 26.504875}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 32296933, "retrieval_score": 26.504875}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 32296933, "retrieval_score": 26.504875}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 32296933, "retrieval_score": 26.504875}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 17856928, "retrieval_score": 8.8023}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 17856928, "retrieval_score": 5.3017225}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 17856928, "retrieval_score": 4.4223604}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 17856928, "retrieval_score": 4.4223604}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315, "for": 17856928, "retrieval_score": 3.793206}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 14465279, "retrieval_score": 8.819389}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673, "for": 3365673, "retrieval_score": 17.225851}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857, "for": 3365673, "retrieval_score": 17.225851}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530, "for": 3365673, "retrieval_score": 12.950443}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If no `target` is specified , the target will need to be set using setTarget ( ) before this handler does anything useful .", "question_id": 5533, "for": 3365673, "retrieval_score": 10.3753195}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534, "for": 3365673, "retrieval_score": 10.3753195}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 3845423, "retrieval_score": 26.268585}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 3845423, "retrieval_score": 26.268585}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 3845423, "retrieval_score": 21.932484}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 3845423, "retrieval_score": 21.932484}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 3845423, "retrieval_score": 21.932484}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267, "for": 4270742, "retrieval_score": 9.79767}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 4270742, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 4270742, "retrieval_score": 6.4862275}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 4270742, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 4270742, "retrieval_score": 6.266589}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 35118265, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 35118265, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 35118265, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 35118265, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 35118265, "retrieval_score": 6.266589}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886, "for": 40055835, "retrieval_score": 12.80146}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 40055835, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 40055835, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 40055835, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 40055835, "retrieval_score": 12.407009}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 21206395, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 21206395, "retrieval_score": 8.322354}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 21206395, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 21206395, "retrieval_score": 8.322354}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 21206395, "retrieval_score": 6.7207417}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017, "for": 1186789, "retrieval_score": 17.6046}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016, "for": 1186789, "retrieval_score": 15.110364}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147, "for": 1186789, "retrieval_score": 13.235189}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015, "for": 1186789, "retrieval_score": 13.235189}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 1186789, "retrieval_score": 12.969613}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 1186789, "retrieval_score": 6.4848065}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 1186789, "retrieval_score": 6.3532634}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607, "for": 1186789, "retrieval_score": 6.3532634}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663, "for": 1186789, "retrieval_score": 6.3532634}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 1186789, "retrieval_score": 6.3532634}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7142227, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7142227, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 7142227, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 7142227, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 7142227, "retrieval_score": 8.857946}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 7142227, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 7142227, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 7142227, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 7142227, "retrieval_score": 14.2175255}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804, "for": 7142227, "retrieval_score": 12.203173}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 7742752, "retrieval_score": 16.152182}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 7742752, "retrieval_score": 16.152182}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 7742752, "retrieval_score": 16.152182}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 7742752, "retrieval_score": 16.152182}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 7742752, "retrieval_score": 16.152182}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501, "for": 19011613, "retrieval_score": 9.029783}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504, "for": 19011613, "retrieval_score": 9.029783}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506, "for": 19011613, "retrieval_score": 9.029783}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 19011613, "retrieval_score": 8.8023}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041, "for": 19011613, "retrieval_score": 7.7504354}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 31267493, "retrieval_score": 18.872396}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 31267493, "retrieval_score": 18.872396}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 31267493, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 31267493, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 31267493, "retrieval_score": 16.36546}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 11697709, "retrieval_score": 17.028362}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 11697709, "retrieval_score": 17.028362}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 11697709, "retrieval_score": 14.2175255}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 11697709, "retrieval_score": 14.2175255}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 11697709, "retrieval_score": 14.2175255}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366, "for": 19602931, "retrieval_score": 9.077086}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 2406700, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 2406700, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 2406700, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 2406700, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 2406700, "retrieval_score": 7.1087627}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 41727442, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 41727442, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 41727442, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 41727442, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 41727442, "retrieval_score": 14.621655}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 20774910, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 20774910, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 20774910, "retrieval_score": 6.6814804}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 20774910, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 20774910, "retrieval_score": 6.066503}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 18391059, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 18391059, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 18391059, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 18391059, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 18391059, "retrieval_score": 5.627493}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 8970524, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 8970524, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 8970524, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 8970524, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 8970524, "retrieval_score": 4.027504}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 8970524, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 8970524, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 8970524, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 8970524, "retrieval_score": 24.54819}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 8970524, "retrieval_score": 21.070179}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 20638006, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 20638006, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 20638006, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 20638006, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 20638006, "retrieval_score": 7.0233927}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 9206964, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 9206964, "retrieval_score": 5.4753366}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 9206964, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 9206964, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 9206964, "retrieval_score": 5.4753366}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944, "for": 12182744, "retrieval_score": 9.564884}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 12182744, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 12182744, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 12182744, "retrieval_score": 8.779708}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886, "for": 12182744, "retrieval_score": 8.622599}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 6764909, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 6764909, "retrieval_score": 8.756195}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 6764909, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 6764909, "retrieval_score": 8.514181}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 6764909, "retrieval_score": 7.3108277}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 34437284, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 34437284, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 34437284, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 34437284, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 34437284, "retrieval_score": 14.046785}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5900683, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5900683, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 5900683, "retrieval_score": 8.18273}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 5900683, "retrieval_score": 8.18273}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 5900683, "retrieval_score": 7.0233927}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 1614236, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 1614236, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 1614236, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 1614236, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 1614236, "retrieval_score": 14.046785}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 13840379, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 13840379, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 13840379, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 13840379, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 13840379, "retrieval_score": 17.098473}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840, "for": 8687568, "retrieval_score": 7.5568957}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403, "for": 8687568, "retrieval_score": 7.5568957}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840, "for": 8687568, "retrieval_score": 7.5568957}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403, "for": 8687568, "retrieval_score": 7.5568957}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404, "for": 8687568, "retrieval_score": 6.4862275}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 4928526, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 4928526, "retrieval_score": 5.8480387}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347, "for": 4928526, "retrieval_score": 5.8480387}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 4928526, "retrieval_score": 5.8480387}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653, "for": 4928526, "retrieval_score": 5.8480387}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13781828, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13781828, "retrieval_score": 14.214895}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869, "for": 13781828, "retrieval_score": 12.706527}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885, "for": 13781828, "retrieval_score": 12.706527}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902, "for": 13781828, "retrieval_score": 12.706527}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 23145240, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 23145240, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 23145240, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 23145240, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 23145240, "retrieval_score": 21.070179}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728, "for": 20062565, "retrieval_score": 8.322354}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 20062565, "retrieval_score": 8.069274}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727, "for": 20062565, "retrieval_score": 7.289562}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 20062565, "retrieval_score": 6.926011}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 20062565, "retrieval_score": 6.7207417}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059, "for": 20457174, "retrieval_score": 19.392216}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058, "for": 20457174, "retrieval_score": 16.644709}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 20457174, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 20457174, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 20457174, "retrieval_score": 7.3108277}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608, "for": 6591931, "retrieval_score": 10.275188}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539, "for": 6591931, "retrieval_score": 9.029783}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6591931, "retrieval_score": 8.819389}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214, "for": 6591931, "retrieval_score": 7.871623}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218, "for": 6591931, "retrieval_score": 7.871623}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 18493677, "retrieval_score": 7.3108277}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 18493677, "retrieval_score": 7.3108277}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 18493677, "retrieval_score": 7.3108277}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 18493677, "retrieval_score": 7.3108277}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007, "for": 18493677, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 8735312, "retrieval_score": 8.819389}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725, "for": 8735312, "retrieval_score": 6.6175947}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377, "for": 8735312, "retrieval_score": 5.8870234}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "question_id": 1380, "for": 8735312, "retrieval_score": 4.8222804}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381, "for": 8735312, "retrieval_score": 4.8222804}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 11430863, "retrieval_score": 10.207137}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 11430863, "retrieval_score": 10.207137}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002, "for": 11430863, "retrieval_score": 10.207137}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 11430863, "retrieval_score": 10.207137}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034, "for": 11430863, "retrieval_score": 10.207137}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 10.275188}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1476, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1476, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1476, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 1476, "retrieval_score": 10.275188}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 1476, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 1476, "retrieval_score": 7.5568957}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 1476, "retrieval_score": 6.4862275}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 817122, "retrieval_score": 24.54819}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 817122, "retrieval_score": 24.54819}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 817122, "retrieval_score": 24.54819}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 817122, "retrieval_score": 24.54819}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 817122, "retrieval_score": 21.070179}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 817122, "retrieval_score": 9.555609}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 817122, "retrieval_score": 9.555609}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 817122, "retrieval_score": 9.555609}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 817122, "retrieval_score": 9.555609}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 817122, "retrieval_score": 9.555609}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 817122, "retrieval_score": 33.764957}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 817122, "retrieval_score": 33.764957}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 817122, "retrieval_score": 33.764957}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 817122, "retrieval_score": 33.764957}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 817122, "retrieval_score": 33.764957}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 436599, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 436599, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 436599, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 436599, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 436599, "retrieval_score": 8.055008}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 5864485, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 5864485, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 5864485, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 5864485, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 5864485, "retrieval_score": 6.066503}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 31405409, "retrieval_score": 6.9149857}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 31405409, "retrieval_score": 6.9149857}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 31405409, "retrieval_score": 6.9149857}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 31405409, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 31405409, "retrieval_score": 6.266589}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103, "for": 4302027, "retrieval_score": 9.6719265}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115, "for": 4302027, "retrieval_score": 9.6719265}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105, "for": 4302027, "retrieval_score": 7.7487173}
{"snippet": "controller.open(url, new=0, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible . With arguments `autoraise`.", "question_id": 12117, "for": 4302027, "retrieval_score": 7.7487173}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4302027, "retrieval_score": 7.2568364}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 4302027, "retrieval_score": 7.2568364}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869, "for": 4302027, "retrieval_score": 6.3532634}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885, "for": 4302027, "retrieval_score": 6.3532634}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902, "for": 4302027, "retrieval_score": 6.3532634}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906, "for": 4302027, "retrieval_score": 6.3532634}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 20668060, "retrieval_score": 9.696108}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928, "for": 20668060, "retrieval_score": 7.289562}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 20668060, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862, "for": 20668060, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864, "for": 20668060, "retrieval_score": 6.54706}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 4231345, "retrieval_score": 17.098473}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 4231345, "retrieval_score": 17.098473}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 4231345, "retrieval_score": 17.098473}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 4231345, "retrieval_score": 17.098473}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 4231345, "retrieval_score": 17.098473}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091, "for": 14306852, "retrieval_score": 13.643801}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071, "for": 14306852, "retrieval_score": 13.643801}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085, "for": 14306852, "retrieval_score": 13.643801}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093, "for": 14306852, "retrieval_score": 13.643801}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139, "for": 14306852, "retrieval_score": 13.643801}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86, "for": 14111705, "retrieval_score": 4.896931}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095, "for": 14111705, "retrieval_score": 4.896931}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787, "for": 14111705, "retrieval_score": 4.896931}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805, "for": 14111705, "retrieval_score": 4.896931}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243, "for": 14111705, "retrieval_score": 4.896931}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13295735, "retrieval_score": 4.6105547}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 13295735, "retrieval_score": 4.1138444}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 13295735, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321, "for": 13295735, "retrieval_score": 4.1138444}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322, "for": 13295735, "retrieval_score": 4.1138444}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 31385363, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 31385363, "retrieval_score": 8.322354}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 12218112, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 12218112, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 12218112, "retrieval_score": 12.450847}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 12218112, "retrieval_score": 9.696108}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890, "for": 12218112, "retrieval_score": 9.314677}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 40517350, "retrieval_score": 9.696108}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 40517350, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 40517350, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 40517350, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 40517350, "retrieval_score": 8.857946}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 4363072, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 4363072, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 4363072, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 4363072, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 4363072, "retrieval_score": 11.469158}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3718657, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 3718657, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 3718657, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 3718657, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 3718657, "retrieval_score": 8.866667}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 15175142, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 15175142, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 15175142, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 15175142, "retrieval_score": 10.32076}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 15175142, "retrieval_score": 9.335693}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 19641579, "retrieval_score": 14.498791}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 19641579, "retrieval_score": 14.498791}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 19641579, "retrieval_score": 14.498791}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945, "for": 19641579, "retrieval_score": 12.898149}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 19641579, "retrieval_score": 12.065391}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3430372, "retrieval_score": 17.638779}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948, "for": 3430372, "retrieval_score": 8.866667}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952, "for": 3430372, "retrieval_score": 8.866667}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767, "for": 3430372, "retrieval_score": 8.866667}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769, "for": 3430372, "retrieval_score": 8.866667}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022, "for": 14932247, "retrieval_score": 10.993155}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021, "for": 14932247, "retrieval_score": 9.435634}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14932247, "retrieval_score": 8.9242325}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582, "for": 14932247, "retrieval_score": 8.443655}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589, "for": 14932247, "retrieval_score": 8.443655}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 2764586, "retrieval_score": 7.1087627}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587, "for": 2764586, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862, "for": 2764586, "retrieval_score": 6.54706}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864, "for": 2764586, "retrieval_score": 6.54706}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 2764586, "retrieval_score": 6.1015863}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903, "for": 30651487, "retrieval_score": 17.638779}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62, "for": 30651487, "retrieval_score": 3.793206}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61, "for": 30651487, "retrieval_score": 3.5413013}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60, "for": 30651487, "retrieval_score": 3.3207712}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59, "for": 30651487, "retrieval_score": 3.126097}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 3780403, "retrieval_score": 18.232801}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 3780403, "retrieval_score": 18.232801}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3780403, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3780403, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 3780403, "retrieval_score": 11.254986}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 4233476, "retrieval_score": 21.064785}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 4233476, "retrieval_score": 18.450676}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 4233476, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 4233476, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 4233476, "retrieval_score": 13.2869215}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 4233476, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 4233476, "retrieval_score": 9.8809595}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664, "for": 4233476, "retrieval_score": 7.9161854}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667, "for": 4233476, "retrieval_score": 7.9161854}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 4233476, "retrieval_score": 7.377835}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 2152898, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 2152898, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 2152898, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 2152898, "retrieval_score": 24.207823}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905, "for": 2152898, "retrieval_score": 20.778034}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 5775719, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 5775719, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 5775719, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 5775719, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 5775719, "retrieval_score": 13.252438}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398, "for": 13418405, "retrieval_score": 3.9162004}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515, "for": 13418405, "retrieval_score": 3.9162004}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026, "for": 13418405, "retrieval_score": 3.9162004}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028, "for": 13418405, "retrieval_score": 3.9162004}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254, "for": 13418405, "retrieval_score": 3.9162004}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 19410018, "retrieval_score": 12.605309}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 19410018, "retrieval_score": 12.605309}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657, "for": 19410018, "retrieval_score": 6.9778156}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 19410018, "retrieval_score": 6.9778156}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494, "for": 19410018, "retrieval_score": 6.9778156}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 21562986, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 21562986, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 21562986, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 21562986, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 21562986, "retrieval_score": 8.253944}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069, "for": 1093322, "retrieval_score": 8.612926}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071, "for": 1093322, "retrieval_score": 8.612926}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822, "for": 1093322, "retrieval_score": 8.612926}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 1093322, "retrieval_score": 7.703372}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 13490292, "retrieval_score": 9.442764}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 13490292, "retrieval_score": 9.221109}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512, "for": 13490292, "retrieval_score": 8.308816}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513, "for": 13490292, "retrieval_score": 8.308816}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688, "for": 13490292, "retrieval_score": 8.308816}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 12791501, "retrieval_score": 10.824865}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 12791501, "retrieval_score": 10.824865}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 12791501, "retrieval_score": 10.824865}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 12791501, "retrieval_score": 10.413424}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 12791501, "retrieval_score": 10.413424}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 8092877, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 8092877, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 8092877, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 8092877, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 8092877, "retrieval_score": 8.779708}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 8092877, "retrieval_score": 14.621655}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 8092877, "retrieval_score": 14.621655}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 8092877, "retrieval_score": 14.621655}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 8092877, "retrieval_score": 14.621655}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007, "for": 8092877, "retrieval_score": 14.621655}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 7522533, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 7522533, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 7522533, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 7522533, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 7522533, "retrieval_score": 7.3108277}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 18504967, "retrieval_score": 9.696108}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 18504967, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 18504967, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 18504967, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 18504967, "retrieval_score": 8.896322}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 973473, "retrieval_score": 8.819389}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266, "for": 973473, "retrieval_score": 8.069274}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584, "for": 973473, "retrieval_score": 8.069274}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707, "for": 973473, "retrieval_score": 6.926011}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713, "for": 973473, "retrieval_score": 6.926011}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 973473, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 973473, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 973473, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 973473, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 973473, "retrieval_score": 8.857946}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 4484690, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 4484690, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 4484690, "retrieval_score": 16.36546}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957, "for": 4484690, "retrieval_score": 15.683336}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4484690, "retrieval_score": 15.493557}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 4484690, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 4484690, "retrieval_score": 22.314278}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 4484690, "retrieval_score": 16.138548}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 19384532, "retrieval_score": 7.724916}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288, "for": 19384532, "retrieval_score": 6.511324}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291, "for": 19384532, "retrieval_score": 6.511324}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650, "for": 19384532, "retrieval_score": 6.511324}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094, "for": 19384532, "retrieval_score": 6.511324}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 13283689, "retrieval_score": 12.354825}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 13283689, "retrieval_score": 12.354825}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 13283689, "retrieval_score": 12.354825}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 13283689, "retrieval_score": 12.354825}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 13283689, "retrieval_score": 12.354825}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1580270, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1580270, "retrieval_score": 18.095016}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1580270, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1580270, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1580270, "retrieval_score": 16.36546}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 6480441, "retrieval_score": 17.225851}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 6480441, "retrieval_score": 17.225851}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 6480441, "retrieval_score": 14.785275}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164, "for": 6480441, "retrieval_score": 14.785275}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 6480441, "retrieval_score": 13.223902}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 3548673, "retrieval_score": 8.819389}
{"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342, "for": 3548673, "retrieval_score": 8.361314}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3548673, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3548673, "retrieval_score": 6.926011}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344, "for": 3548673, "retrieval_score": 6.6987123}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 19954469, "retrieval_score": 9.221109}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 19954469, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 19954469, "retrieval_score": 8.514181}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 19954469, "retrieval_score": 8.227689}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213, "for": 19954469, "retrieval_score": 8.227689}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 17306755, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 17306755, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 17306755, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 17306755, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 17306755, "retrieval_score": 11.254986}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 6879364, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 6879364, "retrieval_score": 8.069274}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096, "for": 6879364, "retrieval_score": 7.7504354}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 6879364, "retrieval_score": 6.926011}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098, "for": 6879364, "retrieval_score": 6.788617}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088, "for": 9621388, "retrieval_score": 4.7778044}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 716477, "retrieval_score": 17.848257}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 716477, "retrieval_score": 17.848257}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901, "for": 716477, "retrieval_score": 17.848257}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 716477, "retrieval_score": 17.025373}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 716477, "retrieval_score": 17.025373}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045, "for": 716477, "retrieval_score": 13.016085}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154, "for": 716477, "retrieval_score": 13.016085}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 716477, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 716477, "retrieval_score": 8.756195}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 716477, "retrieval_score": 8.322354}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 16766643, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 16766643, "retrieval_score": 16.644709}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 16766643, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 16766643, "retrieval_score": 16.644709}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 16766643, "retrieval_score": 8.253944}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 2793324, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 2793324, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 2793324, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 2793324, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 2793324, "retrieval_score": 8.253944}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 2793324, "retrieval_score": 8.473424}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 2793324, "retrieval_score": 7.5379715}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 2793324, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 2793324, "retrieval_score": 6.4322023}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 2793324, "retrieval_score": 6.4322023}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 2793324, "retrieval_score": 4.838603}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014, "for": 2793324, "retrieval_score": 5.917909}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 2793324, "retrieval_score": 4.838603}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 2793324, "retrieval_score": 16.946848}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 2793324, "retrieval_score": 15.075943}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 2793324, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900, "for": 2793324, "retrieval_score": 12.864405}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901, "for": 2793324, "retrieval_score": 12.864405}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682, "for": 2793324, "retrieval_score": 11.15621}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237, "for": 2793324, "retrieval_score": 9.314677}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238, "for": 2793324, "retrieval_score": 9.314677}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 2793324, "retrieval_score": 8.473424}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 2793324, "retrieval_score": 7.5379715}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 17467504, "retrieval_score": 33.870216}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 17467504, "retrieval_score": 33.870216}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 17467504, "retrieval_score": 33.870216}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 17467504, "retrieval_score": 31.137127}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 17467504, "retrieval_score": 31.137127}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 41469647, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 41469647, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 41469647, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 41469647, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 41469647, "retrieval_score": 8.857946}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 930397, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 930397, "retrieval_score": 7.3108277}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 930397, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 930397, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 930397, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 930397, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 930397, "retrieval_score": 4.027504}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 930397, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 930397, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 930397, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 930397, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 930397, "retrieval_score": 4.027504}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 31743603, "retrieval_score": 24.54819}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 31743603, "retrieval_score": 24.54819}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 31743603, "retrieval_score": 24.54819}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 31743603, "retrieval_score": 21.070179}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 31743603, "retrieval_score": 21.070179}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 31743603, "retrieval_score": 17.848465}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 31743603, "retrieval_score": 17.559416}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 31743603, "retrieval_score": 17.559416}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 31743603, "retrieval_score": 17.559416}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 31743603, "retrieval_score": 15.704075}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 31743603, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 31743603, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 31743603, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 31743603, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 31743603, "retrieval_score": 14.046785}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277, "for": 28134319, "retrieval_score": 23.889725}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 28134319, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 28134319, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 28134319, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 28134319, "retrieval_score": 16.882479}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 19454970, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 19454970, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 19454970, "retrieval_score": 12.450847}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 19454970, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 19454970, "retrieval_score": 8.857946}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 4112265, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 4112265, "retrieval_score": 8.779708}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 4112265, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 4112265, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 4112265, "retrieval_score": 8.779708}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188, "for": 3355822, "retrieval_score": 8.612926}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827, "for": 3355822, "retrieval_score": 7.871623}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191, "for": 3355822, "retrieval_score": 7.3926377}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194, "for": 3355822, "retrieval_score": 7.3926377}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691, "for": 3355822, "retrieval_score": 7.3926377}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 663171, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 663171, "retrieval_score": 5.681296}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 663171, "retrieval_score": 12.972455}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 663171, "retrieval_score": 12.972455}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 663171, "retrieval_score": 11.362592}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 663171, "retrieval_score": 11.362592}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 663171, "retrieval_score": 11.362592}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517, "for": 663171, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858, "for": 663171, "retrieval_score": 5.933986}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860, "for": 663171, "retrieval_score": 5.933986}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820, "for": 663171, "retrieval_score": 5.4753366}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823, "for": 663171, "retrieval_score": 5.4753366}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 663171, "retrieval_score": 22.284143}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 663171, "retrieval_score": 21.403465}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 663171, "retrieval_score": 21.403465}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 663171, "retrieval_score": 21.403465}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 663171, "retrieval_score": 18.059566}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 663171, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 663171, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 663171, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 663171, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 663171, "retrieval_score": 11.254986}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 73663, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 73663, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 73663, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 73663, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 73663, "retrieval_score": 7.703372}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608, "for": 73663, "retrieval_score": 11.15621}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615, "for": 73663, "retrieval_score": 9.314677}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609, "for": 73663, "retrieval_score": 7.9949646}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 73663, "retrieval_score": 9.800473}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673, "for": 73663, "retrieval_score": 8.612926}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857, "for": 73663, "retrieval_score": 8.612926}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 73663, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 73663, "retrieval_score": 8.18273}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 10264618, "retrieval_score": 6.937325}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 10264618, "retrieval_score": 6.6814804}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 10264618, "retrieval_score": 6.3532634}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 10264618, "retrieval_score": 5.8523183}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761, "for": 10264618, "retrieval_score": 5.6518736}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385, "for": 276052, "retrieval_score": 14.854396}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680, "for": 276052, "retrieval_score": 14.854396}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704, "for": 276052, "retrieval_score": 14.854396}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108, "for": 276052, "retrieval_score": 14.854396}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110, "for": 276052, "retrieval_score": 14.854396}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 276052, "retrieval_score": 16.138548}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 276052, "retrieval_score": 13.852022}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 276052, "retrieval_score": 12.133006}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 276052, "retrieval_score": 12.133006}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 276052, "retrieval_score": 12.133006}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 20154303, "retrieval_score": 15.493557}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 20154303, "retrieval_score": 8.819389}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 20154303, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 20154303, "retrieval_score": 8.756195}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 20154303, "retrieval_score": 8.18273}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 31828240, "retrieval_score": 7.6829867}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216, "for": 31828240, "retrieval_score": 6.834798}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787, "for": 31828240, "retrieval_score": 6.834798}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142, "for": 31828240, "retrieval_score": 6.155267}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144, "for": 31828240, "retrieval_score": 6.155267}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 17895835, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 17895835, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 17895835, "retrieval_score": 7.8520374}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 17895835, "retrieval_score": 7.289562}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 17895835, "retrieval_score": 7.289562}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 17895835, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 17895835, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 17895835, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 17895835, "retrieval_score": 10.32076}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066, "for": 17895835, "retrieval_score": 10.187687}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 818949, "retrieval_score": 25.529459}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 818949, "retrieval_score": 25.529459}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 818949, "retrieval_score": 25.529459}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 818949, "retrieval_score": 25.529459}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 818949, "retrieval_score": 25.529459}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 11613284, "retrieval_score": 20.550377}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693, "for": 11613284, "retrieval_score": 10.275188}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558, "for": 11613284, "retrieval_score": 8.478663}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560, "for": 11613284, "retrieval_score": 6.7927275}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561, "for": 11613284, "retrieval_score": 6.7927275}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660, "for": 6539881, "retrieval_score": 15.216575}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 6539881, "retrieval_score": 13.167707}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662, "for": 6539881, "retrieval_score": 12.464463}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664, "for": 6539881, "retrieval_score": 12.464463}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665, "for": 6539881, "retrieval_score": 10.5553875}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 19781609, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 19781609, "retrieval_score": 8.322354}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827, "for": 19781609, "retrieval_score": 7.330426}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831, "for": 19781609, "retrieval_score": 7.330426}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878, "for": 19781609, "retrieval_score": 7.330426}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 9079540, "retrieval_score": 14.75567}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 9079540, "retrieval_score": 14.75567}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 9079540, "retrieval_score": 14.75567}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 9079540, "retrieval_score": 13.331309}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 9079540, "retrieval_score": 13.331309}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 30546889, "retrieval_score": 21.64052}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 30546889, "retrieval_score": 18.57447}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 30546889, "retrieval_score": 18.57447}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 30546889, "retrieval_score": 18.57447}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 30546889, "retrieval_score": 16.36546}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 18609153, "retrieval_score": 21.569729}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 18609153, "retrieval_score": 21.569729}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 18609153, "retrieval_score": 21.569729}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 18609153, "retrieval_score": 20.106941}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 18609153, "retrieval_score": 20.106941}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880, "for": 19433630, "retrieval_score": 13.3767}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890, "for": 19433630, "retrieval_score": 13.3767}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456, "for": 19433630, "retrieval_score": 11.6153145}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523, "for": 19433630, "retrieval_score": 11.6153145}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492, "for": 19433630, "retrieval_score": 11.481477}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 2045175, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 2045175, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 2045175, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 2045175, "retrieval_score": 8.896322}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 2045175, "retrieval_score": 8.896322}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 6740311, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 6740311, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 6740311, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 6740311, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 6740311, "retrieval_score": 12.407009}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 41894454, "retrieval_score": 13.448047}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 41894454, "retrieval_score": 13.448047}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 41894454, "retrieval_score": 13.448047}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 41894454, "retrieval_score": 10.773977}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 41894454, "retrieval_score": 10.754423}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 773814, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 773814, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 773814, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 773814, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 773814, "retrieval_score": 7.1087627}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4906977, "retrieval_score": 8.069274}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4906977, "retrieval_score": 8.069274}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213, "for": 4906977, "retrieval_score": 7.3108277}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482, "for": 4906977, "retrieval_score": 9.521392}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486, "for": 4906977, "retrieval_score": 9.521392}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489, "for": 4906977, "retrieval_score": 9.521392}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212, "for": 4906977, "retrieval_score": 9.521392}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692, "for": 4906977, "retrieval_score": 8.943836}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 4906977, "retrieval_score": 8.819389}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188, "for": 4906977, "retrieval_score": 8.612926}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4906977, "retrieval_score": 8.069274}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191, "for": 4906977, "retrieval_score": 7.3926377}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194, "for": 4906977, "retrieval_score": 7.3926377}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 12739911, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 12739911, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 12739911, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 12739911, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 12739911, "retrieval_score": 11.254986}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973, "for": 9706041, "retrieval_score": 19.133135}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055, "for": 9706041, "retrieval_score": 12.278121}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852, "for": 9706041, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856, "for": 9706041, "retrieval_score": 11.756009}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860, "for": 9706041, "retrieval_score": 11.756009}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 14299978, "retrieval_score": 13.07795}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 12768504, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 12768504, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 12768504, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 12768504, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 12768504, "retrieval_score": 14.046785}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643, "for": 23566515, "retrieval_score": 8.981914}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761, "for": 23566515, "retrieval_score": 8.981914}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762, "for": 23566515, "retrieval_score": 8.981914}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763, "for": 23566515, "retrieval_score": 8.526724}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 23566515, "retrieval_score": 8.253944}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052, "for": 5788891, "retrieval_score": 13.03521}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057, "for": 5788891, "retrieval_score": 13.03521}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 5788891, "retrieval_score": 11.596144}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056, "for": 5788891, "retrieval_score": 11.596144}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500, "for": 5788891, "retrieval_score": 6.4848065}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 40682209, "retrieval_score": 7.3108277}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 40682209, "retrieval_score": 7.3108277}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 40682209, "retrieval_score": 7.3108277}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 40682209, "retrieval_score": 7.3108277}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007, "for": 40682209, "retrieval_score": 7.3108277}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 27457970, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 27457970, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 27457970, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 27457970, "retrieval_score": 7.098534}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004, "for": 27457970, "retrieval_score": 6.266589}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 18079029, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 18079029, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 18079029, "retrieval_score": 8.18273}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 18079029, "retrieval_score": 7.0233927}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 18079029, "retrieval_score": 7.0233927}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4131123, "retrieval_score": 8.9242325}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824, "for": 4131123, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 4131123, "retrieval_score": 8.069274}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 4131123, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 4131123, "retrieval_score": 7.8520374}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 12211944, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 12211944, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 12211944, "retrieval_score": 16.36546}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477, "for": 12211944, "retrieval_score": 16.36546}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473, "for": 12211944, "retrieval_score": 14.046785}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 12211944, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 12211944, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 12211944, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 12211944, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 12211944, "retrieval_score": 4.448161}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 9759820, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 9759820, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 9759820, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 9759820, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 9759820, "retrieval_score": 19.878656}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 22412258, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 22412258, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 22412258, "retrieval_score": 12.450847}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 22412258, "retrieval_score": 10.275188}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 22412258, "retrieval_score": 8.857946}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 22412258, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 22412258, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 22412258, "retrieval_score": 12.450847}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736, "for": 22412258, "retrieval_score": 10.275188}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 22412258, "retrieval_score": 8.857946}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 23887881, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 23887881, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 23887881, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 23887881, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 23887881, "retrieval_score": 6.926011}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 23887881, "retrieval_score": 6.611951}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 23887881, "retrieval_score": 6.611951}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 23887881, "retrieval_score": 6.611951}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070, "for": 23887881, "retrieval_score": 5.791417}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072, "for": 23887881, "retrieval_score": 5.791417}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 34148637, "retrieval_score": 18.059566}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 34148637, "retrieval_score": 17.543041}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 34148637, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 34148637, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 34148637, "retrieval_score": 14.621655}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 21104592, "retrieval_score": 8.819389}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 4265988, "retrieval_score": 36.290688}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 4265988, "retrieval_score": 32.1309}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 4265988, "retrieval_score": 32.1309}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 4265988, "retrieval_score": 28.831419}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212, "for": 4265988, "retrieval_score": 24.683067}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366, "for": 15741759, "retrieval_score": 5.1451154}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642, "for": 15741759, "retrieval_score": 5.1451154}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831, "for": 15741759, "retrieval_score": 5.1451154}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832, "for": 15741759, "retrieval_score": 5.1451154}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483, "for": 15741759, "retrieval_score": 5.1451154}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 11303238, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 11303238, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 11303238, "retrieval_score": 7.8520374}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945, "for": 11303238, "retrieval_score": 7.05434}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955, "for": 11303238, "retrieval_score": 7.05434}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839, "for": 902408, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 902408, "retrieval_score": 9.314677}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 902408, "retrieval_score": 8.612926}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331, "for": 902408, "retrieval_score": 8.612926}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333, "for": 902408, "retrieval_score": 8.612926}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 902408, "retrieval_score": 16.882479}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 29370211, "retrieval_score": 11.853587}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 29370211, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 29370211, "retrieval_score": 11.853587}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446, "for": 16196712, "retrieval_score": 8.819389}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 16196712, "retrieval_score": 8.8023}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 16196712, "retrieval_score": 5.3017225}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 16196712, "retrieval_score": 4.4223604}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 16196712, "retrieval_score": 4.4223604}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 9339630, "retrieval_score": 10.275188}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 9339630, "retrieval_score": 6.6814804}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 9339630, "retrieval_score": 5.8523183}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 9339630, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 9339630, "retrieval_score": 5.627493}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 1713594, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 1713594, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 1713594, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 1713594, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 1713594, "retrieval_score": 8.18273}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850, "for": 123198, "retrieval_score": 10.880902}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892, "for": 123198, "retrieval_score": 10.880902}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897, "for": 123198, "retrieval_score": 10.880902}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951, "for": 123198, "retrieval_score": 10.880902}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311, "for": 123198, "retrieval_score": 10.880902}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948, "for": 123198, "retrieval_score": 16.644709}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 123198, "retrieval_score": 16.433529}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 123198, "retrieval_score": 13.7208805}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 123198, "retrieval_score": 13.7208805}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949, "for": 123198, "retrieval_score": 12.969613}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008, "for": 123198, "retrieval_score": 16.433529}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409, "for": 123198, "retrieval_score": 13.7208805}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007, "for": 123198, "retrieval_score": 13.7208805}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040, "for": 123198, "retrieval_score": 11.776893}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050, "for": 123198, "retrieval_score": 11.776893}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 3590165, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 3590165, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 3590165, "retrieval_score": 12.450847}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011, "for": 3590165, "retrieval_score": 11.11521}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084, "for": 3590165, "retrieval_score": 11.11521}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578, "for": 22702760, "retrieval_score": 12.065391}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579, "for": 22702760, "retrieval_score": 10.733391}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 22702760, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 22702760, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 22702760, "retrieval_score": 8.253944}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 21669374, "retrieval_score": 10.275188}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 21669374, "retrieval_score": 9.029783}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 21669374, "retrieval_score": 7.7504354}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945, "for": 21669374, "retrieval_score": 6.039165}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946, "for": 21669374, "retrieval_score": 6.039165}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 40639071, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 40639071, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 40639071, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 40639071, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 40639071, "retrieval_score": 14.046785}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4241757, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4241757, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4241757, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4241757, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 4241757, "retrieval_score": 5.627493}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 16233593, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 16233593, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 16233593, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 16233593, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 16233593, "retrieval_score": 11.254986}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 10020591, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 10020591, "retrieval_score": 8.322354}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773, "for": 10020591, "retrieval_score": 7.1560035}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777, "for": 10020591, "retrieval_score": 7.1560035}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778, "for": 10020591, "retrieval_score": 7.1560035}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 1406145, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 1406145, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737, "for": 1406145, "retrieval_score": 6.4752216}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496, "for": 1406145, "retrieval_score": 5.760368}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497, "for": 1406145, "retrieval_score": 5.760368}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 37934969, "retrieval_score": 27.711048}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 37934969, "retrieval_score": 24.207823}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 37934969, "retrieval_score": 24.207823}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889, "for": 37934969, "retrieval_score": 24.207823}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134, "for": 37934969, "retrieval_score": 24.207823}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586, "for": 13279399, "retrieval_score": 7.1854944}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 13279399, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 13279399, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 13279399, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 13279399, "retrieval_score": 6.1015863}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054, "for": 13279399, "retrieval_score": 9.696108}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355, "for": 13279399, "retrieval_score": 8.322354}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 13279399, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 13279399, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 13279399, "retrieval_score": 6.1015863}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 38379453, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 38379453, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 38379453, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 38379453, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 38379453, "retrieval_score": 11.254986}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 4659524, "retrieval_score": 19.878656}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 4659524, "retrieval_score": 19.878656}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 4659524, "retrieval_score": 19.878656}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 4659524, "retrieval_score": 19.878656}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 4659524, "retrieval_score": 19.878656}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 33565643, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 33565643, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 33565643, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 33565643, "retrieval_score": 8.069274}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243, "for": 33565643, "retrieval_score": 7.871623}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 20222485, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 20222485, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 20222485, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 20222485, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 20222485, "retrieval_score": 14.621655}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14524322, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14524322, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14524322, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14524322, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 14524322, "retrieval_score": 16.36546}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372, "for": 38426168, "retrieval_score": 7.724916}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 38426168, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 38426168, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 38426168, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 38426168, "retrieval_score": 7.098534}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8556076, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8556076, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8556076, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 8556076, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 8556076, "retrieval_score": 14.621655}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 8556076, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 8556076, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 8556076, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 8556076, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 8556076, "retrieval_score": 7.3108277}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091, "for": 34155829, "retrieval_score": 9.616297}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071, "for": 34155829, "retrieval_score": 9.616297}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085, "for": 34155829, "retrieval_score": 9.616297}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093, "for": 34155829, "retrieval_score": 9.616297}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139, "for": 34155829, "retrieval_score": 9.616297}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139, "for": 42747987, "retrieval_score": 10.792}
{"snippet": "email.iterators._structure(msg, level=0, include_default=False)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . `include_default` , if true , prints the default type as well . With arguments `msg`.", "question_id": 3220, "for": 42747987, "retrieval_score": 9.7606325}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216, "for": 42747987, "retrieval_score": 9.60058}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787, "for": 42747987, "retrieval_score": 9.60058}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 42747987, "retrieval_score": 9.221109}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 27516849, "retrieval_score": 8.756195}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 27516849, "retrieval_score": 8.756195}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 27516849, "retrieval_score": 7.3108277}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 27516849, "retrieval_score": 7.3108277}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 27516849, "retrieval_score": 7.3108277}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 41552839, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 41552839, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 41552839, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 41552839, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205, "for": 41552839, "retrieval_score": 10.260323}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 41552839, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 41552839, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 41552839, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 41552839, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 41552839, "retrieval_score": 9.390783}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 3471999, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 3471999, "retrieval_score": 14.046785}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 3471999, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 3471999, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 3471999, "retrieval_score": 14.046785}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 8282553, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 8282553, "retrieval_score": 14.252948}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 8282553, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 8282553, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 8282553, "retrieval_score": 11.254986}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974, "for": 3506678, "retrieval_score": 8.8023}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3506678, "retrieval_score": 8.069274}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 3506678, "retrieval_score": 7.9949646}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579, "for": 3506678, "retrieval_score": 7.019806}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3506678, "retrieval_score": 6.926011}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 37878946, "retrieval_score": 12.407009}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 37878946, "retrieval_score": 12.407009}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 37878946, "retrieval_score": 12.407009}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 37878946, "retrieval_score": 12.407009}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 37878946, "retrieval_score": 12.407009}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254, "for": 39353758, "retrieval_score": 8.612926}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331, "for": 39353758, "retrieval_score": 8.612926}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333, "for": 39353758, "retrieval_score": 8.612926}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165, "for": 39353758, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 39353758, "retrieval_score": 8.069274}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 22229255, "retrieval_score": 5.438738}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 22229255, "retrieval_score": 4.838603}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220, "for": 22229255, "retrieval_score": 6.788617}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 22229255, "retrieval_score": 5.438738}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 22229255, "retrieval_score": 4.838603}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68, "for": 34410358, "retrieval_score": 5.631149}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340, "for": 34410358, "retrieval_score": 5.631149}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345, "for": 34410358, "retrieval_score": 5.631149}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348, "for": 34410358, "retrieval_score": 5.631149}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688, "for": 34410358, "retrieval_score": 5.631149}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 34410358, "retrieval_score": 16.27232}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 34410358, "retrieval_score": 14.252948}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 34410358, "retrieval_score": 13.771824}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 34410358, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 34410358, "retrieval_score": 11.254986}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 13480031, "retrieval_score": 14.214895}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 13480031, "retrieval_score": 14.214895}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 13480031, "retrieval_score": 12.450847}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 13480031, "retrieval_score": 11.157139}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 13480031, "retrieval_score": 10.275188}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 4644025, "retrieval_score": 13.263839}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 4644025, "retrieval_score": 10.626398}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 4644025, "retrieval_score": 9.029783}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158, "for": 4644025, "retrieval_score": 7.3926377}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 4644025, "retrieval_score": 6.788617}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161, "for": 19156472, "retrieval_score": 15.989929}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166, "for": 19156472, "retrieval_score": 12.459407}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247, "for": 19156472, "retrieval_score": 15.540076}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248, "for": 19156472, "retrieval_score": 12.450018}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249, "for": 19156472, "retrieval_score": 12.450018}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 18131741, "retrieval_score": 35.02478}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 18131741, "retrieval_score": 35.02478}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 18131741, "retrieval_score": 29.24331}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 18131741, "retrieval_score": 29.24331}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 18131741, "retrieval_score": 29.24331}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996, "for": 34776651, "retrieval_score": 9.589609}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 34776651, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 34776651, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 34776651, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 34776651, "retrieval_score": 8.857946}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 4267019, "retrieval_score": 13.167707}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 4267019, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203, "for": 4267019, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204, "for": 4267019, "retrieval_score": 10.260323}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205, "for": 4267019, "retrieval_score": 10.260323}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020, "for": 379906, "retrieval_score": 10.542535}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864, "for": 379906, "retrieval_score": 8.8023}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019, "for": 379906, "retrieval_score": 8.8023}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400, "for": 379906, "retrieval_score": 8.8023}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436, "for": 379906, "retrieval_score": 6.6175947}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 379906, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 379906, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 379906, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 379906, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 379906, "retrieval_score": 11.254986}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085, "for": 610883, "retrieval_score": 9.226346}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028, "for": 610883, "retrieval_score": 8.819389}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085, "for": 610883, "retrieval_score": 9.226346}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028, "for": 610883, "retrieval_score": 8.819389}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502, "for": 610883, "retrieval_score": 7.3884673}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025, "for": 610883, "retrieval_score": 11.663557}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085, "for": 610883, "retrieval_score": 9.226346}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026, "for": 610883, "retrieval_score": 8.322354}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086, "for": 610883, "retrieval_score": 6.611951}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087, "for": 610883, "retrieval_score": 6.611951}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 28925267, "retrieval_score": 13.237911}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 28925267, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 28925267, "retrieval_score": 11.597369}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 28925267, "retrieval_score": 10.32076}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855, "for": 28925267, "retrieval_score": 9.801861}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 748491, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 748491, "retrieval_score": 16.644709}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929, "for": 748491, "retrieval_score": 9.696108}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956, "for": 748491, "retrieval_score": 9.696108}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 748491, "retrieval_score": 4.6105547}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 4476373, "retrieval_score": 9.715892}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 4476373, "retrieval_score": 7.958649}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 4476373, "retrieval_score": 7.958649}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548, "for": 4476373, "retrieval_score": 7.958649}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 4476373, "retrieval_score": 5.4974566}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542, "for": 4476373, "retrieval_score": 9.715892}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955, "for": 4476373, "retrieval_score": 9.314677}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960, "for": 4476373, "retrieval_score": 9.314677}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546, "for": 4476373, "retrieval_score": 7.958649}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547, "for": 4476373, "retrieval_score": 7.958649}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955, "for": 4476373, "retrieval_score": 9.314677}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960, "for": 4476373, "retrieval_score": 9.314677}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899, "for": 4476373, "retrieval_score": 7.652486}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105, "for": 23422542, "retrieval_score": 9.314677}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107, "for": 23422542, "retrieval_score": 7.9949646}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106, "for": 23422542, "retrieval_score": 7.002801}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686, "for": 23422542, "retrieval_score": 6.025233}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921, "for": 23422542, "retrieval_score": 5.27751}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 14591855, "retrieval_score": 8.819389}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 14591855, "retrieval_score": 4.6813893}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 14591855, "retrieval_score": 4.6813893}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171, "for": 14591855, "retrieval_score": 4.6813893}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175, "for": 14591855, "retrieval_score": 4.6813893}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 31950612, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 31950612, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 31950612, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 31950612, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 31950612, "retrieval_score": 14.046785}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 10569438, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 10569438, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 10569438, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 10569438, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 10569438, "retrieval_score": 6.066503}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3505831, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3505831, "retrieval_score": 6.926011}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555, "for": 3505831, "retrieval_score": 6.676981}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 3505831, "retrieval_score": 6.611951}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 3505831, "retrieval_score": 6.611951}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 7458689, "retrieval_score": 14.735041}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 7458689, "retrieval_score": 12.81402}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 7458689, "retrieval_score": 12.81402}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 7458689, "retrieval_score": 11.077847}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 7458689, "retrieval_score": 11.077847}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 23748995, "retrieval_score": 9.314677}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 23748995, "retrieval_score": 7.002801}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631, "for": 23748995, "retrieval_score": 5.6103325}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 23748995, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 23748995, "retrieval_score": 4.838603}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 23748995, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 23748995, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 23748995, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 23748995, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 23748995, "retrieval_score": 4.448161}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 6275762, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 6275762, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 6275762, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 6275762, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 6275762, "retrieval_score": 5.631149}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 3668964, "retrieval_score": 17.225851}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 3668964, "retrieval_score": 14.785275}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675, "for": 3668964, "retrieval_score": 12.950443}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639, "for": 3668964, "retrieval_score": 11.520736}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640, "for": 3668964, "retrieval_score": 11.520736}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825, "for": 29218750, "retrieval_score": 27.481773}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825, "for": 29218750, "retrieval_score": 27.481773}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392, "for": 29218750, "retrieval_score": 21.46801}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044, "for": 6714826, "retrieval_score": 12.605309}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435, "for": 6714826, "retrieval_score": 12.605309}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 6714826, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 6714826, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 6714826, "retrieval_score": 9.390783}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423, "for": 1064335, "retrieval_score": 9.314677}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550, "for": 1064335, "retrieval_score": 9.314677}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616, "for": 1064335, "retrieval_score": 9.314677}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1064335, "retrieval_score": 8.819389}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385, "for": 1064335, "retrieval_score": 7.427198}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975, "for": 14247586, "retrieval_score": 10.275188}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 14247586, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 14247586, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 14247586, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 14247586, "retrieval_score": 4.027504}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066, "for": 41133414, "retrieval_score": 8.610895}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063, "for": 41133414, "retrieval_score": 7.0233927}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286, "for": 41133414, "retrieval_score": 7.0233927}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547, "for": 41133414, "retrieval_score": 7.0233927}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 41133414, "retrieval_score": 5.631149}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715, "for": 1179305, "retrieval_score": 9.314677}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717, "for": 1179305, "retrieval_score": 9.314677}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 1179305, "retrieval_score": 7.2568364}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716, "for": 1179305, "retrieval_score": 7.002801}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273, "for": 1179305, "retrieval_score": 6.3532634}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610, "for": 3376534, "retrieval_score": 9.800473}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628, "for": 3376534, "retrieval_score": 8.18273}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634, "for": 3376534, "retrieval_score": 8.18273}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774, "for": 3376534, "retrieval_score": 7.703372}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775, "for": 3376534, "retrieval_score": 7.703372}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104, "for": 19153328, "retrieval_score": 7.724916}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207, "for": 19153328, "retrieval_score": 7.3108277}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470, "for": 19153328, "retrieval_score": 7.3108277}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003, "for": 19153328, "retrieval_score": 7.3108277}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005, "for": 19153328, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 28431359, "retrieval_score": 16.644709}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986, "for": 28431359, "retrieval_score": 14.26323}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 28431359, "retrieval_score": 12.969613}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994, "for": 28431359, "retrieval_score": 12.493184}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988, "for": 28431359, "retrieval_score": 11.113957}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 28431359, "retrieval_score": 16.644709}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986, "for": 28431359, "retrieval_score": 14.26323}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474, "for": 28431359, "retrieval_score": 12.969613}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994, "for": 28431359, "retrieval_score": 12.493184}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988, "for": 28431359, "retrieval_score": 11.113957}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247, "for": 14793098, "retrieval_score": 8.8023}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223, "for": 14793098, "retrieval_score": 6.6175947}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696, "for": 14793098, "retrieval_score": 6.4289756}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756, "for": 14793098, "retrieval_score": 5.631149}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770, "for": 14793098, "retrieval_score": 5.631149}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 5285181, "retrieval_score": 7.2568364}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 5285181, "retrieval_score": 7.131615}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850, "for": 5285181, "retrieval_score": 7.131615}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873, "for": 5285181, "retrieval_score": 7.131615}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 5285181, "retrieval_score": 6.7207417}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 627435, "retrieval_score": 8.819389}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 627435, "retrieval_score": 4.6678467}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 627435, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 627435, "retrieval_score": 4.6678467}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 627435, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 627435, "retrieval_score": 4.448161}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 627435, "retrieval_score": 4.448161}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 627435, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 627435, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 627435, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 627435, "retrieval_score": 6.926011}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499, "for": 627435, "retrieval_score": 6.926011}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474, "for": 627435, "retrieval_score": 8.819389}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 627435, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 627435, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 627435, "retrieval_score": 6.926011}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134, "for": 627435, "retrieval_score": 6.926011}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 8440117, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 8440117, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 8440117, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 8440117, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 8440117, "retrieval_score": 7.1087627}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 18022241, "retrieval_score": 10.620587}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 18022241, "retrieval_score": 10.620587}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 18022241, "retrieval_score": 10.620587}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 18022241, "retrieval_score": 10.620587}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 18022241, "retrieval_score": 10.620587}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 14657241, "retrieval_score": 22.665546}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403, "for": 14657241, "retrieval_score": 19.852785}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405, "for": 14657241, "retrieval_score": 19.852785}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407, "for": 14657241, "retrieval_score": 19.852785}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945, "for": 14657241, "retrieval_score": 17.66107}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 3877491, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 3877491, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 3877491, "retrieval_score": 8.857946}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 3877491, "retrieval_score": 8.857946}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 3877491, "retrieval_score": 8.857946}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853, "for": 3877491, "retrieval_score": 11.455805}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857, "for": 3877491, "retrieval_score": 11.455805}
{"snippet": "bisect.bisect(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 861, "for": 3877491, "retrieval_score": 11.455805}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865, "for": 3877491, "retrieval_score": 11.455805}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869, "for": 3877491, "retrieval_score": 11.455805}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 19490064, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 19490064, "retrieval_score": 9.335693}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 19490064, "retrieval_score": 8.627357}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 19490064, "retrieval_score": 8.055008}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 19490064, "retrieval_score": 8.055008}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 18461623, "retrieval_score": 17.028362}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 18461623, "retrieval_score": 17.028362}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 18461623, "retrieval_score": 14.2175255}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 18461623, "retrieval_score": 14.2175255}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 18461623, "retrieval_score": 14.2175255}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 19948732, "retrieval_score": 10.584028}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 19948732, "retrieval_score": 10.584028}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927, "for": 19948732, "retrieval_score": 9.696108}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 19948732, "retrieval_score": 8.631657}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 19948732, "retrieval_score": 8.549236}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674, "for": 12808420, "retrieval_score": 17.225851}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638, "for": 12808420, "retrieval_score": 14.785275}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 12808420, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 12808420, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 12808420, "retrieval_score": 13.252438}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 10805589, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 10805589, "retrieval_score": 16.644709}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 10805589, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 10805589, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 10805589, "retrieval_score": 13.09412}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 35561743, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 35561743, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 35561743, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 35561743, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 35561743, "retrieval_score": 13.252438}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 208894, "retrieval_score": 10.597315}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 208894, "retrieval_score": 8.819389}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688, "for": 208894, "retrieval_score": 8.322354}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689, "for": 208894, "retrieval_score": 8.322354}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 208894, "retrieval_score": 7.2568364}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633, "for": 2094176, "retrieval_score": 6.898015}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634, "for": 2094176, "retrieval_score": 6.898015}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652, "for": 2094176, "retrieval_score": 6.898015}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653, "for": 2094176, "retrieval_score": 6.898015}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662, "for": 2094176, "retrieval_score": 6.212199}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 2094176, "retrieval_score": 8.72709}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575, "for": 2094176, "retrieval_score": 8.72709}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369, "for": 2094176, "retrieval_score": 8.72709}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834, "for": 2094176, "retrieval_score": 8.72709}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057, "for": 2094176, "retrieval_score": 8.72709}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088, "for": 12476452, "retrieval_score": 7.9661465}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089, "for": 12476452, "retrieval_score": 7.9661465}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090, "for": 12476452, "retrieval_score": 7.9661465}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091, "for": 12476452, "retrieval_score": 7.9661465}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092, "for": 12476452, "retrieval_score": 7.9661465}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 7571635, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 7571635, "retrieval_score": 6.611951}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 7571635, "retrieval_score": 6.611951}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 7571635, "retrieval_score": 6.611951}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207, "for": 7571635, "retrieval_score": 6.611951}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 7571635, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 7571635, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 7571635, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 7571635, "retrieval_score": 8.896322}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 7571635, "retrieval_score": 8.896322}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 13438574, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 13438574, "retrieval_score": 9.029783}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111, "for": 13438574, "retrieval_score": 8.615965}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 13438574, "retrieval_score": 6.788617}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920, "for": 13438574, "retrieval_score": 6.202405}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 15985339, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 15985339, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15985339, "retrieval_score": 6.066503}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078, "for": 15985339, "retrieval_score": 6.066503}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079, "for": 15985339, "retrieval_score": 6.066503}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 4998629, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 4998629, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 4998629, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 4998629, "retrieval_score": 7.098534}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 4998629, "retrieval_score": 5.9267936}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 5555063, "retrieval_score": 6.4862275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958, "for": 5555063, "retrieval_score": 6.4862275}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747, "for": 5555063, "retrieval_score": 5.681296}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209, "for": 5555063, "retrieval_score": 5.681296}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202, "for": 5555063, "retrieval_score": 5.05409}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 9637838, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 9637838, "retrieval_score": 16.644709}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9637838, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9637838, "retrieval_score": 8.18273}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472, "for": 9637838, "retrieval_score": 8.18273}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 9637838, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 9637838, "retrieval_score": 16.644709}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 9637838, "retrieval_score": 9.050911}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 9637838, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 9637838, "retrieval_score": 8.18273}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219, "for": 29386995, "retrieval_score": 7.427198}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 29386995, "retrieval_score": 7.1087627}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770, "for": 29386995, "retrieval_score": 6.3749056}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138, "for": 29386995, "retrieval_score": 6.2888184}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141, "for": 29386995, "retrieval_score": 6.2888184}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 27868020, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 27868020, "retrieval_score": 13.2869215}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 27868020, "retrieval_score": 13.2869215}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134, "for": 27868020, "retrieval_score": 13.2869215}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093, "for": 27868020, "retrieval_score": 13.2869215}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 27868020, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 27868020, "retrieval_score": 8.322354}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880, "for": 27868020, "retrieval_score": 6.68835}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890, "for": 27868020, "retrieval_score": 6.68835}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492, "for": 27868020, "retrieval_score": 5.7407384}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 27868020, "retrieval_score": 9.696108}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 27868020, "retrieval_score": 8.322354}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880, "for": 27868020, "retrieval_score": 6.68835}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890, "for": 27868020, "retrieval_score": 6.68835}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492, "for": 27868020, "retrieval_score": 5.7407384}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087, "for": 12323403, "retrieval_score": 10.275188}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 12323403, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 12323403, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 12323403, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 12323403, "retrieval_score": 6.538975}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 14301913, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 14301913, "retrieval_score": 8.514181}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 14301913, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 14301913, "retrieval_score": 8.069274}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 14301913, "retrieval_score": 7.1087627}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 2813829, "retrieval_score": 9.741219}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 2813829, "retrieval_score": 9.741219}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 2813829, "retrieval_score": 9.741219}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 2813829, "retrieval_score": 9.335693}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 2813829, "retrieval_score": 9.335693}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 1679798, "retrieval_score": 8.819389}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 1679798, "retrieval_score": 7.289562}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545, "for": 1679798, "retrieval_score": 7.289562}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500, "for": 1679798, "retrieval_score": 6.967231}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361, "for": 1679798, "retrieval_score": 5.045961}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 1207457, "retrieval_score": 6.937325}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83, "for": 1207457, "retrieval_score": 6.7207417}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 1207457, "retrieval_score": 6.6814804}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 1207457, "retrieval_score": 6.3532634}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750, "for": 1207457, "retrieval_score": 5.8523183}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761, "for": 1207457, "retrieval_score": 8.887956}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763, "for": 1207457, "retrieval_score": 7.280456}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 1207457, "retrieval_score": 6.937325}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 1207457, "retrieval_score": 6.6814804}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268, "for": 1207457, "retrieval_score": 6.3532634}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137, "for": 2225564, "retrieval_score": 19.147097}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514, "for": 2225564, "retrieval_score": 19.147097}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414, "for": 2225564, "retrieval_score": 19.147097}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514, "for": 2225564, "retrieval_score": 19.147097}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149, "for": 2225564, "retrieval_score": 19.147097}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 32283692, "retrieval_score": 14.033932}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 32283692, "retrieval_score": 14.033932}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 32283692, "retrieval_score": 14.033932}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 32283692, "retrieval_score": 13.362961}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289, "for": 32283692, "retrieval_score": 12.962875}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285, "for": 32283692, "retrieval_score": 20.044443}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944, "for": 32283692, "retrieval_score": 17.96103}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954, "for": 32283692, "retrieval_score": 17.96103}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019, "for": 32283692, "retrieval_score": 17.96103}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897, "for": 32283692, "retrieval_score": 17.556957}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 247724, "retrieval_score": 8.819389}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 247724, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 247724, "retrieval_score": 8.322354}
{"snippet": "os.path.relpath(path, start=os.curdir)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7165, "for": 247724, "retrieval_score": 7.7527575}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 247724, "retrieval_score": 7.289562}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050, "for": 29760130, "retrieval_score": 12.278121}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049, "for": 29760130, "retrieval_score": 10.754423}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 29760130, "retrieval_score": 9.696108}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051, "for": 29760130, "retrieval_score": 9.567153}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 29760130, "retrieval_score": 8.322354}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 35707224, "retrieval_score": 18.044765}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 35707224, "retrieval_score": 18.044765}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 35707224, "retrieval_score": 18.044765}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 35707224, "retrieval_score": 18.044765}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 35707224, "retrieval_score": 18.044765}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 42364992, "retrieval_score": 16.617632}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100, "for": 42364992, "retrieval_score": 14.26323}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480, "for": 42364992, "retrieval_score": 14.26323}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491, "for": 42364992, "retrieval_score": 14.26323}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508, "for": 42364992, "retrieval_score": 14.26323}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 13163145, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 13163145, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 13163145, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 13163145, "retrieval_score": 8.896322}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858, "for": 13163145, "retrieval_score": 8.896322}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83, "for": 9561243, "retrieval_score": 13.4414835}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952, "for": 9561243, "retrieval_score": 11.569717}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82, "for": 9561243, "retrieval_score": 11.537081}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96, "for": 9561243, "retrieval_score": 11.537081}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616, "for": 9561243, "retrieval_score": 11.537081}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 34705205, "retrieval_score": 20.843817}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 34705205, "retrieval_score": 20.843817}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039, "for": 34705205, "retrieval_score": 15.670441}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 34705205, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 34705205, "retrieval_score": 13.2869215}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487, "for": 29945684, "retrieval_score": 7.1087627}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742, "for": 29945684, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488, "for": 29945684, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490, "for": 29945684, "retrieval_score": 6.1015863}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491, "for": 29945684, "retrieval_score": 6.1015863}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 29703793, "retrieval_score": 6.538975}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 29703793, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 29703793, "retrieval_score": 6.538975}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 29703793, "retrieval_score": 6.538975}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 29703793, "retrieval_score": 6.538975}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977, "for": 4682088, "retrieval_score": 10.275188}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653, "for": 4682088, "retrieval_score": 9.029783}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655, "for": 4682088, "retrieval_score": 9.029783}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 4682088, "retrieval_score": 7.7504354}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654, "for": 4682088, "retrieval_score": 7.7504354}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 15769246, "retrieval_score": 17.6046}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 15769246, "retrieval_score": 13.9013}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 15769246, "retrieval_score": 11.595583}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 15769246, "retrieval_score": 11.595583}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 15769246, "retrieval_score": 10.182877}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332, "for": 13860026, "retrieval_score": 9.029783}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333, "for": 13860026, "retrieval_score": 9.029783}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334, "for": 13860026, "retrieval_score": 9.029783}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 13860026, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 13860026, "retrieval_score": 8.18273}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 18711384, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 18711384, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 18711384, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 18711384, "retrieval_score": 9.390783}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 18711384, "retrieval_score": 9.390783}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375, "for": 8898294, "retrieval_score": 10.814992}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 8898294, "retrieval_score": 9.390783}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 8898294, "retrieval_score": 9.390783}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 8898294, "retrieval_score": 9.390783}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 8898294, "retrieval_score": 9.390783}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 687295, "retrieval_score": 8.069274}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404, "for": 687295, "retrieval_score": 7.724916}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 687295, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 687295, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 687295, "retrieval_score": 7.5568957}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095, "for": 2850966, "retrieval_score": 8.612926}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162, "for": 2850966, "retrieval_score": 8.612926}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026, "for": 2850966, "retrieval_score": 8.322354}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673, "for": 2850966, "retrieval_score": 7.9949646}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097, "for": 2850966, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 14764126, "retrieval_score": 10.275188}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 14764126, "retrieval_score": 7.1087627}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 14764126, "retrieval_score": 7.1087627}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 14764126, "retrieval_score": 7.1087627}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 14764126, "retrieval_score": 7.1087627}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 14764126, "retrieval_score": 10.275188}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 14764126, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 14764126, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 14764126, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 14764126, "retrieval_score": 5.627493}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 14764126, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 14764126, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 14764126, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 14764126, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 14764126, "retrieval_score": 4.448161}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 14764126, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 14764126, "retrieval_score": 5.3102937}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 14764126, "retrieval_score": 5.3102937}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 14764126, "retrieval_score": 5.3102937}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 14764126, "retrieval_score": 5.3102937}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738, "for": 14764126, "retrieval_score": 10.275188}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86, "for": 14764126, "retrieval_score": 4.896931}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095, "for": 14764126, "retrieval_score": 4.896931}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787, "for": 14764126, "retrieval_score": 4.896931}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805, "for": 14764126, "retrieval_score": 4.896931}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694, "for": 2769061, "retrieval_score": 10.275188}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876, "for": 2769061, "retrieval_score": 9.910789}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877, "for": 2769061, "retrieval_score": 7.72252}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878, "for": 2769061, "retrieval_score": 7.72252}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879, "for": 2769061, "retrieval_score": 7.72252}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062, "for": 2769061, "retrieval_score": 11.79538}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694, "for": 2769061, "retrieval_score": 10.275188}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063, "for": 2769061, "retrieval_score": 8.867801}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064, "for": 2769061, "retrieval_score": 8.867801}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065, "for": 2769061, "retrieval_score": 8.867801}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 29815129, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 29815129, "retrieval_score": 8.322354}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 29815129, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 29815129, "retrieval_score": 8.069274}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133, "for": 29815129, "retrieval_score": 6.926011}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 29815129, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 29815129, "retrieval_score": 8.322354}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063, "for": 29815129, "retrieval_score": 7.724916}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004, "for": 29815129, "retrieval_score": 6.596385}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244, "for": 29815129, "retrieval_score": 6.596385}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 24082784, "retrieval_score": 7.6277695}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 24082784, "retrieval_score": 6.54706}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 24082784, "retrieval_score": 6.54706}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 24082784, "retrieval_score": 5.734579}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 24082784, "retrieval_score": 5.734579}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 3731426, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 3731426, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 3731426, "retrieval_score": 14.2175255}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876, "for": 3731426, "retrieval_score": 14.2175255}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899, "for": 3731426, "retrieval_score": 12.864405}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 16772071, "retrieval_score": 10.754423}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35, "for": 16772071, "retrieval_score": 9.362779}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36, "for": 16772071, "retrieval_score": 9.362779}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171, "for": 16772071, "retrieval_score": 9.362779}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175, "for": 16772071, "retrieval_score": 9.362779}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 16772071, "retrieval_score": 9.314677}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 16772071, "retrieval_score": 9.029783}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629, "for": 16772071, "retrieval_score": 7.002801}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 16772071, "retrieval_score": 6.788617}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110, "for": 16772071, "retrieval_score": 6.788617}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 16772071, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 16772071, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109, "for": 16772071, "retrieval_score": 10.754423}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108, "for": 16772071, "retrieval_score": 9.029783}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 16772071, "retrieval_score": 8.857946}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 5110352, "retrieval_score": 19.392216}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576, "for": 5110352, "retrieval_score": 17.638779}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 5110352, "retrieval_score": 16.644709}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406, "for": 5110352, "retrieval_score": 10.584028}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408, "for": 5110352, "retrieval_score": 10.584028}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 1883980, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 1883980, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 1883980, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 1883980, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 1883980, "retrieval_score": 5.631149}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 2813806, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 2813806, "retrieval_score": 8.514181}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102, "for": 2813806, "retrieval_score": 7.1087627}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431, "for": 2813806, "retrieval_score": 7.1087627}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440, "for": 2813806, "retrieval_score": 7.1087627}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038, "for": 10037742, "retrieval_score": 5.631149}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484, "for": 10037742, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673, "for": 10037742, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683, "for": 10037742, "retrieval_score": 5.631149}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725, "for": 10037742, "retrieval_score": 5.631149}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 22712292, "retrieval_score": 8.9242325}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784, "for": 22712292, "retrieval_score": 7.8520374}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785, "for": 22712292, "retrieval_score": 7.8520374}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096, "for": 22712292, "retrieval_score": 7.7504354}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786, "for": 22712292, "retrieval_score": 7.011446}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14043934, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14043934, "retrieval_score": 24.967064}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130, "for": 14043934, "retrieval_score": 14.2175255}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429, "for": 14043934, "retrieval_score": 14.2175255}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445, "for": 14043934, "retrieval_score": 14.2175255}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14043934, "retrieval_score": 9.696108}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209, "for": 14043934, "retrieval_score": 8.819389}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 14043934, "retrieval_score": 8.819389}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14043934, "retrieval_score": 8.322354}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410, "for": 14043934, "retrieval_score": 7.289562}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14043934, "retrieval_score": 29.088327}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14043934, "retrieval_score": 24.967064}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 14043934, "retrieval_score": 7.9661465}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354, "for": 14043934, "retrieval_score": 7.9661465}
{"snippet": "tzinfo.tzname(dt)", "intent": "Return the time zone name corresponding to the datetime object `dt` , as a string .", "question_id": 2355, "for": 14043934, "retrieval_score": 7.9661465}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 14043934, "retrieval_score": 9.696108}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210, "for": 14043934, "retrieval_score": 8.819389}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 14043934, "retrieval_score": 8.322354}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353, "for": 14043934, "retrieval_score": 7.9661465}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354, "for": 14043934, "retrieval_score": 7.9661465}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032, "for": 3059301, "retrieval_score": 9.029783}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 3059301, "retrieval_score": 8.069274}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938, "for": 3059301, "retrieval_score": 7.7504354}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 3059301, "retrieval_score": 6.926011}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201, "for": 3059301, "retrieval_score": 6.6814804}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072, "for": 3059301, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 3059301, "retrieval_score": 9.677206}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 3059301, "retrieval_score": 9.677206}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 3059301, "retrieval_score": 9.677206}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 3059301, "retrieval_score": 8.896322}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 18131367, "retrieval_score": 18.016369}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 18131367, "retrieval_score": 18.016369}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 18131367, "retrieval_score": 15.780562}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 18131367, "retrieval_score": 13.2869215}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 18131367, "retrieval_score": 13.2869215}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932, "for": 8192379, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582, "for": 8192379, "retrieval_score": 14.312007}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583, "for": 8192379, "retrieval_score": 14.312007}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392, "for": 8192379, "retrieval_score": 14.312007}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384, "for": 8192379, "retrieval_score": 12.284268}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 26155985, "retrieval_score": 8.069274}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998, "for": 26155985, "retrieval_score": 7.555182}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139, "for": 26155985, "retrieval_score": 7.063412}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141, "for": 26155985, "retrieval_score": 7.063412}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188, "for": 26155985, "retrieval_score": 7.063412}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390, "for": 2755950, "retrieval_score": 13.07795}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323, "for": 2755950, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339, "for": 2755950, "retrieval_score": 13.07795}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340, "for": 2755950, "retrieval_score": 13.07795}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437, "for": 2755950, "retrieval_score": 13.07795}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134, "for": 35017035, "retrieval_score": 10.275188}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671, "for": 35017035, "retrieval_score": 4.838603}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680, "for": 35017035, "retrieval_score": 4.838603}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538, "for": 35017035, "retrieval_score": 4.838603}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854, "for": 35017035, "retrieval_score": 4.448161}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037, "for": 34696853, "retrieval_score": 9.050911}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 34696853, "retrieval_score": 7.5568957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 34696853, "retrieval_score": 7.5568957}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048, "for": 34696853, "retrieval_score": 6.837495}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652, "for": 34696853, "retrieval_score": 6.611951}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436, "for": 34696853, "retrieval_score": 20.826847}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496, "for": 34696853, "retrieval_score": 20.826847}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 34696853, "retrieval_score": 18.242264}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036, "for": 34696853, "retrieval_score": 16.414843}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038, "for": 34696853, "retrieval_score": 16.414843}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 28901311, "retrieval_score": 8.253944}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 28901311, "retrieval_score": 8.253944}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 28901311, "retrieval_score": 8.253944}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647, "for": 28901311, "retrieval_score": 8.253944}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677, "for": 28901311, "retrieval_score": 8.253944}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1780174, "retrieval_score": 20.658737}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1780174, "retrieval_score": 18.095016}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116, "for": 1780174, "retrieval_score": 16.507889}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628, "for": 1780174, "retrieval_score": 16.507889}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642, "for": 1780174, "retrieval_score": 16.507889}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294, "for": 1780174, "retrieval_score": 22.314278}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475, "for": 1780174, "retrieval_score": 20.247295}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 1780174, "retrieval_score": 17.734634}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950, "for": 1780174, "retrieval_score": 16.138548}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600, "for": 1780174, "retrieval_score": 16.138548}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190, "for": 42950, "retrieval_score": 4.6678467}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955, "for": 42950, "retrieval_score": 4.6678467}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783, "for": 42950, "retrieval_score": 4.3136783}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87, "for": 42950, "retrieval_score": 4.027504}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505, "for": 42950, "retrieval_score": 4.027504}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912, "for": 42950, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913, "for": 42950, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914, "for": 42950, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915, "for": 42950, "retrieval_score": 11.312834}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916, "for": 42950, "retrieval_score": 11.312834}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885, "for": 42950, "retrieval_score": 6.4862275}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012, "for": 42950, "retrieval_score": 5.681296}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 42950, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 42950, "retrieval_score": 16.644709}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 42950, "retrieval_score": 10.204068}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 42950, "retrieval_score": 10.204068}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016, "for": 42950, "retrieval_score": 10.204068}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303, "for": 89228, "retrieval_score": 8.322354}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304, "for": 89228, "retrieval_score": 8.322354}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 89228, "retrieval_score": 8.819389}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 89228, "retrieval_score": 7.289562}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 89228, "retrieval_score": 15.568758}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 89228, "retrieval_score": 15.568758}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 89228, "retrieval_score": 15.568758}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750, "for": 89228, "retrieval_score": 13.362961}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849, "for": 89228, "retrieval_score": 13.156848}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 89228, "retrieval_score": 8.819389}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 89228, "retrieval_score": 7.784379}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279, "for": 89228, "retrieval_score": 6.9778156}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168, "for": 89228, "retrieval_score": 13.3767}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130, "for": 89228, "retrieval_score": 11.481477}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344, "for": 89228, "retrieval_score": 11.481477}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570, "for": 89228, "retrieval_score": 10.056642}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603, "for": 89228, "retrieval_score": 10.056642}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722, "for": 89228, "retrieval_score": 8.819389}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 89228, "retrieval_score": 8.819389}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 89228, "retrieval_score": 8.069274}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 89228, "retrieval_score": 6.926011}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077, "for": 89228, "retrieval_score": 6.066503}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573, "for": 89228, "retrieval_score": 6.3532634}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607, "for": 89228, "retrieval_score": 6.3532634}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663, "for": 89228, "retrieval_score": 6.3532634}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673, "for": 89228, "retrieval_score": 6.3532634}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682, "for": 89228, "retrieval_score": 6.3532634}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 89228, "retrieval_score": 26.406902}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168, "for": 89228, "retrieval_score": 20.06505}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238, "for": 89228, "retrieval_score": 18.007904}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242, "for": 89228, "retrieval_score": 18.007904}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130, "for": 89228, "retrieval_score": 17.222214}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026, "for": 89228, "retrieval_score": 8.308816}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025, "for": 89228, "retrieval_score": 7.131615}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024, "for": 89228, "retrieval_score": 6.246592}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023, "for": 89228, "retrieval_score": 5.5569787}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 89228, "retrieval_score": 5.3102937}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619, "for": 16566069, "retrieval_score": 10.275188}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473, "for": 16566069, "retrieval_score": 8.322354}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075, "for": 16566069, "retrieval_score": 8.069274}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986, "for": 16566069, "retrieval_score": 7.131615}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076, "for": 16566069, "retrieval_score": 6.926011}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939, "for": 16566069, "retrieval_score": 10.994913}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966, "for": 16566069, "retrieval_score": 10.994913}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697, "for": 16566069, "retrieval_score": 10.994913}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752, "for": 16566069, "retrieval_score": 10.994913}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768, "for": 16566069, "retrieval_score": 10.994913}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577, "for": 14750675, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578, "for": 14750675, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601, "for": 14750675, "retrieval_score": 7.5568957}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602, "for": 14750675, "retrieval_score": 7.5568957}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 14750675, "retrieval_score": 7.098534}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113, "for": 25292838, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115, "for": 25292838, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168, "for": 25292838, "retrieval_score": 14.197068}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170, "for": 25292838, "retrieval_score": 14.197068}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137, "for": 25292838, "retrieval_score": 11.853587}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683, "for": 8459231, "retrieval_score": 11.280904}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663, "for": 8459231, "retrieval_score": 9.8809595}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120, "for": 8459231, "retrieval_score": 8.857946}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123, "for": 8459231, "retrieval_score": 8.857946}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130, "for": 8459231, "retrieval_score": 8.857946}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877, "for": 4664850, "retrieval_score": 15.255539}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338, "for": 4664850, "retrieval_score": 13.09412}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777, "for": 4664850, "retrieval_score": 13.09412}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940, "for": 4664850, "retrieval_score": 11.469158}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950, "for": 4664850, "retrieval_score": 11.469158}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873, "for": 4664850, "retrieval_score": 33.60371}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155, "for": 4664850, "retrieval_score": 33.60371}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221, "for": 4664850, "retrieval_score": 33.60371}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225, "for": 4664850, "retrieval_score": 33.60371}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296, "for": 4664850, "retrieval_score": 33.60371}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 35005907, "retrieval_score": 16.882479}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 35005907, "retrieval_score": 16.882479}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 35005907, "retrieval_score": 16.882479}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 35005907, "retrieval_score": 16.882479}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 35005907, "retrieval_score": 16.882479}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103, "for": 18071222, "retrieval_score": 8.514181}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432, "for": 18071222, "retrieval_score": 8.514181}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101, "for": 18071222, "retrieval_score": 8.308816}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031, "for": 18071222, "retrieval_score": 8.069274}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375, "for": 18071222, "retrieval_score": 8.069274}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 13571134, "retrieval_score": 8.819389}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490, "for": 13571134, "retrieval_score": 7.3926377}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704, "for": 13571134, "retrieval_score": 7.3926377}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482, "for": 13571134, "retrieval_score": 7.3884673}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493, "for": 13571134, "retrieval_score": 7.3884673}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455, "for": 652291, "retrieval_score": 13.252438}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456, "for": 652291, "retrieval_score": 13.252438}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214, "for": 652291, "retrieval_score": 13.252438}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584, "for": 652291, "retrieval_score": 13.252438}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849, "for": 652291, "retrieval_score": 13.252438}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062, "for": 24076297, "retrieval_score": 6.611951}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490, "for": 24076297, "retrieval_score": 6.611951}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512, "for": 24076297, "retrieval_score": 6.611951}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245, "for": 24076297, "retrieval_score": 5.8480387}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312, "for": 24076297, "retrieval_score": 5.8480387}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 14961562, "retrieval_score": 5.627493}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 14961562, "retrieval_score": 5.627493}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 14961562, "retrieval_score": 5.627493}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 14961562, "retrieval_score": 5.627493}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 14961562, "retrieval_score": 5.627493}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 176918, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 176918, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 176918, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 176918, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 176918, "retrieval_score": 14.046785}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942, "for": 104420, "retrieval_score": 9.292767}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952, "for": 104420, "retrieval_score": 9.292767}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017, "for": 104420, "retrieval_score": 9.292767}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 104420, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 104420, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 104420, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 104420, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 104420, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 104420, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 104420, "retrieval_score": 7.377835}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307, "for": 11066400, "retrieval_score": 17.6046}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312, "for": 11066400, "retrieval_score": 10.603445}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313, "for": 11066400, "retrieval_score": 8.844721}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314, "for": 11066400, "retrieval_score": 8.844721}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315, "for": 11066400, "retrieval_score": 7.586412}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682, "for": 2052390, "retrieval_score": 11.15621}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619, "for": 2052390, "retrieval_score": 10.275188}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704, "for": 2052390, "retrieval_score": 4.946905}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631, "for": 2052390, "retrieval_score": 8.629803}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363, "for": 2052390, "retrieval_score": 7.2052994}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631, "for": 2052390, "retrieval_score": 8.629803}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 2052390, "retrieval_score": 8.18273}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363, "for": 2052390, "retrieval_score": 7.2052994}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682, "for": 2052390, "retrieval_score": 11.15621}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437, "for": 2052390, "retrieval_score": 7.289562}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476, "for": 2052390, "retrieval_score": 7.289562}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631, "for": 2052390, "retrieval_score": 17.259605}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363, "for": 2052390, "retrieval_score": 14.410599}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255, "for": 2052390, "retrieval_score": 14.410599}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256, "for": 2052390, "retrieval_score": 14.410599}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257, "for": 2052390, "retrieval_score": 14.410599}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682, "for": 2052390, "retrieval_score": 11.15621}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619, "for": 2052390, "retrieval_score": 10.275188}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238, "for": 2052390, "retrieval_score": 9.314677}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704, "for": 2052390, "retrieval_score": 4.946905}
{"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662, "for": 2052390, "retrieval_score": 12.306616}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114, "for": 2052390, "retrieval_score": 6.1221156}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946, "for": 2052390, "retrieval_score": 6.1221156}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951, "for": 2052390, "retrieval_score": 6.1221156}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964, "for": 2052390, "retrieval_score": 6.1221156}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903, "for": 2052390, "retrieval_score": 17.6046}
{"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904, "for": 2052390, "retrieval_score": 17.6046}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905, "for": 2052390, "retrieval_score": 17.6046}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906, "for": 2052390, "retrieval_score": 17.6046}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907, "for": 2052390, "retrieval_score": 17.6046}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974, "for": 7732125, "retrieval_score": 7.3926377}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 7732125, "retrieval_score": 7.063412}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974, "for": 7732125, "retrieval_score": 7.3926377}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461, "for": 7732125, "retrieval_score": 7.3108277}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19, "for": 7732125, "retrieval_score": 7.063412}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739, "for": 9590965, "retrieval_score": 10.275188}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938, "for": 9590965, "retrieval_score": 5.3102937}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948, "for": 9590965, "retrieval_score": 5.3102937}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003, "for": 9590965, "retrieval_score": 5.3102937}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013, "for": 9590965, "retrieval_score": 5.3102937}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978, "for": 12329853, "retrieval_score": 8.549236}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039, "for": 12329853, "retrieval_score": 8.549236}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046, "for": 12329853, "retrieval_score": 8.549236}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051, "for": 12329853, "retrieval_score": 8.549236}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053, "for": 12329853, "retrieval_score": 8.549236}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127, "for": 19205916, "retrieval_score": 11.15621}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293, "for": 19205916, "retrieval_score": 9.560671}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126, "for": 19205916, "retrieval_score": 9.314677}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986, "for": 19205916, "retrieval_score": 8.192322}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987, "for": 19205916, "retrieval_score": 8.192322}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 4880960, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 4880960, "retrieval_score": 9.314677}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 4880960, "retrieval_score": 8.322354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4880960, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4880960, "retrieval_score": 8.18273}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124, "for": 4880960, "retrieval_score": 9.696108}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609, "for": 4880960, "retrieval_score": 9.314677}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123, "for": 4880960, "retrieval_score": 8.322354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 4880960, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 4880960, "retrieval_score": 8.18273}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976, "for": 14661051, "retrieval_score": 6.937325}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822, "for": 14661051, "retrieval_score": 6.121957}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827, "for": 14661051, "retrieval_score": 6.121957}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829, "for": 14661051, "retrieval_score": 6.121957}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831, "for": 14661051, "retrieval_score": 6.121957}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132, "for": 23638638, "retrieval_score": 16.36546}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990, "for": 23638638, "retrieval_score": 16.36546}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336, "for": 23638638, "retrieval_score": 16.36546}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131, "for": 23638638, "retrieval_score": 14.046785}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363, "for": 23638638, "retrieval_score": 14.046785}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046, "for": 35078261, "retrieval_score": 17.51239}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155, "for": 35078261, "retrieval_score": 17.51239}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127, "for": 35078261, "retrieval_score": 14.621655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282, "for": 35078261, "retrieval_score": 14.621655}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398, "for": 35078261, "retrieval_score": 14.621655}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 4223923, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 4223923, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 4223923, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 4223923, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 4223923, "retrieval_score": 11.254986}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943, "for": 2597932, "retrieval_score": 8.779708}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953, "for": 2597932, "retrieval_score": 8.779708}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018, "for": 2597932, "retrieval_score": 8.779708}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941, "for": 2597932, "retrieval_score": 7.377835}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951, "for": 2597932, "retrieval_score": 7.377835}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117, "for": 26541968, "retrieval_score": 18.781567}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172, "for": 26541968, "retrieval_score": 18.781567}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186, "for": 26541968, "retrieval_score": 18.781567}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276, "for": 26541968, "retrieval_score": 18.781567}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280, "for": 26541968, "retrieval_score": 18.781567}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017, "for": 33065588, "retrieval_score": 8.819389}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686, "for": 33065588, "retrieval_score": 7.784379}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068, "for": 33065588, "retrieval_score": 7.784379}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661, "for": 33065588, "retrieval_score": 7.784379}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482, "for": 33065588, "retrieval_score": 7.289562}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125, "for": 775296, "retrieval_score": 11.254986}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129, "for": 775296, "retrieval_score": 11.254986}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057, "for": 775296, "retrieval_score": 11.254986}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886, "for": 775296, "retrieval_score": 11.254986}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091, "for": 775296, "retrieval_score": 11.254986}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310, "for": 5868374, "retrieval_score": 19.392216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313, "for": 5868374, "retrieval_score": 16.644709}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687, "for": 5868374, "retrieval_score": 10.275188}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470, "for": 5868374, "retrieval_score": 8.18273}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471, "for": 5868374, "retrieval_score": 8.18273}
